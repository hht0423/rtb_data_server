/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ocean.rtb.persist.bean.thrift.stat;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2019-3-27")
public class RtbStatQueryData implements org.apache.thrift.TBase<RtbStatQueryData, RtbStatQueryData._Fields>, java.io.Serializable, Cloneable, Comparable<RtbStatQueryData> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RtbStatQueryData");

  private static final org.apache.thrift.protocol.TField SRC_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("srcId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField BALANCE_TOTAL_FIELD_DESC = new org.apache.thrift.protocol.TField("balanceTotal", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField BALANCE_REMAIN_FIELD_DESC = new org.apache.thrift.protocol.TField("balanceRemain", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField BALANCE_FIELD_DESC = new org.apache.thrift.protocol.TField("balance", org.apache.thrift.protocol.TType.MAP, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new RtbStatQueryDataStandardSchemeFactory());
    schemes.put(TupleScheme.class, new RtbStatQueryDataTupleSchemeFactory());
  }

  public String srcId; // required
  public long balanceTotal; // required
  public long balanceRemain; // required
  public Map<Long,com.ocean.rtb.persist.bean.thrift.common.RtbBalance> balance; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SRC_ID((short)1, "srcId"),
    BALANCE_TOTAL((short)2, "balanceTotal"),
    BALANCE_REMAIN((short)3, "balanceRemain"),
    BALANCE((short)4, "balance");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SRC_ID
          return SRC_ID;
        case 2: // BALANCE_TOTAL
          return BALANCE_TOTAL;
        case 3: // BALANCE_REMAIN
          return BALANCE_REMAIN;
        case 4: // BALANCE
          return BALANCE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __BALANCETOTAL_ISSET_ID = 0;
  private static final int __BALANCEREMAIN_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.BALANCE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SRC_ID, new org.apache.thrift.meta_data.FieldMetaData("srcId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BALANCE_TOTAL, new org.apache.thrift.meta_data.FieldMetaData("balanceTotal", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.BALANCE_REMAIN, new org.apache.thrift.meta_data.FieldMetaData("balanceRemain", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.BALANCE, new org.apache.thrift.meta_data.FieldMetaData("balance", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ocean.rtb.persist.bean.thrift.common.RtbBalance.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RtbStatQueryData.class, metaDataMap);
  }

  public RtbStatQueryData() {
  }

  public RtbStatQueryData(
    String srcId,
    long balanceTotal,
    long balanceRemain)
  {
    this();
    this.srcId = srcId;
    this.balanceTotal = balanceTotal;
    setBalanceTotalIsSet(true);
    this.balanceRemain = balanceRemain;
    setBalanceRemainIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RtbStatQueryData(RtbStatQueryData other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetSrcId()) {
      this.srcId = other.srcId;
    }
    this.balanceTotal = other.balanceTotal;
    this.balanceRemain = other.balanceRemain;
    if (other.isSetBalance()) {
      Map<Long,com.ocean.rtb.persist.bean.thrift.common.RtbBalance> __this__balance = new HashMap<Long,com.ocean.rtb.persist.bean.thrift.common.RtbBalance>(other.balance.size());
      for (Map.Entry<Long, com.ocean.rtb.persist.bean.thrift.common.RtbBalance> other_element : other.balance.entrySet()) {

        Long other_element_key = other_element.getKey();
        com.ocean.rtb.persist.bean.thrift.common.RtbBalance other_element_value = other_element.getValue();

        Long __this__balance_copy_key = other_element_key;

        com.ocean.rtb.persist.bean.thrift.common.RtbBalance __this__balance_copy_value = new com.ocean.rtb.persist.bean.thrift.common.RtbBalance(other_element_value);

        __this__balance.put(__this__balance_copy_key, __this__balance_copy_value);
      }
      this.balance = __this__balance;
    }
  }

  public RtbStatQueryData deepCopy() {
    return new RtbStatQueryData(this);
  }

  @Override
  public void clear() {
    this.srcId = null;
    setBalanceTotalIsSet(false);
    this.balanceTotal = 0;
    setBalanceRemainIsSet(false);
    this.balanceRemain = 0;
    this.balance = null;
  }

  public String getSrcId() {
    return this.srcId;
  }

  public RtbStatQueryData setSrcId(String srcId) {
    this.srcId = srcId;
    return this;
  }

  public void unsetSrcId() {
    this.srcId = null;
  }

  /** Returns true if field srcId is set (has been assigned a value) and false otherwise */
  public boolean isSetSrcId() {
    return this.srcId != null;
  }

  public void setSrcIdIsSet(boolean value) {
    if (!value) {
      this.srcId = null;
    }
  }

  public long getBalanceTotal() {
    return this.balanceTotal;
  }

  public RtbStatQueryData setBalanceTotal(long balanceTotal) {
    this.balanceTotal = balanceTotal;
    setBalanceTotalIsSet(true);
    return this;
  }

  public void unsetBalanceTotal() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BALANCETOTAL_ISSET_ID);
  }

  /** Returns true if field balanceTotal is set (has been assigned a value) and false otherwise */
  public boolean isSetBalanceTotal() {
    return EncodingUtils.testBit(__isset_bitfield, __BALANCETOTAL_ISSET_ID);
  }

  public void setBalanceTotalIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BALANCETOTAL_ISSET_ID, value);
  }

  public long getBalanceRemain() {
    return this.balanceRemain;
  }

  public RtbStatQueryData setBalanceRemain(long balanceRemain) {
    this.balanceRemain = balanceRemain;
    setBalanceRemainIsSet(true);
    return this;
  }

  public void unsetBalanceRemain() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BALANCEREMAIN_ISSET_ID);
  }

  /** Returns true if field balanceRemain is set (has been assigned a value) and false otherwise */
  public boolean isSetBalanceRemain() {
    return EncodingUtils.testBit(__isset_bitfield, __BALANCEREMAIN_ISSET_ID);
  }

  public void setBalanceRemainIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BALANCEREMAIN_ISSET_ID, value);
  }

  public int getBalanceSize() {
    return (this.balance == null) ? 0 : this.balance.size();
  }

  public void putToBalance(long key, com.ocean.rtb.persist.bean.thrift.common.RtbBalance val) {
    if (this.balance == null) {
      this.balance = new HashMap<Long,com.ocean.rtb.persist.bean.thrift.common.RtbBalance>();
    }
    this.balance.put(key, val);
  }

  public Map<Long,com.ocean.rtb.persist.bean.thrift.common.RtbBalance> getBalance() {
    return this.balance;
  }

  public RtbStatQueryData setBalance(Map<Long,com.ocean.rtb.persist.bean.thrift.common.RtbBalance> balance) {
    this.balance = balance;
    return this;
  }

  public void unsetBalance() {
    this.balance = null;
  }

  /** Returns true if field balance is set (has been assigned a value) and false otherwise */
  public boolean isSetBalance() {
    return this.balance != null;
  }

  public void setBalanceIsSet(boolean value) {
    if (!value) {
      this.balance = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SRC_ID:
      if (value == null) {
        unsetSrcId();
      } else {
        setSrcId((String)value);
      }
      break;

    case BALANCE_TOTAL:
      if (value == null) {
        unsetBalanceTotal();
      } else {
        setBalanceTotal((Long)value);
      }
      break;

    case BALANCE_REMAIN:
      if (value == null) {
        unsetBalanceRemain();
      } else {
        setBalanceRemain((Long)value);
      }
      break;

    case BALANCE:
      if (value == null) {
        unsetBalance();
      } else {
        setBalance((Map<Long,com.ocean.rtb.persist.bean.thrift.common.RtbBalance>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SRC_ID:
      return getSrcId();

    case BALANCE_TOTAL:
      return Long.valueOf(getBalanceTotal());

    case BALANCE_REMAIN:
      return Long.valueOf(getBalanceRemain());

    case BALANCE:
      return getBalance();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SRC_ID:
      return isSetSrcId();
    case BALANCE_TOTAL:
      return isSetBalanceTotal();
    case BALANCE_REMAIN:
      return isSetBalanceRemain();
    case BALANCE:
      return isSetBalance();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RtbStatQueryData)
      return this.equals((RtbStatQueryData)that);
    return false;
  }

  public boolean equals(RtbStatQueryData that) {
    if (that == null)
      return false;

    boolean this_present_srcId = true && this.isSetSrcId();
    boolean that_present_srcId = true && that.isSetSrcId();
    if (this_present_srcId || that_present_srcId) {
      if (!(this_present_srcId && that_present_srcId))
        return false;
      if (!this.srcId.equals(that.srcId))
        return false;
    }

    boolean this_present_balanceTotal = true;
    boolean that_present_balanceTotal = true;
    if (this_present_balanceTotal || that_present_balanceTotal) {
      if (!(this_present_balanceTotal && that_present_balanceTotal))
        return false;
      if (this.balanceTotal != that.balanceTotal)
        return false;
    }

    boolean this_present_balanceRemain = true;
    boolean that_present_balanceRemain = true;
    if (this_present_balanceRemain || that_present_balanceRemain) {
      if (!(this_present_balanceRemain && that_present_balanceRemain))
        return false;
      if (this.balanceRemain != that.balanceRemain)
        return false;
    }

    boolean this_present_balance = true && this.isSetBalance();
    boolean that_present_balance = true && that.isSetBalance();
    if (this_present_balance || that_present_balance) {
      if (!(this_present_balance && that_present_balance))
        return false;
      if (!this.balance.equals(that.balance))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_srcId = true && (isSetSrcId());
    list.add(present_srcId);
    if (present_srcId)
      list.add(srcId);

    boolean present_balanceTotal = true;
    list.add(present_balanceTotal);
    if (present_balanceTotal)
      list.add(balanceTotal);

    boolean present_balanceRemain = true;
    list.add(present_balanceRemain);
    if (present_balanceRemain)
      list.add(balanceRemain);

    boolean present_balance = true && (isSetBalance());
    list.add(present_balance);
    if (present_balance)
      list.add(balance);

    return list.hashCode();
  }

  @Override
  public int compareTo(RtbStatQueryData other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSrcId()).compareTo(other.isSetSrcId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSrcId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.srcId, other.srcId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBalanceTotal()).compareTo(other.isSetBalanceTotal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBalanceTotal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.balanceTotal, other.balanceTotal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBalanceRemain()).compareTo(other.isSetBalanceRemain());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBalanceRemain()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.balanceRemain, other.balanceRemain);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBalance()).compareTo(other.isSetBalance());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBalance()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.balance, other.balance);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("RtbStatQueryData(");
    boolean first = true;

    sb.append("srcId:");
    if (this.srcId == null) {
      sb.append("null");
    } else {
      sb.append(this.srcId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("balanceTotal:");
    sb.append(this.balanceTotal);
    first = false;
    if (!first) sb.append(", ");
    sb.append("balanceRemain:");
    sb.append(this.balanceRemain);
    first = false;
    if (isSetBalance()) {
      if (!first) sb.append(", ");
      sb.append("balance:");
      if (this.balance == null) {
        sb.append("null");
      } else {
        sb.append(this.balance);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (srcId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'srcId' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'balanceTotal' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'balanceRemain' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RtbStatQueryDataStandardSchemeFactory implements SchemeFactory {
    public RtbStatQueryDataStandardScheme getScheme() {
      return new RtbStatQueryDataStandardScheme();
    }
  }

  private static class RtbStatQueryDataStandardScheme extends StandardScheme<RtbStatQueryData> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RtbStatQueryData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SRC_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.srcId = iprot.readString();
              struct.setSrcIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // BALANCE_TOTAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.balanceTotal = iprot.readI64();
              struct.setBalanceTotalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // BALANCE_REMAIN
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.balanceRemain = iprot.readI64();
              struct.setBalanceRemainIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // BALANCE
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map8 = iprot.readMapBegin();
                struct.balance = new HashMap<Long,com.ocean.rtb.persist.bean.thrift.common.RtbBalance>(2*_map8.size);
                long _key9;
                com.ocean.rtb.persist.bean.thrift.common.RtbBalance _val10;
                for (int _i11 = 0; _i11 < _map8.size; ++_i11)
                {
                  _key9 = iprot.readI64();
                  _val10 = new com.ocean.rtb.persist.bean.thrift.common.RtbBalance();
                  _val10.read(iprot);
                  struct.balance.put(_key9, _val10);
                }
                iprot.readMapEnd();
              }
              struct.setBalanceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetBalanceTotal()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'balanceTotal' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetBalanceRemain()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'balanceRemain' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RtbStatQueryData struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.srcId != null) {
        oprot.writeFieldBegin(SRC_ID_FIELD_DESC);
        oprot.writeString(struct.srcId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(BALANCE_TOTAL_FIELD_DESC);
      oprot.writeI64(struct.balanceTotal);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BALANCE_REMAIN_FIELD_DESC);
      oprot.writeI64(struct.balanceRemain);
      oprot.writeFieldEnd();
      if (struct.balance != null) {
        if (struct.isSetBalance()) {
          oprot.writeFieldBegin(BALANCE_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.STRUCT, struct.balance.size()));
            for (Map.Entry<Long, com.ocean.rtb.persist.bean.thrift.common.RtbBalance> _iter12 : struct.balance.entrySet())
            {
              oprot.writeI64(_iter12.getKey());
              _iter12.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RtbStatQueryDataTupleSchemeFactory implements SchemeFactory {
    public RtbStatQueryDataTupleScheme getScheme() {
      return new RtbStatQueryDataTupleScheme();
    }
  }

  private static class RtbStatQueryDataTupleScheme extends TupleScheme<RtbStatQueryData> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RtbStatQueryData struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.srcId);
      oprot.writeI64(struct.balanceTotal);
      oprot.writeI64(struct.balanceRemain);
      BitSet optionals = new BitSet();
      if (struct.isSetBalance()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetBalance()) {
        {
          oprot.writeI32(struct.balance.size());
          for (Map.Entry<Long, com.ocean.rtb.persist.bean.thrift.common.RtbBalance> _iter13 : struct.balance.entrySet())
          {
            oprot.writeI64(_iter13.getKey());
            _iter13.getValue().write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RtbStatQueryData struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.srcId = iprot.readString();
      struct.setSrcIdIsSet(true);
      struct.balanceTotal = iprot.readI64();
      struct.setBalanceTotalIsSet(true);
      struct.balanceRemain = iprot.readI64();
      struct.setBalanceRemainIsSet(true);
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TMap _map14 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.balance = new HashMap<Long,com.ocean.rtb.persist.bean.thrift.common.RtbBalance>(2*_map14.size);
          long _key15;
          com.ocean.rtb.persist.bean.thrift.common.RtbBalance _val16;
          for (int _i17 = 0; _i17 < _map14.size; ++_i17)
          {
            _key15 = iprot.readI64();
            _val16 = new com.ocean.rtb.persist.bean.thrift.common.RtbBalance();
            _val16.read(iprot);
            struct.balance.put(_key15, _val16);
          }
        }
        struct.setBalanceIsSet(true);
      }
    }
  }

}

