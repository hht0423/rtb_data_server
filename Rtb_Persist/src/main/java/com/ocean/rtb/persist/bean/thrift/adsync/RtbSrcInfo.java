/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ocean.rtb.persist.bean.thrift.adsync;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2019-3-22")
public class RtbSrcInfo implements org.apache.thrift.TBase<RtbSrcInfo, RtbSrcInfo._Fields>, java.io.Serializable, Cloneable, Comparable<RtbSrcInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RtbSrcInfo");

  private static final org.apache.thrift.protocol.TField SRC_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("srcId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField PROPERTY_FIELD_DESC = new org.apache.thrift.protocol.TField("property", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField SRC_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("srcType", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("price", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField AD_FIELD_DESC = new org.apache.thrift.protocol.TField("ad", org.apache.thrift.protocol.TType.STRUCT, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new RtbSrcInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new RtbSrcInfoTupleSchemeFactory());
  }

  public String srcId; // required
  /**
   * 
   * @see com.ocean.rtb.persist.bean.thrift.common.RtbSrcProperty
   */
  public com.ocean.rtb.persist.bean.thrift.common.RtbSrcProperty property; // required
  /**
   * 
   * @see com.ocean.rtb.persist.bean.thrift.common.RtbSrcType
   */
  public com.ocean.rtb.persist.bean.thrift.common.RtbSrcType srcType; // required
  public int price; // required
  public com.ocean.rtb.persist.bean.thrift.common.AdInfo ad; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SRC_ID((short)1, "srcId"),
    /**
     * 
     * @see com.ocean.rtb.persist.bean.thrift.common.RtbSrcProperty
     */
    PROPERTY((short)2, "property"),
    /**
     * 
     * @see com.ocean.rtb.persist.bean.thrift.common.RtbSrcType
     */
    SRC_TYPE((short)3, "srcType"),
    PRICE((short)4, "price"),
    AD((short)5, "ad");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SRC_ID
          return SRC_ID;
        case 2: // PROPERTY
          return PROPERTY;
        case 3: // SRC_TYPE
          return SRC_TYPE;
        case 4: // PRICE
          return PRICE;
        case 5: // AD
          return AD;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PRICE_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.AD};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SRC_ID, new org.apache.thrift.meta_data.FieldMetaData("srcId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROPERTY, new org.apache.thrift.meta_data.FieldMetaData("property", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.ocean.rtb.persist.bean.thrift.common.RtbSrcProperty.class)));
    tmpMap.put(_Fields.SRC_TYPE, new org.apache.thrift.meta_data.FieldMetaData("srcType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.ocean.rtb.persist.bean.thrift.common.RtbSrcType.class)));
    tmpMap.put(_Fields.PRICE, new org.apache.thrift.meta_data.FieldMetaData("price", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.AD, new org.apache.thrift.meta_data.FieldMetaData("ad", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ocean.rtb.persist.bean.thrift.common.AdInfo.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RtbSrcInfo.class, metaDataMap);
  }

  public RtbSrcInfo() {
  }

  public RtbSrcInfo(
    String srcId,
    com.ocean.rtb.persist.bean.thrift.common.RtbSrcProperty property,
    com.ocean.rtb.persist.bean.thrift.common.RtbSrcType srcType,
    int price)
  {
    this();
    this.srcId = srcId;
    this.property = property;
    this.srcType = srcType;
    this.price = price;
    setPriceIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RtbSrcInfo(RtbSrcInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetSrcId()) {
      this.srcId = other.srcId;
    }
    if (other.isSetProperty()) {
      this.property = other.property;
    }
    if (other.isSetSrcType()) {
      this.srcType = other.srcType;
    }
    this.price = other.price;
    if (other.isSetAd()) {
      this.ad = new com.ocean.rtb.persist.bean.thrift.common.AdInfo(other.ad);
    }
  }

  public RtbSrcInfo deepCopy() {
    return new RtbSrcInfo(this);
  }

  @Override
  public void clear() {
    this.srcId = null;
    this.property = null;
    this.srcType = null;
    setPriceIsSet(false);
    this.price = 0;
    this.ad = null;
  }

  public String getSrcId() {
    return this.srcId;
  }

  public RtbSrcInfo setSrcId(String srcId) {
    this.srcId = srcId;
    return this;
  }

  public void unsetSrcId() {
    this.srcId = null;
  }

  /** Returns true if field srcId is set (has been assigned a value) and false otherwise */
  public boolean isSetSrcId() {
    return this.srcId != null;
  }

  public void setSrcIdIsSet(boolean value) {
    if (!value) {
      this.srcId = null;
    }
  }

  /**
   * 
   * @see com.ocean.rtb.persist.bean.thrift.common.RtbSrcProperty
   */
  public com.ocean.rtb.persist.bean.thrift.common.RtbSrcProperty getProperty() {
    return this.property;
  }

  /**
   * 
   * @see com.ocean.rtb.persist.bean.thrift.common.RtbSrcProperty
   */
  public RtbSrcInfo setProperty(com.ocean.rtb.persist.bean.thrift.common.RtbSrcProperty property) {
    this.property = property;
    return this;
  }

  public void unsetProperty() {
    this.property = null;
  }

  /** Returns true if field property is set (has been assigned a value) and false otherwise */
  public boolean isSetProperty() {
    return this.property != null;
  }

  public void setPropertyIsSet(boolean value) {
    if (!value) {
      this.property = null;
    }
  }

  /**
   * 
   * @see com.ocean.rtb.persist.bean.thrift.common.RtbSrcType
   */
  public com.ocean.rtb.persist.bean.thrift.common.RtbSrcType getSrcType() {
    return this.srcType;
  }

  /**
   * 
   * @see com.ocean.rtb.persist.bean.thrift.common.RtbSrcType
   */
  public RtbSrcInfo setSrcType(com.ocean.rtb.persist.bean.thrift.common.RtbSrcType srcType) {
    this.srcType = srcType;
    return this;
  }

  public void unsetSrcType() {
    this.srcType = null;
  }

  /** Returns true if field srcType is set (has been assigned a value) and false otherwise */
  public boolean isSetSrcType() {
    return this.srcType != null;
  }

  public void setSrcTypeIsSet(boolean value) {
    if (!value) {
      this.srcType = null;
    }
  }

  public int getPrice() {
    return this.price;
  }

  public RtbSrcInfo setPrice(int price) {
    this.price = price;
    setPriceIsSet(true);
    return this;
  }

  public void unsetPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRICE_ISSET_ID);
  }

  /** Returns true if field price is set (has been assigned a value) and false otherwise */
  public boolean isSetPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __PRICE_ISSET_ID);
  }

  public void setPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRICE_ISSET_ID, value);
  }

  public com.ocean.rtb.persist.bean.thrift.common.AdInfo getAd() {
    return this.ad;
  }

  public RtbSrcInfo setAd(com.ocean.rtb.persist.bean.thrift.common.AdInfo ad) {
    this.ad = ad;
    return this;
  }

  public void unsetAd() {
    this.ad = null;
  }

  /** Returns true if field ad is set (has been assigned a value) and false otherwise */
  public boolean isSetAd() {
    return this.ad != null;
  }

  public void setAdIsSet(boolean value) {
    if (!value) {
      this.ad = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SRC_ID:
      if (value == null) {
        unsetSrcId();
      } else {
        setSrcId((String)value);
      }
      break;

    case PROPERTY:
      if (value == null) {
        unsetProperty();
      } else {
        setProperty((com.ocean.rtb.persist.bean.thrift.common.RtbSrcProperty)value);
      }
      break;

    case SRC_TYPE:
      if (value == null) {
        unsetSrcType();
      } else {
        setSrcType((com.ocean.rtb.persist.bean.thrift.common.RtbSrcType)value);
      }
      break;

    case PRICE:
      if (value == null) {
        unsetPrice();
      } else {
        setPrice((Integer)value);
      }
      break;

    case AD:
      if (value == null) {
        unsetAd();
      } else {
        setAd((com.ocean.rtb.persist.bean.thrift.common.AdInfo)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SRC_ID:
      return getSrcId();

    case PROPERTY:
      return getProperty();

    case SRC_TYPE:
      return getSrcType();

    case PRICE:
      return Integer.valueOf(getPrice());

    case AD:
      return getAd();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SRC_ID:
      return isSetSrcId();
    case PROPERTY:
      return isSetProperty();
    case SRC_TYPE:
      return isSetSrcType();
    case PRICE:
      return isSetPrice();
    case AD:
      return isSetAd();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RtbSrcInfo)
      return this.equals((RtbSrcInfo)that);
    return false;
  }

  public boolean equals(RtbSrcInfo that) {
    if (that == null)
      return false;

    boolean this_present_srcId = true && this.isSetSrcId();
    boolean that_present_srcId = true && that.isSetSrcId();
    if (this_present_srcId || that_present_srcId) {
      if (!(this_present_srcId && that_present_srcId))
        return false;
      if (!this.srcId.equals(that.srcId))
        return false;
    }

    boolean this_present_property = true && this.isSetProperty();
    boolean that_present_property = true && that.isSetProperty();
    if (this_present_property || that_present_property) {
      if (!(this_present_property && that_present_property))
        return false;
      if (!this.property.equals(that.property))
        return false;
    }

    boolean this_present_srcType = true && this.isSetSrcType();
    boolean that_present_srcType = true && that.isSetSrcType();
    if (this_present_srcType || that_present_srcType) {
      if (!(this_present_srcType && that_present_srcType))
        return false;
      if (!this.srcType.equals(that.srcType))
        return false;
    }

    boolean this_present_price = true;
    boolean that_present_price = true;
    if (this_present_price || that_present_price) {
      if (!(this_present_price && that_present_price))
        return false;
      if (this.price != that.price)
        return false;
    }

    boolean this_present_ad = true && this.isSetAd();
    boolean that_present_ad = true && that.isSetAd();
    if (this_present_ad || that_present_ad) {
      if (!(this_present_ad && that_present_ad))
        return false;
      if (!this.ad.equals(that.ad))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_srcId = true && (isSetSrcId());
    list.add(present_srcId);
    if (present_srcId)
      list.add(srcId);

    boolean present_property = true && (isSetProperty());
    list.add(present_property);
    if (present_property)
      list.add(property.getValue());

    boolean present_srcType = true && (isSetSrcType());
    list.add(present_srcType);
    if (present_srcType)
      list.add(srcType.getValue());

    boolean present_price = true;
    list.add(present_price);
    if (present_price)
      list.add(price);

    boolean present_ad = true && (isSetAd());
    list.add(present_ad);
    if (present_ad)
      list.add(ad);

    return list.hashCode();
  }

  @Override
  public int compareTo(RtbSrcInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSrcId()).compareTo(other.isSetSrcId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSrcId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.srcId, other.srcId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProperty()).compareTo(other.isSetProperty());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProperty()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.property, other.property);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSrcType()).compareTo(other.isSetSrcType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSrcType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.srcType, other.srcType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrice()).compareTo(other.isSetPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.price, other.price);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAd()).compareTo(other.isSetAd());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAd()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ad, other.ad);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("RtbSrcInfo(");
    boolean first = true;

    sb.append("srcId:");
    if (this.srcId == null) {
      sb.append("null");
    } else {
      sb.append(this.srcId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("property:");
    if (this.property == null) {
      sb.append("null");
    } else {
      sb.append(this.property);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("srcType:");
    if (this.srcType == null) {
      sb.append("null");
    } else {
      sb.append(this.srcType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("price:");
    sb.append(this.price);
    first = false;
    if (isSetAd()) {
      if (!first) sb.append(", ");
      sb.append("ad:");
      if (this.ad == null) {
        sb.append("null");
      } else {
        sb.append(this.ad);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (srcId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'srcId' was not present! Struct: " + toString());
    }
    if (property == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'property' was not present! Struct: " + toString());
    }
    if (srcType == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'srcType' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'price' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
    if (ad != null) {
      ad.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RtbSrcInfoStandardSchemeFactory implements SchemeFactory {
    public RtbSrcInfoStandardScheme getScheme() {
      return new RtbSrcInfoStandardScheme();
    }
  }

  private static class RtbSrcInfoStandardScheme extends StandardScheme<RtbSrcInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RtbSrcInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SRC_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.srcId = iprot.readString();
              struct.setSrcIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PROPERTY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.property = com.ocean.rtb.persist.bean.thrift.common.RtbSrcProperty.findByValue(iprot.readI32());
              struct.setPropertyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SRC_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.srcType = com.ocean.rtb.persist.bean.thrift.common.RtbSrcType.findByValue(iprot.readI32());
              struct.setSrcTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.price = iprot.readI32();
              struct.setPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // AD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.ad = new com.ocean.rtb.persist.bean.thrift.common.AdInfo();
              struct.ad.read(iprot);
              struct.setAdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetPrice()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'price' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RtbSrcInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.srcId != null) {
        oprot.writeFieldBegin(SRC_ID_FIELD_DESC);
        oprot.writeString(struct.srcId);
        oprot.writeFieldEnd();
      }
      if (struct.property != null) {
        oprot.writeFieldBegin(PROPERTY_FIELD_DESC);
        oprot.writeI32(struct.property.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.srcType != null) {
        oprot.writeFieldBegin(SRC_TYPE_FIELD_DESC);
        oprot.writeI32(struct.srcType.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PRICE_FIELD_DESC);
      oprot.writeI32(struct.price);
      oprot.writeFieldEnd();
      if (struct.ad != null) {
        if (struct.isSetAd()) {
          oprot.writeFieldBegin(AD_FIELD_DESC);
          struct.ad.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RtbSrcInfoTupleSchemeFactory implements SchemeFactory {
    public RtbSrcInfoTupleScheme getScheme() {
      return new RtbSrcInfoTupleScheme();
    }
  }

  private static class RtbSrcInfoTupleScheme extends TupleScheme<RtbSrcInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RtbSrcInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.srcId);
      oprot.writeI32(struct.property.getValue());
      oprot.writeI32(struct.srcType.getValue());
      oprot.writeI32(struct.price);
      BitSet optionals = new BitSet();
      if (struct.isSetAd()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetAd()) {
        struct.ad.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RtbSrcInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.srcId = iprot.readString();
      struct.setSrcIdIsSet(true);
      struct.property = com.ocean.rtb.persist.bean.thrift.common.RtbSrcProperty.findByValue(iprot.readI32());
      struct.setPropertyIsSet(true);
      struct.srcType = com.ocean.rtb.persist.bean.thrift.common.RtbSrcType.findByValue(iprot.readI32());
      struct.setSrcTypeIsSet(true);
      struct.price = iprot.readI32();
      struct.setPriceIsSet(true);
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.ad = new com.ocean.rtb.persist.bean.thrift.common.AdInfo();
        struct.ad.read(iprot);
        struct.setAdIsSet(true);
      }
    }
  }

}

