/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ocean.rtb.persist.bean.thrift.adsync;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2019-3-22")
public class SpaceidConfig implements org.apache.thrift.TBase<SpaceidConfig, SpaceidConfig._Fields>, java.io.Serializable, Cloneable, Comparable<SpaceidConfig> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SpaceidConfig");

  private static final org.apache.thrift.protocol.TField SPACE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("spaceId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField SPACEID_WIDTH_FIELD_DESC = new org.apache.thrift.protocol.TField("spaceidWidth", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField SPACEID_HEIGHT_FIELD_DESC = new org.apache.thrift.protocol.TField("spaceidHeight", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("data", org.apache.thrift.protocol.TType.STRUCT, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SpaceidConfigStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SpaceidConfigTupleSchemeFactory());
  }

  public int spaceId; // required
  /**
   * 
   * @see com.ocean.rtb.persist.bean.thrift.common.RtbSpaceType
   */
  public com.ocean.rtb.persist.bean.thrift.common.RtbSpaceType type; // required
  public int spaceidWidth; // required
  public int spaceidHeight; // required
  public SpaceidConfigData data; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SPACE_ID((short)1, "spaceId"),
    /**
     * 
     * @see com.ocean.rtb.persist.bean.thrift.common.RtbSpaceType
     */
    TYPE((short)2, "type"),
    SPACEID_WIDTH((short)3, "spaceidWidth"),
    SPACEID_HEIGHT((short)4, "spaceidHeight"),
    DATA((short)5, "data");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SPACE_ID
          return SPACE_ID;
        case 2: // TYPE
          return TYPE;
        case 3: // SPACEID_WIDTH
          return SPACEID_WIDTH;
        case 4: // SPACEID_HEIGHT
          return SPACEID_HEIGHT;
        case 5: // DATA
          return DATA;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SPACEID_ISSET_ID = 0;
  private static final int __SPACEIDWIDTH_ISSET_ID = 1;
  private static final int __SPACEIDHEIGHT_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.DATA};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SPACE_ID, new org.apache.thrift.meta_data.FieldMetaData("spaceId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.ocean.rtb.persist.bean.thrift.common.RtbSpaceType.class)));
    tmpMap.put(_Fields.SPACEID_WIDTH, new org.apache.thrift.meta_data.FieldMetaData("spaceidWidth", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SPACEID_HEIGHT, new org.apache.thrift.meta_data.FieldMetaData("spaceidHeight", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DATA, new org.apache.thrift.meta_data.FieldMetaData("data", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SpaceidConfigData.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SpaceidConfig.class, metaDataMap);
  }

  public SpaceidConfig() {
  }

  public SpaceidConfig(
    int spaceId,
    com.ocean.rtb.persist.bean.thrift.common.RtbSpaceType type,
    int spaceidWidth,
    int spaceidHeight)
  {
    this();
    this.spaceId = spaceId;
    setSpaceIdIsSet(true);
    this.type = type;
    this.spaceidWidth = spaceidWidth;
    setSpaceidWidthIsSet(true);
    this.spaceidHeight = spaceidHeight;
    setSpaceidHeightIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SpaceidConfig(SpaceidConfig other) {
    __isset_bitfield = other.__isset_bitfield;
    this.spaceId = other.spaceId;
    if (other.isSetType()) {
      this.type = other.type;
    }
    this.spaceidWidth = other.spaceidWidth;
    this.spaceidHeight = other.spaceidHeight;
    if (other.isSetData()) {
      this.data = new SpaceidConfigData(other.data);
    }
  }

  public SpaceidConfig deepCopy() {
    return new SpaceidConfig(this);
  }

  @Override
  public void clear() {
    setSpaceIdIsSet(false);
    this.spaceId = 0;
    this.type = null;
    setSpaceidWidthIsSet(false);
    this.spaceidWidth = 0;
    setSpaceidHeightIsSet(false);
    this.spaceidHeight = 0;
    this.data = null;
  }

  public int getSpaceId() {
    return this.spaceId;
  }

  public SpaceidConfig setSpaceId(int spaceId) {
    this.spaceId = spaceId;
    setSpaceIdIsSet(true);
    return this;
  }

  public void unsetSpaceId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SPACEID_ISSET_ID);
  }

  /** Returns true if field spaceId is set (has been assigned a value) and false otherwise */
  public boolean isSetSpaceId() {
    return EncodingUtils.testBit(__isset_bitfield, __SPACEID_ISSET_ID);
  }

  public void setSpaceIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SPACEID_ISSET_ID, value);
  }

  /**
   * 
   * @see com.ocean.rtb.persist.bean.thrift.common.RtbSpaceType
   */
  public com.ocean.rtb.persist.bean.thrift.common.RtbSpaceType getType() {
    return this.type;
  }

  /**
   * 
   * @see com.ocean.rtb.persist.bean.thrift.common.RtbSpaceType
   */
  public SpaceidConfig setType(com.ocean.rtb.persist.bean.thrift.common.RtbSpaceType type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public int getSpaceidWidth() {
    return this.spaceidWidth;
  }

  public SpaceidConfig setSpaceidWidth(int spaceidWidth) {
    this.spaceidWidth = spaceidWidth;
    setSpaceidWidthIsSet(true);
    return this;
  }

  public void unsetSpaceidWidth() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SPACEIDWIDTH_ISSET_ID);
  }

  /** Returns true if field spaceidWidth is set (has been assigned a value) and false otherwise */
  public boolean isSetSpaceidWidth() {
    return EncodingUtils.testBit(__isset_bitfield, __SPACEIDWIDTH_ISSET_ID);
  }

  public void setSpaceidWidthIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SPACEIDWIDTH_ISSET_ID, value);
  }

  public int getSpaceidHeight() {
    return this.spaceidHeight;
  }

  public SpaceidConfig setSpaceidHeight(int spaceidHeight) {
    this.spaceidHeight = spaceidHeight;
    setSpaceidHeightIsSet(true);
    return this;
  }

  public void unsetSpaceidHeight() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SPACEIDHEIGHT_ISSET_ID);
  }

  /** Returns true if field spaceidHeight is set (has been assigned a value) and false otherwise */
  public boolean isSetSpaceidHeight() {
    return EncodingUtils.testBit(__isset_bitfield, __SPACEIDHEIGHT_ISSET_ID);
  }

  public void setSpaceidHeightIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SPACEIDHEIGHT_ISSET_ID, value);
  }

  public SpaceidConfigData getData() {
    return this.data;
  }

  public SpaceidConfig setData(SpaceidConfigData data) {
    this.data = data;
    return this;
  }

  public void unsetData() {
    this.data = null;
  }

  /** Returns true if field data is set (has been assigned a value) and false otherwise */
  public boolean isSetData() {
    return this.data != null;
  }

  public void setDataIsSet(boolean value) {
    if (!value) {
      this.data = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SPACE_ID:
      if (value == null) {
        unsetSpaceId();
      } else {
        setSpaceId((Integer)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((com.ocean.rtb.persist.bean.thrift.common.RtbSpaceType)value);
      }
      break;

    case SPACEID_WIDTH:
      if (value == null) {
        unsetSpaceidWidth();
      } else {
        setSpaceidWidth((Integer)value);
      }
      break;

    case SPACEID_HEIGHT:
      if (value == null) {
        unsetSpaceidHeight();
      } else {
        setSpaceidHeight((Integer)value);
      }
      break;

    case DATA:
      if (value == null) {
        unsetData();
      } else {
        setData((SpaceidConfigData)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SPACE_ID:
      return Integer.valueOf(getSpaceId());

    case TYPE:
      return getType();

    case SPACEID_WIDTH:
      return Integer.valueOf(getSpaceidWidth());

    case SPACEID_HEIGHT:
      return Integer.valueOf(getSpaceidHeight());

    case DATA:
      return getData();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SPACE_ID:
      return isSetSpaceId();
    case TYPE:
      return isSetType();
    case SPACEID_WIDTH:
      return isSetSpaceidWidth();
    case SPACEID_HEIGHT:
      return isSetSpaceidHeight();
    case DATA:
      return isSetData();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SpaceidConfig)
      return this.equals((SpaceidConfig)that);
    return false;
  }

  public boolean equals(SpaceidConfig that) {
    if (that == null)
      return false;

    boolean this_present_spaceId = true;
    boolean that_present_spaceId = true;
    if (this_present_spaceId || that_present_spaceId) {
      if (!(this_present_spaceId && that_present_spaceId))
        return false;
      if (this.spaceId != that.spaceId)
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_spaceidWidth = true;
    boolean that_present_spaceidWidth = true;
    if (this_present_spaceidWidth || that_present_spaceidWidth) {
      if (!(this_present_spaceidWidth && that_present_spaceidWidth))
        return false;
      if (this.spaceidWidth != that.spaceidWidth)
        return false;
    }

    boolean this_present_spaceidHeight = true;
    boolean that_present_spaceidHeight = true;
    if (this_present_spaceidHeight || that_present_spaceidHeight) {
      if (!(this_present_spaceidHeight && that_present_spaceidHeight))
        return false;
      if (this.spaceidHeight != that.spaceidHeight)
        return false;
    }

    boolean this_present_data = true && this.isSetData();
    boolean that_present_data = true && that.isSetData();
    if (this_present_data || that_present_data) {
      if (!(this_present_data && that_present_data))
        return false;
      if (!this.data.equals(that.data))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_spaceId = true;
    list.add(present_spaceId);
    if (present_spaceId)
      list.add(spaceId);

    boolean present_type = true && (isSetType());
    list.add(present_type);
    if (present_type)
      list.add(type.getValue());

    boolean present_spaceidWidth = true;
    list.add(present_spaceidWidth);
    if (present_spaceidWidth)
      list.add(spaceidWidth);

    boolean present_spaceidHeight = true;
    list.add(present_spaceidHeight);
    if (present_spaceidHeight)
      list.add(spaceidHeight);

    boolean present_data = true && (isSetData());
    list.add(present_data);
    if (present_data)
      list.add(data);

    return list.hashCode();
  }

  @Override
  public int compareTo(SpaceidConfig other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSpaceId()).compareTo(other.isSetSpaceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpaceId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spaceId, other.spaceId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSpaceidWidth()).compareTo(other.isSetSpaceidWidth());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpaceidWidth()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spaceidWidth, other.spaceidWidth);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSpaceidHeight()).compareTo(other.isSetSpaceidHeight());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpaceidHeight()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spaceidHeight, other.spaceidHeight);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetData()).compareTo(other.isSetData());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetData()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.data, other.data);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SpaceidConfig(");
    boolean first = true;

    sb.append("spaceId:");
    sb.append(this.spaceId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("spaceidWidth:");
    sb.append(this.spaceidWidth);
    first = false;
    if (!first) sb.append(", ");
    sb.append("spaceidHeight:");
    sb.append(this.spaceidHeight);
    first = false;
    if (isSetData()) {
      if (!first) sb.append(", ");
      sb.append("data:");
      if (this.data == null) {
        sb.append("null");
      } else {
        sb.append(this.data);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'spaceId' because it's a primitive and you chose the non-beans generator.
    if (type == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'type' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'spaceidWidth' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'spaceidHeight' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
    if (data != null) {
      data.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SpaceidConfigStandardSchemeFactory implements SchemeFactory {
    public SpaceidConfigStandardScheme getScheme() {
      return new SpaceidConfigStandardScheme();
    }
  }

  private static class SpaceidConfigStandardScheme extends StandardScheme<SpaceidConfig> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SpaceidConfig struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SPACE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.spaceId = iprot.readI32();
              struct.setSpaceIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = com.ocean.rtb.persist.bean.thrift.common.RtbSpaceType.findByValue(iprot.readI32());
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SPACEID_WIDTH
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.spaceidWidth = iprot.readI32();
              struct.setSpaceidWidthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SPACEID_HEIGHT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.spaceidHeight = iprot.readI32();
              struct.setSpaceidHeightIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.data = new SpaceidConfigData();
              struct.data.read(iprot);
              struct.setDataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetSpaceId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'spaceId' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetSpaceidWidth()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'spaceidWidth' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetSpaceidHeight()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'spaceidHeight' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SpaceidConfig struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SPACE_ID_FIELD_DESC);
      oprot.writeI32(struct.spaceId);
      oprot.writeFieldEnd();
      if (struct.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeI32(struct.type.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SPACEID_WIDTH_FIELD_DESC);
      oprot.writeI32(struct.spaceidWidth);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SPACEID_HEIGHT_FIELD_DESC);
      oprot.writeI32(struct.spaceidHeight);
      oprot.writeFieldEnd();
      if (struct.data != null) {
        if (struct.isSetData()) {
          oprot.writeFieldBegin(DATA_FIELD_DESC);
          struct.data.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SpaceidConfigTupleSchemeFactory implements SchemeFactory {
    public SpaceidConfigTupleScheme getScheme() {
      return new SpaceidConfigTupleScheme();
    }
  }

  private static class SpaceidConfigTupleScheme extends TupleScheme<SpaceidConfig> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SpaceidConfig struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.spaceId);
      oprot.writeI32(struct.type.getValue());
      oprot.writeI32(struct.spaceidWidth);
      oprot.writeI32(struct.spaceidHeight);
      BitSet optionals = new BitSet();
      if (struct.isSetData()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetData()) {
        struct.data.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SpaceidConfig struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.spaceId = iprot.readI32();
      struct.setSpaceIdIsSet(true);
      struct.type = com.ocean.rtb.persist.bean.thrift.common.RtbSpaceType.findByValue(iprot.readI32());
      struct.setTypeIsSet(true);
      struct.spaceidWidth = iprot.readI32();
      struct.setSpaceidWidthIsSet(true);
      struct.spaceidHeight = iprot.readI32();
      struct.setSpaceidHeightIsSet(true);
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.data = new SpaceidConfigData();
        struct.data.read(iprot);
        struct.setDataIsSet(true);
      }
    }
  }

}

