/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ocean.rtb.persist.bean.thrift.common;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2019-3-22")
public class AdInfo implements org.apache.thrift.TBase<AdInfo, AdInfo._Fields>, java.io.Serializable, Cloneable, Comparable<AdInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AdInfo");

  private static final org.apache.thrift.protocol.TField AD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("adId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField PRO_TIME_DETAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("proTimeDetail", org.apache.thrift.protocol.TType.MAP, (short)3);
  private static final org.apache.thrift.protocol.TField WEIGHT_FIELD_DESC = new org.apache.thrift.protocol.TField("weight", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField LIMIT_CONDITION_FIELD_DESC = new org.apache.thrift.protocol.TField("limitCondition", org.apache.thrift.protocol.TType.MAP, (short)5);
  private static final org.apache.thrift.protocol.TField COPYWRITING_FIELD_DESC = new org.apache.thrift.protocol.TField("copywriting", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("title", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField INTERACTIVE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("interactive_type", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField LINKURL_FIELD_DESC = new org.apache.thrift.protocol.TField("linkurl", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField THIRD_REPORT_LINKS_FIELD_DESC = new org.apache.thrift.protocol.TField("thirdReportLinks", org.apache.thrift.protocol.TType.MAP, (short)10);
  private static final org.apache.thrift.protocol.TField LOGO_IMG_FIELD_DESC = new org.apache.thrift.protocol.TField("logoImg", org.apache.thrift.protocol.TType.STRUCT, (short)11);
  private static final org.apache.thrift.protocol.TField AD_VID_FIELD_DESC = new org.apache.thrift.protocol.TField("adVid", org.apache.thrift.protocol.TType.STRUCT, (short)12);
  private static final org.apache.thrift.protocol.TField AD_APP_FIELD_DESC = new org.apache.thrift.protocol.TField("adApp", org.apache.thrift.protocol.TType.STRUCT, (short)13);
  private static final org.apache.thrift.protocol.TField IS_HTML_AD_FIELD_DESC = new org.apache.thrift.protocol.TField("isHtmlAd", org.apache.thrift.protocol.TType.BOOL, (short)14);
  private static final org.apache.thrift.protocol.TField IMGS_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("imgsList", org.apache.thrift.protocol.TType.LIST, (short)15);
  private static final org.apache.thrift.protocol.TField HTML_SNIPPET_FIELD_DESC = new org.apache.thrift.protocol.TField("htmlSnippet", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField PRICE_UCODE_FIELD_DESC = new org.apache.thrift.protocol.TField("priceUCode", org.apache.thrift.protocol.TType.STRING, (short)17);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new AdInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new AdInfoTupleSchemeFactory());
  }

  public long adId; // required
  public Map<String,List<ProDateTime>> proTimeDetail; // required
  public int weight; // optional
  public Map<Integer,LimitCondition> limitCondition; // optional
  public String copywriting; // optional
  public String title; // required
  public int interactive_type; // required
  public String linkurl; // optional
  public Map<String,List<String>> thirdReportLinks; // optional
  public AdImg logoImg; // optional
  public AdVid adVid; // optional
  public AdApp adApp; // optional
  public boolean isHtmlAd; // optional
  public List<AdImg> imgsList; // required
  public String htmlSnippet; // optional
  public String priceUCode; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    AD_ID((short)1, "adId"),
    PRO_TIME_DETAIL((short)3, "proTimeDetail"),
    WEIGHT((short)4, "weight"),
    LIMIT_CONDITION((short)5, "limitCondition"),
    COPYWRITING((short)6, "copywriting"),
    TITLE((short)7, "title"),
    INTERACTIVE_TYPE((short)8, "interactive_type"),
    LINKURL((short)9, "linkurl"),
    THIRD_REPORT_LINKS((short)10, "thirdReportLinks"),
    LOGO_IMG((short)11, "logoImg"),
    AD_VID((short)12, "adVid"),
    AD_APP((short)13, "adApp"),
    IS_HTML_AD((short)14, "isHtmlAd"),
    IMGS_LIST((short)15, "imgsList"),
    HTML_SNIPPET((short)16, "htmlSnippet"),
    PRICE_UCODE((short)17, "priceUCode");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // AD_ID
          return AD_ID;
        case 3: // PRO_TIME_DETAIL
          return PRO_TIME_DETAIL;
        case 4: // WEIGHT
          return WEIGHT;
        case 5: // LIMIT_CONDITION
          return LIMIT_CONDITION;
        case 6: // COPYWRITING
          return COPYWRITING;
        case 7: // TITLE
          return TITLE;
        case 8: // INTERACTIVE_TYPE
          return INTERACTIVE_TYPE;
        case 9: // LINKURL
          return LINKURL;
        case 10: // THIRD_REPORT_LINKS
          return THIRD_REPORT_LINKS;
        case 11: // LOGO_IMG
          return LOGO_IMG;
        case 12: // AD_VID
          return AD_VID;
        case 13: // AD_APP
          return AD_APP;
        case 14: // IS_HTML_AD
          return IS_HTML_AD;
        case 15: // IMGS_LIST
          return IMGS_LIST;
        case 16: // HTML_SNIPPET
          return HTML_SNIPPET;
        case 17: // PRICE_UCODE
          return PRICE_UCODE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ADID_ISSET_ID = 0;
  private static final int __WEIGHT_ISSET_ID = 1;
  private static final int __INTERACTIVE_TYPE_ISSET_ID = 2;
  private static final int __ISHTMLAD_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.WEIGHT,_Fields.LIMIT_CONDITION,_Fields.COPYWRITING,_Fields.LINKURL,_Fields.THIRD_REPORT_LINKS,_Fields.LOGO_IMG,_Fields.AD_VID,_Fields.AD_APP,_Fields.IS_HTML_AD,_Fields.HTML_SNIPPET,_Fields.PRICE_UCODE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.AD_ID, new org.apache.thrift.meta_data.FieldMetaData("adId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PRO_TIME_DETAIL, new org.apache.thrift.meta_data.FieldMetaData("proTimeDetail", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT                , "ProDateTime")))));
    tmpMap.put(_Fields.WEIGHT, new org.apache.thrift.meta_data.FieldMetaData("weight", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LIMIT_CONDITION, new org.apache.thrift.meta_data.FieldMetaData("limitCondition", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LimitCondition.class))));
    tmpMap.put(_Fields.COPYWRITING, new org.apache.thrift.meta_data.FieldMetaData("copywriting", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TITLE, new org.apache.thrift.meta_data.FieldMetaData("title", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INTERACTIVE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("interactive_type", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LINKURL, new org.apache.thrift.meta_data.FieldMetaData("linkurl", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.THIRD_REPORT_LINKS, new org.apache.thrift.meta_data.FieldMetaData("thirdReportLinks", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
    tmpMap.put(_Fields.LOGO_IMG, new org.apache.thrift.meta_data.FieldMetaData("logoImg", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AdImg.class)));
    tmpMap.put(_Fields.AD_VID, new org.apache.thrift.meta_data.FieldMetaData("adVid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AdVid.class)));
    tmpMap.put(_Fields.AD_APP, new org.apache.thrift.meta_data.FieldMetaData("adApp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AdApp.class)));
    tmpMap.put(_Fields.IS_HTML_AD, new org.apache.thrift.meta_data.FieldMetaData("isHtmlAd", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IMGS_LIST, new org.apache.thrift.meta_data.FieldMetaData("imgsList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AdImg.class))));
    tmpMap.put(_Fields.HTML_SNIPPET, new org.apache.thrift.meta_data.FieldMetaData("htmlSnippet", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRICE_UCODE, new org.apache.thrift.meta_data.FieldMetaData("priceUCode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AdInfo.class, metaDataMap);
  }

  public AdInfo() {
  }

  public AdInfo(
    long adId,
    Map<String,List<ProDateTime>> proTimeDetail,
    String title,
    int interactive_type,
    List<AdImg> imgsList)
  {
    this();
    this.adId = adId;
    setAdIdIsSet(true);
    this.proTimeDetail = proTimeDetail;
    this.title = title;
    this.interactive_type = interactive_type;
    setInteractive_typeIsSet(true);
    this.imgsList = imgsList;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AdInfo(AdInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.adId = other.adId;
    if (other.isSetProTimeDetail()) {
      Map<String,List<ProDateTime>> __this__proTimeDetail = new HashMap<String,List<ProDateTime>>(other.proTimeDetail.size());
      for (Map.Entry<String, List<ProDateTime>> other_element : other.proTimeDetail.entrySet()) {

        String other_element_key = other_element.getKey();
        List<ProDateTime> other_element_value = other_element.getValue();

        String __this__proTimeDetail_copy_key = other_element_key;

        List<ProDateTime> __this__proTimeDetail_copy_value = new ArrayList<ProDateTime>(other_element_value.size());
        for (ProDateTime other_element_value_element : other_element_value) {
          __this__proTimeDetail_copy_value.add(other_element_value_element);
        }

        __this__proTimeDetail.put(__this__proTimeDetail_copy_key, __this__proTimeDetail_copy_value);
      }
      this.proTimeDetail = __this__proTimeDetail;
    }
    this.weight = other.weight;
    if (other.isSetLimitCondition()) {
      Map<Integer,LimitCondition> __this__limitCondition = new HashMap<Integer,LimitCondition>(other.limitCondition.size());
      for (Map.Entry<Integer, LimitCondition> other_element : other.limitCondition.entrySet()) {

        Integer other_element_key = other_element.getKey();
        LimitCondition other_element_value = other_element.getValue();

        Integer __this__limitCondition_copy_key = other_element_key;

        LimitCondition __this__limitCondition_copy_value = new LimitCondition(other_element_value);

        __this__limitCondition.put(__this__limitCondition_copy_key, __this__limitCondition_copy_value);
      }
      this.limitCondition = __this__limitCondition;
    }
    if (other.isSetCopywriting()) {
      this.copywriting = other.copywriting;
    }
    if (other.isSetTitle()) {
      this.title = other.title;
    }
    this.interactive_type = other.interactive_type;
    if (other.isSetLinkurl()) {
      this.linkurl = other.linkurl;
    }
    if (other.isSetThirdReportLinks()) {
      Map<String,List<String>> __this__thirdReportLinks = new HashMap<String,List<String>>(other.thirdReportLinks.size());
      for (Map.Entry<String, List<String>> other_element : other.thirdReportLinks.entrySet()) {

        String other_element_key = other_element.getKey();
        List<String> other_element_value = other_element.getValue();

        String __this__thirdReportLinks_copy_key = other_element_key;

        List<String> __this__thirdReportLinks_copy_value = new ArrayList<String>(other_element_value);

        __this__thirdReportLinks.put(__this__thirdReportLinks_copy_key, __this__thirdReportLinks_copy_value);
      }
      this.thirdReportLinks = __this__thirdReportLinks;
    }
    if (other.isSetLogoImg()) {
      this.logoImg = new AdImg(other.logoImg);
    }
    if (other.isSetAdVid()) {
      this.adVid = new AdVid(other.adVid);
    }
    if (other.isSetAdApp()) {
      this.adApp = new AdApp(other.adApp);
    }
    this.isHtmlAd = other.isHtmlAd;
    if (other.isSetImgsList()) {
      List<AdImg> __this__imgsList = new ArrayList<AdImg>(other.imgsList.size());
      for (AdImg other_element : other.imgsList) {
        __this__imgsList.add(new AdImg(other_element));
      }
      this.imgsList = __this__imgsList;
    }
    if (other.isSetHtmlSnippet()) {
      this.htmlSnippet = other.htmlSnippet;
    }
    if (other.isSetPriceUCode()) {
      this.priceUCode = other.priceUCode;
    }
  }

  public AdInfo deepCopy() {
    return new AdInfo(this);
  }

  @Override
  public void clear() {
    setAdIdIsSet(false);
    this.adId = 0;
    this.proTimeDetail = null;
    setWeightIsSet(false);
    this.weight = 0;
    this.limitCondition = null;
    this.copywriting = null;
    this.title = null;
    setInteractive_typeIsSet(false);
    this.interactive_type = 0;
    this.linkurl = null;
    this.thirdReportLinks = null;
    this.logoImg = null;
    this.adVid = null;
    this.adApp = null;
    setIsHtmlAdIsSet(false);
    this.isHtmlAd = false;
    this.imgsList = null;
    this.htmlSnippet = null;
    this.priceUCode = null;
  }

  public long getAdId() {
    return this.adId;
  }

  public AdInfo setAdId(long adId) {
    this.adId = adId;
    setAdIdIsSet(true);
    return this;
  }

  public void unsetAdId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ADID_ISSET_ID);
  }

  /** Returns true if field adId is set (has been assigned a value) and false otherwise */
  public boolean isSetAdId() {
    return EncodingUtils.testBit(__isset_bitfield, __ADID_ISSET_ID);
  }

  public void setAdIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ADID_ISSET_ID, value);
  }

  public int getProTimeDetailSize() {
    return (this.proTimeDetail == null) ? 0 : this.proTimeDetail.size();
  }

  public void putToProTimeDetail(String key, List<ProDateTime> val) {
    if (this.proTimeDetail == null) {
      this.proTimeDetail = new HashMap<String,List<ProDateTime>>();
    }
    this.proTimeDetail.put(key, val);
  }

  public Map<String,List<ProDateTime>> getProTimeDetail() {
    return this.proTimeDetail;
  }

  public AdInfo setProTimeDetail(Map<String,List<ProDateTime>> proTimeDetail) {
    this.proTimeDetail = proTimeDetail;
    return this;
  }

  public void unsetProTimeDetail() {
    this.proTimeDetail = null;
  }

  /** Returns true if field proTimeDetail is set (has been assigned a value) and false otherwise */
  public boolean isSetProTimeDetail() {
    return this.proTimeDetail != null;
  }

  public void setProTimeDetailIsSet(boolean value) {
    if (!value) {
      this.proTimeDetail = null;
    }
  }

  public int getWeight() {
    return this.weight;
  }

  public AdInfo setWeight(int weight) {
    this.weight = weight;
    setWeightIsSet(true);
    return this;
  }

  public void unsetWeight() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WEIGHT_ISSET_ID);
  }

  /** Returns true if field weight is set (has been assigned a value) and false otherwise */
  public boolean isSetWeight() {
    return EncodingUtils.testBit(__isset_bitfield, __WEIGHT_ISSET_ID);
  }

  public void setWeightIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WEIGHT_ISSET_ID, value);
  }

  public int getLimitConditionSize() {
    return (this.limitCondition == null) ? 0 : this.limitCondition.size();
  }

  public void putToLimitCondition(int key, LimitCondition val) {
    if (this.limitCondition == null) {
      this.limitCondition = new HashMap<Integer,LimitCondition>();
    }
    this.limitCondition.put(key, val);
  }

  public Map<Integer,LimitCondition> getLimitCondition() {
    return this.limitCondition;
  }

  public AdInfo setLimitCondition(Map<Integer,LimitCondition> limitCondition) {
    this.limitCondition = limitCondition;
    return this;
  }

  public void unsetLimitCondition() {
    this.limitCondition = null;
  }

  /** Returns true if field limitCondition is set (has been assigned a value) and false otherwise */
  public boolean isSetLimitCondition() {
    return this.limitCondition != null;
  }

  public void setLimitConditionIsSet(boolean value) {
    if (!value) {
      this.limitCondition = null;
    }
  }

  public String getCopywriting() {
    return this.copywriting;
  }

  public AdInfo setCopywriting(String copywriting) {
    this.copywriting = copywriting;
    return this;
  }

  public void unsetCopywriting() {
    this.copywriting = null;
  }

  /** Returns true if field copywriting is set (has been assigned a value) and false otherwise */
  public boolean isSetCopywriting() {
    return this.copywriting != null;
  }

  public void setCopywritingIsSet(boolean value) {
    if (!value) {
      this.copywriting = null;
    }
  }

  public String getTitle() {
    return this.title;
  }

  public AdInfo setTitle(String title) {
    this.title = title;
    return this;
  }

  public void unsetTitle() {
    this.title = null;
  }

  /** Returns true if field title is set (has been assigned a value) and false otherwise */
  public boolean isSetTitle() {
    return this.title != null;
  }

  public void setTitleIsSet(boolean value) {
    if (!value) {
      this.title = null;
    }
  }

  public int getInteractive_type() {
    return this.interactive_type;
  }

  public AdInfo setInteractive_type(int interactive_type) {
    this.interactive_type = interactive_type;
    setInteractive_typeIsSet(true);
    return this;
  }

  public void unsetInteractive_type() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INTERACTIVE_TYPE_ISSET_ID);
  }

  /** Returns true if field interactive_type is set (has been assigned a value) and false otherwise */
  public boolean isSetInteractive_type() {
    return EncodingUtils.testBit(__isset_bitfield, __INTERACTIVE_TYPE_ISSET_ID);
  }

  public void setInteractive_typeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INTERACTIVE_TYPE_ISSET_ID, value);
  }

  public String getLinkurl() {
    return this.linkurl;
  }

  public AdInfo setLinkurl(String linkurl) {
    this.linkurl = linkurl;
    return this;
  }

  public void unsetLinkurl() {
    this.linkurl = null;
  }

  /** Returns true if field linkurl is set (has been assigned a value) and false otherwise */
  public boolean isSetLinkurl() {
    return this.linkurl != null;
  }

  public void setLinkurlIsSet(boolean value) {
    if (!value) {
      this.linkurl = null;
    }
  }

  public int getThirdReportLinksSize() {
    return (this.thirdReportLinks == null) ? 0 : this.thirdReportLinks.size();
  }

  public void putToThirdReportLinks(String key, List<String> val) {
    if (this.thirdReportLinks == null) {
      this.thirdReportLinks = new HashMap<String,List<String>>();
    }
    this.thirdReportLinks.put(key, val);
  }

  public Map<String,List<String>> getThirdReportLinks() {
    return this.thirdReportLinks;
  }

  public AdInfo setThirdReportLinks(Map<String,List<String>> thirdReportLinks) {
    this.thirdReportLinks = thirdReportLinks;
    return this;
  }

  public void unsetThirdReportLinks() {
    this.thirdReportLinks = null;
  }

  /** Returns true if field thirdReportLinks is set (has been assigned a value) and false otherwise */
  public boolean isSetThirdReportLinks() {
    return this.thirdReportLinks != null;
  }

  public void setThirdReportLinksIsSet(boolean value) {
    if (!value) {
      this.thirdReportLinks = null;
    }
  }

  public AdImg getLogoImg() {
    return this.logoImg;
  }

  public AdInfo setLogoImg(AdImg logoImg) {
    this.logoImg = logoImg;
    return this;
  }

  public void unsetLogoImg() {
    this.logoImg = null;
  }

  /** Returns true if field logoImg is set (has been assigned a value) and false otherwise */
  public boolean isSetLogoImg() {
    return this.logoImg != null;
  }

  public void setLogoImgIsSet(boolean value) {
    if (!value) {
      this.logoImg = null;
    }
  }

  public AdVid getAdVid() {
    return this.adVid;
  }

  public AdInfo setAdVid(AdVid adVid) {
    this.adVid = adVid;
    return this;
  }

  public void unsetAdVid() {
    this.adVid = null;
  }

  /** Returns true if field adVid is set (has been assigned a value) and false otherwise */
  public boolean isSetAdVid() {
    return this.adVid != null;
  }

  public void setAdVidIsSet(boolean value) {
    if (!value) {
      this.adVid = null;
    }
  }

  public AdApp getAdApp() {
    return this.adApp;
  }

  public AdInfo setAdApp(AdApp adApp) {
    this.adApp = adApp;
    return this;
  }

  public void unsetAdApp() {
    this.adApp = null;
  }

  /** Returns true if field adApp is set (has been assigned a value) and false otherwise */
  public boolean isSetAdApp() {
    return this.adApp != null;
  }

  public void setAdAppIsSet(boolean value) {
    if (!value) {
      this.adApp = null;
    }
  }

  public boolean isIsHtmlAd() {
    return this.isHtmlAd;
  }

  public AdInfo setIsHtmlAd(boolean isHtmlAd) {
    this.isHtmlAd = isHtmlAd;
    setIsHtmlAdIsSet(true);
    return this;
  }

  public void unsetIsHtmlAd() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISHTMLAD_ISSET_ID);
  }

  /** Returns true if field isHtmlAd is set (has been assigned a value) and false otherwise */
  public boolean isSetIsHtmlAd() {
    return EncodingUtils.testBit(__isset_bitfield, __ISHTMLAD_ISSET_ID);
  }

  public void setIsHtmlAdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISHTMLAD_ISSET_ID, value);
  }

  public int getImgsListSize() {
    return (this.imgsList == null) ? 0 : this.imgsList.size();
  }

  public java.util.Iterator<AdImg> getImgsListIterator() {
    return (this.imgsList == null) ? null : this.imgsList.iterator();
  }

  public void addToImgsList(AdImg elem) {
    if (this.imgsList == null) {
      this.imgsList = new ArrayList<AdImg>();
    }
    this.imgsList.add(elem);
  }

  public List<AdImg> getImgsList() {
    return this.imgsList;
  }

  public AdInfo setImgsList(List<AdImg> imgsList) {
    this.imgsList = imgsList;
    return this;
  }

  public void unsetImgsList() {
    this.imgsList = null;
  }

  /** Returns true if field imgsList is set (has been assigned a value) and false otherwise */
  public boolean isSetImgsList() {
    return this.imgsList != null;
  }

  public void setImgsListIsSet(boolean value) {
    if (!value) {
      this.imgsList = null;
    }
  }

  public String getHtmlSnippet() {
    return this.htmlSnippet;
  }

  public AdInfo setHtmlSnippet(String htmlSnippet) {
    this.htmlSnippet = htmlSnippet;
    return this;
  }

  public void unsetHtmlSnippet() {
    this.htmlSnippet = null;
  }

  /** Returns true if field htmlSnippet is set (has been assigned a value) and false otherwise */
  public boolean isSetHtmlSnippet() {
    return this.htmlSnippet != null;
  }

  public void setHtmlSnippetIsSet(boolean value) {
    if (!value) {
      this.htmlSnippet = null;
    }
  }

  public String getPriceUCode() {
    return this.priceUCode;
  }

  public AdInfo setPriceUCode(String priceUCode) {
    this.priceUCode = priceUCode;
    return this;
  }

  public void unsetPriceUCode() {
    this.priceUCode = null;
  }

  /** Returns true if field priceUCode is set (has been assigned a value) and false otherwise */
  public boolean isSetPriceUCode() {
    return this.priceUCode != null;
  }

  public void setPriceUCodeIsSet(boolean value) {
    if (!value) {
      this.priceUCode = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case AD_ID:
      if (value == null) {
        unsetAdId();
      } else {
        setAdId((Long)value);
      }
      break;

    case PRO_TIME_DETAIL:
      if (value == null) {
        unsetProTimeDetail();
      } else {
        setProTimeDetail((Map<String,List<ProDateTime>>)value);
      }
      break;

    case WEIGHT:
      if (value == null) {
        unsetWeight();
      } else {
        setWeight((Integer)value);
      }
      break;

    case LIMIT_CONDITION:
      if (value == null) {
        unsetLimitCondition();
      } else {
        setLimitCondition((Map<Integer,LimitCondition>)value);
      }
      break;

    case COPYWRITING:
      if (value == null) {
        unsetCopywriting();
      } else {
        setCopywriting((String)value);
      }
      break;

    case TITLE:
      if (value == null) {
        unsetTitle();
      } else {
        setTitle((String)value);
      }
      break;

    case INTERACTIVE_TYPE:
      if (value == null) {
        unsetInteractive_type();
      } else {
        setInteractive_type((Integer)value);
      }
      break;

    case LINKURL:
      if (value == null) {
        unsetLinkurl();
      } else {
        setLinkurl((String)value);
      }
      break;

    case THIRD_REPORT_LINKS:
      if (value == null) {
        unsetThirdReportLinks();
      } else {
        setThirdReportLinks((Map<String,List<String>>)value);
      }
      break;

    case LOGO_IMG:
      if (value == null) {
        unsetLogoImg();
      } else {
        setLogoImg((AdImg)value);
      }
      break;

    case AD_VID:
      if (value == null) {
        unsetAdVid();
      } else {
        setAdVid((AdVid)value);
      }
      break;

    case AD_APP:
      if (value == null) {
        unsetAdApp();
      } else {
        setAdApp((AdApp)value);
      }
      break;

    case IS_HTML_AD:
      if (value == null) {
        unsetIsHtmlAd();
      } else {
        setIsHtmlAd((Boolean)value);
      }
      break;

    case IMGS_LIST:
      if (value == null) {
        unsetImgsList();
      } else {
        setImgsList((List<AdImg>)value);
      }
      break;

    case HTML_SNIPPET:
      if (value == null) {
        unsetHtmlSnippet();
      } else {
        setHtmlSnippet((String)value);
      }
      break;

    case PRICE_UCODE:
      if (value == null) {
        unsetPriceUCode();
      } else {
        setPriceUCode((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case AD_ID:
      return Long.valueOf(getAdId());

    case PRO_TIME_DETAIL:
      return getProTimeDetail();

    case WEIGHT:
      return Integer.valueOf(getWeight());

    case LIMIT_CONDITION:
      return getLimitCondition();

    case COPYWRITING:
      return getCopywriting();

    case TITLE:
      return getTitle();

    case INTERACTIVE_TYPE:
      return Integer.valueOf(getInteractive_type());

    case LINKURL:
      return getLinkurl();

    case THIRD_REPORT_LINKS:
      return getThirdReportLinks();

    case LOGO_IMG:
      return getLogoImg();

    case AD_VID:
      return getAdVid();

    case AD_APP:
      return getAdApp();

    case IS_HTML_AD:
      return Boolean.valueOf(isIsHtmlAd());

    case IMGS_LIST:
      return getImgsList();

    case HTML_SNIPPET:
      return getHtmlSnippet();

    case PRICE_UCODE:
      return getPriceUCode();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case AD_ID:
      return isSetAdId();
    case PRO_TIME_DETAIL:
      return isSetProTimeDetail();
    case WEIGHT:
      return isSetWeight();
    case LIMIT_CONDITION:
      return isSetLimitCondition();
    case COPYWRITING:
      return isSetCopywriting();
    case TITLE:
      return isSetTitle();
    case INTERACTIVE_TYPE:
      return isSetInteractive_type();
    case LINKURL:
      return isSetLinkurl();
    case THIRD_REPORT_LINKS:
      return isSetThirdReportLinks();
    case LOGO_IMG:
      return isSetLogoImg();
    case AD_VID:
      return isSetAdVid();
    case AD_APP:
      return isSetAdApp();
    case IS_HTML_AD:
      return isSetIsHtmlAd();
    case IMGS_LIST:
      return isSetImgsList();
    case HTML_SNIPPET:
      return isSetHtmlSnippet();
    case PRICE_UCODE:
      return isSetPriceUCode();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof AdInfo)
      return this.equals((AdInfo)that);
    return false;
  }

  public boolean equals(AdInfo that) {
    if (that == null)
      return false;

    boolean this_present_adId = true;
    boolean that_present_adId = true;
    if (this_present_adId || that_present_adId) {
      if (!(this_present_adId && that_present_adId))
        return false;
      if (this.adId != that.adId)
        return false;
    }

    boolean this_present_proTimeDetail = true && this.isSetProTimeDetail();
    boolean that_present_proTimeDetail = true && that.isSetProTimeDetail();
    if (this_present_proTimeDetail || that_present_proTimeDetail) {
      if (!(this_present_proTimeDetail && that_present_proTimeDetail))
        return false;
      if (!this.proTimeDetail.equals(that.proTimeDetail))
        return false;
    }

    boolean this_present_weight = true && this.isSetWeight();
    boolean that_present_weight = true && that.isSetWeight();
    if (this_present_weight || that_present_weight) {
      if (!(this_present_weight && that_present_weight))
        return false;
      if (this.weight != that.weight)
        return false;
    }

    boolean this_present_limitCondition = true && this.isSetLimitCondition();
    boolean that_present_limitCondition = true && that.isSetLimitCondition();
    if (this_present_limitCondition || that_present_limitCondition) {
      if (!(this_present_limitCondition && that_present_limitCondition))
        return false;
      if (!this.limitCondition.equals(that.limitCondition))
        return false;
    }

    boolean this_present_copywriting = true && this.isSetCopywriting();
    boolean that_present_copywriting = true && that.isSetCopywriting();
    if (this_present_copywriting || that_present_copywriting) {
      if (!(this_present_copywriting && that_present_copywriting))
        return false;
      if (!this.copywriting.equals(that.copywriting))
        return false;
    }

    boolean this_present_title = true && this.isSetTitle();
    boolean that_present_title = true && that.isSetTitle();
    if (this_present_title || that_present_title) {
      if (!(this_present_title && that_present_title))
        return false;
      if (!this.title.equals(that.title))
        return false;
    }

    boolean this_present_interactive_type = true;
    boolean that_present_interactive_type = true;
    if (this_present_interactive_type || that_present_interactive_type) {
      if (!(this_present_interactive_type && that_present_interactive_type))
        return false;
      if (this.interactive_type != that.interactive_type)
        return false;
    }

    boolean this_present_linkurl = true && this.isSetLinkurl();
    boolean that_present_linkurl = true && that.isSetLinkurl();
    if (this_present_linkurl || that_present_linkurl) {
      if (!(this_present_linkurl && that_present_linkurl))
        return false;
      if (!this.linkurl.equals(that.linkurl))
        return false;
    }

    boolean this_present_thirdReportLinks = true && this.isSetThirdReportLinks();
    boolean that_present_thirdReportLinks = true && that.isSetThirdReportLinks();
    if (this_present_thirdReportLinks || that_present_thirdReportLinks) {
      if (!(this_present_thirdReportLinks && that_present_thirdReportLinks))
        return false;
      if (!this.thirdReportLinks.equals(that.thirdReportLinks))
        return false;
    }

    boolean this_present_logoImg = true && this.isSetLogoImg();
    boolean that_present_logoImg = true && that.isSetLogoImg();
    if (this_present_logoImg || that_present_logoImg) {
      if (!(this_present_logoImg && that_present_logoImg))
        return false;
      if (!this.logoImg.equals(that.logoImg))
        return false;
    }

    boolean this_present_adVid = true && this.isSetAdVid();
    boolean that_present_adVid = true && that.isSetAdVid();
    if (this_present_adVid || that_present_adVid) {
      if (!(this_present_adVid && that_present_adVid))
        return false;
      if (!this.adVid.equals(that.adVid))
        return false;
    }

    boolean this_present_adApp = true && this.isSetAdApp();
    boolean that_present_adApp = true && that.isSetAdApp();
    if (this_present_adApp || that_present_adApp) {
      if (!(this_present_adApp && that_present_adApp))
        return false;
      if (!this.adApp.equals(that.adApp))
        return false;
    }

    boolean this_present_isHtmlAd = true && this.isSetIsHtmlAd();
    boolean that_present_isHtmlAd = true && that.isSetIsHtmlAd();
    if (this_present_isHtmlAd || that_present_isHtmlAd) {
      if (!(this_present_isHtmlAd && that_present_isHtmlAd))
        return false;
      if (this.isHtmlAd != that.isHtmlAd)
        return false;
    }

    boolean this_present_imgsList = true && this.isSetImgsList();
    boolean that_present_imgsList = true && that.isSetImgsList();
    if (this_present_imgsList || that_present_imgsList) {
      if (!(this_present_imgsList && that_present_imgsList))
        return false;
      if (!this.imgsList.equals(that.imgsList))
        return false;
    }

    boolean this_present_htmlSnippet = true && this.isSetHtmlSnippet();
    boolean that_present_htmlSnippet = true && that.isSetHtmlSnippet();
    if (this_present_htmlSnippet || that_present_htmlSnippet) {
      if (!(this_present_htmlSnippet && that_present_htmlSnippet))
        return false;
      if (!this.htmlSnippet.equals(that.htmlSnippet))
        return false;
    }

    boolean this_present_priceUCode = true && this.isSetPriceUCode();
    boolean that_present_priceUCode = true && that.isSetPriceUCode();
    if (this_present_priceUCode || that_present_priceUCode) {
      if (!(this_present_priceUCode && that_present_priceUCode))
        return false;
      if (!this.priceUCode.equals(that.priceUCode))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_adId = true;
    list.add(present_adId);
    if (present_adId)
      list.add(adId);

    boolean present_proTimeDetail = true && (isSetProTimeDetail());
    list.add(present_proTimeDetail);
    if (present_proTimeDetail)
      list.add(proTimeDetail);

    boolean present_weight = true && (isSetWeight());
    list.add(present_weight);
    if (present_weight)
      list.add(weight);

    boolean present_limitCondition = true && (isSetLimitCondition());
    list.add(present_limitCondition);
    if (present_limitCondition)
      list.add(limitCondition);

    boolean present_copywriting = true && (isSetCopywriting());
    list.add(present_copywriting);
    if (present_copywriting)
      list.add(copywriting);

    boolean present_title = true && (isSetTitle());
    list.add(present_title);
    if (present_title)
      list.add(title);

    boolean present_interactive_type = true;
    list.add(present_interactive_type);
    if (present_interactive_type)
      list.add(interactive_type);

    boolean present_linkurl = true && (isSetLinkurl());
    list.add(present_linkurl);
    if (present_linkurl)
      list.add(linkurl);

    boolean present_thirdReportLinks = true && (isSetThirdReportLinks());
    list.add(present_thirdReportLinks);
    if (present_thirdReportLinks)
      list.add(thirdReportLinks);

    boolean present_logoImg = true && (isSetLogoImg());
    list.add(present_logoImg);
    if (present_logoImg)
      list.add(logoImg);

    boolean present_adVid = true && (isSetAdVid());
    list.add(present_adVid);
    if (present_adVid)
      list.add(adVid);

    boolean present_adApp = true && (isSetAdApp());
    list.add(present_adApp);
    if (present_adApp)
      list.add(adApp);

    boolean present_isHtmlAd = true && (isSetIsHtmlAd());
    list.add(present_isHtmlAd);
    if (present_isHtmlAd)
      list.add(isHtmlAd);

    boolean present_imgsList = true && (isSetImgsList());
    list.add(present_imgsList);
    if (present_imgsList)
      list.add(imgsList);

    boolean present_htmlSnippet = true && (isSetHtmlSnippet());
    list.add(present_htmlSnippet);
    if (present_htmlSnippet)
      list.add(htmlSnippet);

    boolean present_priceUCode = true && (isSetPriceUCode());
    list.add(present_priceUCode);
    if (present_priceUCode)
      list.add(priceUCode);

    return list.hashCode();
  }

  @Override
  public int compareTo(AdInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetAdId()).compareTo(other.isSetAdId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAdId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.adId, other.adId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProTimeDetail()).compareTo(other.isSetProTimeDetail());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProTimeDetail()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.proTimeDetail, other.proTimeDetail);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWeight()).compareTo(other.isSetWeight());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWeight()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.weight, other.weight);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLimitCondition()).compareTo(other.isSetLimitCondition());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLimitCondition()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.limitCondition, other.limitCondition);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCopywriting()).compareTo(other.isSetCopywriting());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCopywriting()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.copywriting, other.copywriting);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTitle()).compareTo(other.isSetTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.title, other.title);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInteractive_type()).compareTo(other.isSetInteractive_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInteractive_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.interactive_type, other.interactive_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLinkurl()).compareTo(other.isSetLinkurl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLinkurl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.linkurl, other.linkurl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetThirdReportLinks()).compareTo(other.isSetThirdReportLinks());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetThirdReportLinks()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.thirdReportLinks, other.thirdReportLinks);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLogoImg()).compareTo(other.isSetLogoImg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLogoImg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.logoImg, other.logoImg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAdVid()).compareTo(other.isSetAdVid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAdVid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.adVid, other.adVid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAdApp()).compareTo(other.isSetAdApp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAdApp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.adApp, other.adApp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsHtmlAd()).compareTo(other.isSetIsHtmlAd());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsHtmlAd()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isHtmlAd, other.isHtmlAd);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetImgsList()).compareTo(other.isSetImgsList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImgsList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.imgsList, other.imgsList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHtmlSnippet()).compareTo(other.isSetHtmlSnippet());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHtmlSnippet()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.htmlSnippet, other.htmlSnippet);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPriceUCode()).compareTo(other.isSetPriceUCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPriceUCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.priceUCode, other.priceUCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("AdInfo(");
    boolean first = true;

    sb.append("adId:");
    sb.append(this.adId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("proTimeDetail:");
    if (this.proTimeDetail == null) {
      sb.append("null");
    } else {
      sb.append(this.proTimeDetail);
    }
    first = false;
    if (isSetWeight()) {
      if (!first) sb.append(", ");
      sb.append("weight:");
      sb.append(this.weight);
      first = false;
    }
    if (isSetLimitCondition()) {
      if (!first) sb.append(", ");
      sb.append("limitCondition:");
      if (this.limitCondition == null) {
        sb.append("null");
      } else {
        sb.append(this.limitCondition);
      }
      first = false;
    }
    if (isSetCopywriting()) {
      if (!first) sb.append(", ");
      sb.append("copywriting:");
      if (this.copywriting == null) {
        sb.append("null");
      } else {
        sb.append(this.copywriting);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("title:");
    if (this.title == null) {
      sb.append("null");
    } else {
      sb.append(this.title);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("interactive_type:");
    sb.append(this.interactive_type);
    first = false;
    if (isSetLinkurl()) {
      if (!first) sb.append(", ");
      sb.append("linkurl:");
      if (this.linkurl == null) {
        sb.append("null");
      } else {
        sb.append(this.linkurl);
      }
      first = false;
    }
    if (isSetThirdReportLinks()) {
      if (!first) sb.append(", ");
      sb.append("thirdReportLinks:");
      if (this.thirdReportLinks == null) {
        sb.append("null");
      } else {
        sb.append(this.thirdReportLinks);
      }
      first = false;
    }
    if (isSetLogoImg()) {
      if (!first) sb.append(", ");
      sb.append("logoImg:");
      if (this.logoImg == null) {
        sb.append("null");
      } else {
        sb.append(this.logoImg);
      }
      first = false;
    }
    if (isSetAdVid()) {
      if (!first) sb.append(", ");
      sb.append("adVid:");
      if (this.adVid == null) {
        sb.append("null");
      } else {
        sb.append(this.adVid);
      }
      first = false;
    }
    if (isSetAdApp()) {
      if (!first) sb.append(", ");
      sb.append("adApp:");
      if (this.adApp == null) {
        sb.append("null");
      } else {
        sb.append(this.adApp);
      }
      first = false;
    }
    if (isSetIsHtmlAd()) {
      if (!first) sb.append(", ");
      sb.append("isHtmlAd:");
      sb.append(this.isHtmlAd);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("imgsList:");
    if (this.imgsList == null) {
      sb.append("null");
    } else {
      sb.append(this.imgsList);
    }
    first = false;
    if (isSetHtmlSnippet()) {
      if (!first) sb.append(", ");
      sb.append("htmlSnippet:");
      if (this.htmlSnippet == null) {
        sb.append("null");
      } else {
        sb.append(this.htmlSnippet);
      }
      first = false;
    }
    if (isSetPriceUCode()) {
      if (!first) sb.append(", ");
      sb.append("priceUCode:");
      if (this.priceUCode == null) {
        sb.append("null");
      } else {
        sb.append(this.priceUCode);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'adId' because it's a primitive and you chose the non-beans generator.
    if (proTimeDetail == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'proTimeDetail' was not present! Struct: " + toString());
    }
    if (title == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'title' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'interactive_type' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
    if (logoImg != null) {
      logoImg.validate();
    }
    if (adVid != null) {
      adVid.validate();
    }
    if (adApp != null) {
      adApp.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AdInfoStandardSchemeFactory implements SchemeFactory {
    public AdInfoStandardScheme getScheme() {
      return new AdInfoStandardScheme();
    }
  }

  private static class AdInfoStandardScheme extends StandardScheme<AdInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, AdInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // AD_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.adId = iprot.readI64();
              struct.setAdIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PRO_TIME_DETAIL
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map24 = iprot.readMapBegin();
                struct.proTimeDetail = new HashMap<String,List<ProDateTime>>(2*_map24.size);
                String _key25;
                List<ProDateTime> _val26;
                for (int _i27 = 0; _i27 < _map24.size; ++_i27)
                {
                  _key25 = iprot.readString();
                  {
                    org.apache.thrift.protocol.TList _list28 = iprot.readListBegin();
                    _val26 = new ArrayList<ProDateTime>(_list28.size);
                    ProDateTime _elem29;
                    for (int _i30 = 0; _i30 < _list28.size; ++_i30)
                    {
                      _elem29 = new ProDateTime();
                      _elem29.read(iprot);
                      _val26.add(_elem29);
                    }
                    iprot.readListEnd();
                  }
                  struct.proTimeDetail.put(_key25, _val26);
                }
                iprot.readMapEnd();
              }
              struct.setProTimeDetailIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // WEIGHT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.weight = iprot.readI32();
              struct.setWeightIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // LIMIT_CONDITION
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map31 = iprot.readMapBegin();
                struct.limitCondition = new HashMap<Integer,LimitCondition>(2*_map31.size);
                int _key32;
                LimitCondition _val33;
                for (int _i34 = 0; _i34 < _map31.size; ++_i34)
                {
                  _key32 = iprot.readI32();
                  _val33 = new LimitCondition();
                  _val33.read(iprot);
                  struct.limitCondition.put(_key32, _val33);
                }
                iprot.readMapEnd();
              }
              struct.setLimitConditionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // COPYWRITING
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.copywriting = iprot.readString();
              struct.setCopywritingIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.title = iprot.readString();
              struct.setTitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // INTERACTIVE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.interactive_type = iprot.readI32();
              struct.setInteractive_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // LINKURL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.linkurl = iprot.readString();
              struct.setLinkurlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // THIRD_REPORT_LINKS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map35 = iprot.readMapBegin();
                struct.thirdReportLinks = new HashMap<String,List<String>>(2*_map35.size);
                String _key36;
                List<String> _val37;
                for (int _i38 = 0; _i38 < _map35.size; ++_i38)
                {
                  _key36 = iprot.readString();
                  {
                    org.apache.thrift.protocol.TList _list39 = iprot.readListBegin();
                    _val37 = new ArrayList<String>(_list39.size);
                    String _elem40;
                    for (int _i41 = 0; _i41 < _list39.size; ++_i41)
                    {
                      _elem40 = iprot.readString();
                      _val37.add(_elem40);
                    }
                    iprot.readListEnd();
                  }
                  struct.thirdReportLinks.put(_key36, _val37);
                }
                iprot.readMapEnd();
              }
              struct.setThirdReportLinksIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // LOGO_IMG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.logoImg = new AdImg();
              struct.logoImg.read(iprot);
              struct.setLogoImgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // AD_VID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.adVid = new AdVid();
              struct.adVid.read(iprot);
              struct.setAdVidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // AD_APP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.adApp = new AdApp();
              struct.adApp.read(iprot);
              struct.setAdAppIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // IS_HTML_AD
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isHtmlAd = iprot.readBool();
              struct.setIsHtmlAdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // IMGS_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list42 = iprot.readListBegin();
                struct.imgsList = new ArrayList<AdImg>(_list42.size);
                AdImg _elem43;
                for (int _i44 = 0; _i44 < _list42.size; ++_i44)
                {
                  _elem43 = new AdImg();
                  _elem43.read(iprot);
                  struct.imgsList.add(_elem43);
                }
                iprot.readListEnd();
              }
              struct.setImgsListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // HTML_SNIPPET
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.htmlSnippet = iprot.readString();
              struct.setHtmlSnippetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // PRICE_UCODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.priceUCode = iprot.readString();
              struct.setPriceUCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetAdId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'adId' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetInteractive_type()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'interactive_type' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, AdInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(AD_ID_FIELD_DESC);
      oprot.writeI64(struct.adId);
      oprot.writeFieldEnd();
      if (struct.proTimeDetail != null) {
        oprot.writeFieldBegin(PRO_TIME_DETAIL_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, struct.proTimeDetail.size()));
          for (Map.Entry<String, List<ProDateTime>> _iter45 : struct.proTimeDetail.entrySet())
          {
            oprot.writeString(_iter45.getKey());
            {
              oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, _iter45.getValue().size()));
              for (ProDateTime _iter46 : _iter45.getValue())
              {
                _iter46.write(oprot);
              }
              oprot.writeListEnd();
            }
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.isSetWeight()) {
        oprot.writeFieldBegin(WEIGHT_FIELD_DESC);
        oprot.writeI32(struct.weight);
        oprot.writeFieldEnd();
      }
      if (struct.limitCondition != null) {
        if (struct.isSetLimitCondition()) {
          oprot.writeFieldBegin(LIMIT_CONDITION_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRUCT, struct.limitCondition.size()));
            for (Map.Entry<Integer, LimitCondition> _iter47 : struct.limitCondition.entrySet())
            {
              oprot.writeI32(_iter47.getKey());
              _iter47.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.copywriting != null) {
        if (struct.isSetCopywriting()) {
          oprot.writeFieldBegin(COPYWRITING_FIELD_DESC);
          oprot.writeString(struct.copywriting);
          oprot.writeFieldEnd();
        }
      }
      if (struct.title != null) {
        oprot.writeFieldBegin(TITLE_FIELD_DESC);
        oprot.writeString(struct.title);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(INTERACTIVE_TYPE_FIELD_DESC);
      oprot.writeI32(struct.interactive_type);
      oprot.writeFieldEnd();
      if (struct.linkurl != null) {
        if (struct.isSetLinkurl()) {
          oprot.writeFieldBegin(LINKURL_FIELD_DESC);
          oprot.writeString(struct.linkurl);
          oprot.writeFieldEnd();
        }
      }
      if (struct.thirdReportLinks != null) {
        if (struct.isSetThirdReportLinks()) {
          oprot.writeFieldBegin(THIRD_REPORT_LINKS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, struct.thirdReportLinks.size()));
            for (Map.Entry<String, List<String>> _iter48 : struct.thirdReportLinks.entrySet())
            {
              oprot.writeString(_iter48.getKey());
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, _iter48.getValue().size()));
                for (String _iter49 : _iter48.getValue())
                {
                  oprot.writeString(_iter49);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.logoImg != null) {
        if (struct.isSetLogoImg()) {
          oprot.writeFieldBegin(LOGO_IMG_FIELD_DESC);
          struct.logoImg.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.adVid != null) {
        if (struct.isSetAdVid()) {
          oprot.writeFieldBegin(AD_VID_FIELD_DESC);
          struct.adVid.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.adApp != null) {
        if (struct.isSetAdApp()) {
          oprot.writeFieldBegin(AD_APP_FIELD_DESC);
          struct.adApp.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIsHtmlAd()) {
        oprot.writeFieldBegin(IS_HTML_AD_FIELD_DESC);
        oprot.writeBool(struct.isHtmlAd);
        oprot.writeFieldEnd();
      }
      if (struct.imgsList != null) {
        oprot.writeFieldBegin(IMGS_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.imgsList.size()));
          for (AdImg _iter50 : struct.imgsList)
          {
            _iter50.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.htmlSnippet != null) {
        if (struct.isSetHtmlSnippet()) {
          oprot.writeFieldBegin(HTML_SNIPPET_FIELD_DESC);
          oprot.writeString(struct.htmlSnippet);
          oprot.writeFieldEnd();
        }
      }
      if (struct.priceUCode != null) {
        if (struct.isSetPriceUCode()) {
          oprot.writeFieldBegin(PRICE_UCODE_FIELD_DESC);
          oprot.writeString(struct.priceUCode);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AdInfoTupleSchemeFactory implements SchemeFactory {
    public AdInfoTupleScheme getScheme() {
      return new AdInfoTupleScheme();
    }
  }

  private static class AdInfoTupleScheme extends TupleScheme<AdInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, AdInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI64(struct.adId);
      {
        oprot.writeI32(struct.proTimeDetail.size());
        for (Map.Entry<String, List<ProDateTime>> _iter51 : struct.proTimeDetail.entrySet())
        {
          oprot.writeString(_iter51.getKey());
          {
            oprot.writeI32(_iter51.getValue().size());
            for (ProDateTime _iter52 : _iter51.getValue())
            {
              _iter52.write(oprot);
            }
          }
        }
      }
      oprot.writeString(struct.title);
      oprot.writeI32(struct.interactive_type);
      BitSet optionals = new BitSet();
      if (struct.isSetWeight()) {
        optionals.set(0);
      }
      if (struct.isSetLimitCondition()) {
        optionals.set(1);
      }
      if (struct.isSetCopywriting()) {
        optionals.set(2);
      }
      if (struct.isSetLinkurl()) {
        optionals.set(3);
      }
      if (struct.isSetThirdReportLinks()) {
        optionals.set(4);
      }
      if (struct.isSetLogoImg()) {
        optionals.set(5);
      }
      if (struct.isSetAdVid()) {
        optionals.set(6);
      }
      if (struct.isSetAdApp()) {
        optionals.set(7);
      }
      if (struct.isSetIsHtmlAd()) {
        optionals.set(8);
      }
      if (struct.isSetImgsList()) {
        optionals.set(9);
      }
      if (struct.isSetHtmlSnippet()) {
        optionals.set(10);
      }
      if (struct.isSetPriceUCode()) {
        optionals.set(11);
      }
      oprot.writeBitSet(optionals, 12);
      if (struct.isSetWeight()) {
        oprot.writeI32(struct.weight);
      }
      if (struct.isSetLimitCondition()) {
        {
          oprot.writeI32(struct.limitCondition.size());
          for (Map.Entry<Integer, LimitCondition> _iter53 : struct.limitCondition.entrySet())
          {
            oprot.writeI32(_iter53.getKey());
            _iter53.getValue().write(oprot);
          }
        }
      }
      if (struct.isSetCopywriting()) {
        oprot.writeString(struct.copywriting);
      }
      if (struct.isSetLinkurl()) {
        oprot.writeString(struct.linkurl);
      }
      if (struct.isSetThirdReportLinks()) {
        {
          oprot.writeI32(struct.thirdReportLinks.size());
          for (Map.Entry<String, List<String>> _iter54 : struct.thirdReportLinks.entrySet())
          {
            oprot.writeString(_iter54.getKey());
            {
              oprot.writeI32(_iter54.getValue().size());
              for (String _iter55 : _iter54.getValue())
              {
                oprot.writeString(_iter55);
              }
            }
          }
        }
      }
      if (struct.isSetLogoImg()) {
        struct.logoImg.write(oprot);
      }
      if (struct.isSetAdVid()) {
        struct.adVid.write(oprot);
      }
      if (struct.isSetAdApp()) {
        struct.adApp.write(oprot);
      }
      if (struct.isSetIsHtmlAd()) {
        oprot.writeBool(struct.isHtmlAd);
      }
      if (struct.isSetImgsList()) {
        {
          oprot.writeI32(struct.imgsList.size());
          for (AdImg _iter56 : struct.imgsList)
          {
            _iter56.write(oprot);
          }
        }
      }
      if (struct.isSetHtmlSnippet()) {
        oprot.writeString(struct.htmlSnippet);
      }
      if (struct.isSetPriceUCode()) {
        oprot.writeString(struct.priceUCode);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, AdInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.adId = iprot.readI64();
      struct.setAdIdIsSet(true);
      {
        org.apache.thrift.protocol.TMap _map57 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, iprot.readI32());
        struct.proTimeDetail = new HashMap<String,List<ProDateTime>>(2*_map57.size);
        String _key58;
        List<ProDateTime> _val59;
        for (int _i60 = 0; _i60 < _map57.size; ++_i60)
        {
          _key58 = iprot.readString();
          {
            org.apache.thrift.protocol.TList _list61 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            _val59 = new ArrayList<ProDateTime>(_list61.size);
            ProDateTime _elem62;
            for (int _i63 = 0; _i63 < _list61.size; ++_i63)
            {
              _elem62 = new ProDateTime();
              _elem62.read(iprot);
              _val59.add(_elem62);
            }
          }
          struct.proTimeDetail.put(_key58, _val59);
        }
      }
      struct.setProTimeDetailIsSet(true);
      struct.title = iprot.readString();
      struct.setTitleIsSet(true);
      struct.interactive_type = iprot.readI32();
      struct.setInteractive_typeIsSet(true);
      BitSet incoming = iprot.readBitSet(12);
      if (incoming.get(0)) {
        struct.weight = iprot.readI32();
        struct.setWeightIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TMap _map64 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.limitCondition = new HashMap<Integer,LimitCondition>(2*_map64.size);
          int _key65;
          LimitCondition _val66;
          for (int _i67 = 0; _i67 < _map64.size; ++_i67)
          {
            _key65 = iprot.readI32();
            _val66 = new LimitCondition();
            _val66.read(iprot);
            struct.limitCondition.put(_key65, _val66);
          }
        }
        struct.setLimitConditionIsSet(true);
      }
      if (incoming.get(2)) {
        struct.copywriting = iprot.readString();
        struct.setCopywritingIsSet(true);
      }
      if (incoming.get(3)) {
        struct.linkurl = iprot.readString();
        struct.setLinkurlIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TMap _map68 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, iprot.readI32());
          struct.thirdReportLinks = new HashMap<String,List<String>>(2*_map68.size);
          String _key69;
          List<String> _val70;
          for (int _i71 = 0; _i71 < _map68.size; ++_i71)
          {
            _key69 = iprot.readString();
            {
              org.apache.thrift.protocol.TList _list72 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
              _val70 = new ArrayList<String>(_list72.size);
              String _elem73;
              for (int _i74 = 0; _i74 < _list72.size; ++_i74)
              {
                _elem73 = iprot.readString();
                _val70.add(_elem73);
              }
            }
            struct.thirdReportLinks.put(_key69, _val70);
          }
        }
        struct.setThirdReportLinksIsSet(true);
      }
      if (incoming.get(5)) {
        struct.logoImg = new AdImg();
        struct.logoImg.read(iprot);
        struct.setLogoImgIsSet(true);
      }
      if (incoming.get(6)) {
        struct.adVid = new AdVid();
        struct.adVid.read(iprot);
        struct.setAdVidIsSet(true);
      }
      if (incoming.get(7)) {
        struct.adApp = new AdApp();
        struct.adApp.read(iprot);
        struct.setAdAppIsSet(true);
      }
      if (incoming.get(8)) {
        struct.isHtmlAd = iprot.readBool();
        struct.setIsHtmlAdIsSet(true);
      }
      if (incoming.get(9)) {
        {
          org.apache.thrift.protocol.TList _list75 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.imgsList = new ArrayList<AdImg>(_list75.size);
          AdImg _elem76;
          for (int _i77 = 0; _i77 < _list75.size; ++_i77)
          {
            _elem76 = new AdImg();
            _elem76.read(iprot);
            struct.imgsList.add(_elem76);
          }
        }
        struct.setImgsListIsSet(true);
      }
      if (incoming.get(10)) {
        struct.htmlSnippet = iprot.readString();
        struct.setHtmlSnippetIsSet(true);
      }
      if (incoming.get(11)) {
        struct.priceUCode = iprot.readString();
        struct.setPriceUCodeIsSet(true);
      }
    }
  }

}

