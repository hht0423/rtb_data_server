/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ocean.rtb.persist.bean.thrift.adsync;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2019-3-22")
public class QueryRtbSrcIdsReq implements org.apache.thrift.TBase<QueryRtbSrcIdsReq, QueryRtbSrcIdsReq._Fields>, java.io.Serializable, Cloneable, Comparable<QueryRtbSrcIdsReq> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("QueryRtbSrcIdsReq");

  private static final org.apache.thrift.protocol.TField SRC_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("srcType", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField SPACE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("spaceId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField START_FIELD_DESC = new org.apache.thrift.protocol.TField("start", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField MAX_FIELD_DESC = new org.apache.thrift.protocol.TField("max", org.apache.thrift.protocol.TType.I32, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new QueryRtbSrcIdsReqStandardSchemeFactory());
    schemes.put(TupleScheme.class, new QueryRtbSrcIdsReqTupleSchemeFactory());
  }

  /**
   * 
   * @see com.ocean.rtb.persist.bean.thrift.common.RtbSrcType
   */
  public com.ocean.rtb.persist.bean.thrift.common.RtbSrcType srcType; // required
  public int spaceId; // required
  public int start; // optional
  public int max; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see com.ocean.rtb.persist.bean.thrift.common.RtbSrcType
     */
    SRC_TYPE((short)1, "srcType"),
    SPACE_ID((short)2, "spaceId"),
    START((short)3, "start"),
    MAX((short)4, "max");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SRC_TYPE
          return SRC_TYPE;
        case 2: // SPACE_ID
          return SPACE_ID;
        case 3: // START
          return START;
        case 4: // MAX
          return MAX;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SPACEID_ISSET_ID = 0;
  private static final int __START_ISSET_ID = 1;
  private static final int __MAX_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.START,_Fields.MAX};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SRC_TYPE, new org.apache.thrift.meta_data.FieldMetaData("srcType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.ocean.rtb.persist.bean.thrift.common.RtbSrcType.class)));
    tmpMap.put(_Fields.SPACE_ID, new org.apache.thrift.meta_data.FieldMetaData("spaceId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.START, new org.apache.thrift.meta_data.FieldMetaData("start", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MAX, new org.apache.thrift.meta_data.FieldMetaData("max", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(QueryRtbSrcIdsReq.class, metaDataMap);
  }

  public QueryRtbSrcIdsReq() {
  }

  public QueryRtbSrcIdsReq(
    com.ocean.rtb.persist.bean.thrift.common.RtbSrcType srcType,
    int spaceId)
  {
    this();
    this.srcType = srcType;
    this.spaceId = spaceId;
    setSpaceIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public QueryRtbSrcIdsReq(QueryRtbSrcIdsReq other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetSrcType()) {
      this.srcType = other.srcType;
    }
    this.spaceId = other.spaceId;
    this.start = other.start;
    this.max = other.max;
  }

  public QueryRtbSrcIdsReq deepCopy() {
    return new QueryRtbSrcIdsReq(this);
  }

  @Override
  public void clear() {
    this.srcType = null;
    setSpaceIdIsSet(false);
    this.spaceId = 0;
    setStartIsSet(false);
    this.start = 0;
    setMaxIsSet(false);
    this.max = 0;
  }

  /**
   * 
   * @see com.ocean.rtb.persist.bean.thrift.common.RtbSrcType
   */
  public com.ocean.rtb.persist.bean.thrift.common.RtbSrcType getSrcType() {
    return this.srcType;
  }

  /**
   * 
   * @see com.ocean.rtb.persist.bean.thrift.common.RtbSrcType
   */
  public QueryRtbSrcIdsReq setSrcType(com.ocean.rtb.persist.bean.thrift.common.RtbSrcType srcType) {
    this.srcType = srcType;
    return this;
  }

  public void unsetSrcType() {
    this.srcType = null;
  }

  /** Returns true if field srcType is set (has been assigned a value) and false otherwise */
  public boolean isSetSrcType() {
    return this.srcType != null;
  }

  public void setSrcTypeIsSet(boolean value) {
    if (!value) {
      this.srcType = null;
    }
  }

  public int getSpaceId() {
    return this.spaceId;
  }

  public QueryRtbSrcIdsReq setSpaceId(int spaceId) {
    this.spaceId = spaceId;
    setSpaceIdIsSet(true);
    return this;
  }

  public void unsetSpaceId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SPACEID_ISSET_ID);
  }

  /** Returns true if field spaceId is set (has been assigned a value) and false otherwise */
  public boolean isSetSpaceId() {
    return EncodingUtils.testBit(__isset_bitfield, __SPACEID_ISSET_ID);
  }

  public void setSpaceIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SPACEID_ISSET_ID, value);
  }

  public int getStart() {
    return this.start;
  }

  public QueryRtbSrcIdsReq setStart(int start) {
    this.start = start;
    setStartIsSet(true);
    return this;
  }

  public void unsetStart() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __START_ISSET_ID);
  }

  /** Returns true if field start is set (has been assigned a value) and false otherwise */
  public boolean isSetStart() {
    return EncodingUtils.testBit(__isset_bitfield, __START_ISSET_ID);
  }

  public void setStartIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __START_ISSET_ID, value);
  }

  public int getMax() {
    return this.max;
  }

  public QueryRtbSrcIdsReq setMax(int max) {
    this.max = max;
    setMaxIsSet(true);
    return this;
  }

  public void unsetMax() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAX_ISSET_ID);
  }

  /** Returns true if field max is set (has been assigned a value) and false otherwise */
  public boolean isSetMax() {
    return EncodingUtils.testBit(__isset_bitfield, __MAX_ISSET_ID);
  }

  public void setMaxIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAX_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SRC_TYPE:
      if (value == null) {
        unsetSrcType();
      } else {
        setSrcType((com.ocean.rtb.persist.bean.thrift.common.RtbSrcType)value);
      }
      break;

    case SPACE_ID:
      if (value == null) {
        unsetSpaceId();
      } else {
        setSpaceId((Integer)value);
      }
      break;

    case START:
      if (value == null) {
        unsetStart();
      } else {
        setStart((Integer)value);
      }
      break;

    case MAX:
      if (value == null) {
        unsetMax();
      } else {
        setMax((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SRC_TYPE:
      return getSrcType();

    case SPACE_ID:
      return Integer.valueOf(getSpaceId());

    case START:
      return Integer.valueOf(getStart());

    case MAX:
      return Integer.valueOf(getMax());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SRC_TYPE:
      return isSetSrcType();
    case SPACE_ID:
      return isSetSpaceId();
    case START:
      return isSetStart();
    case MAX:
      return isSetMax();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof QueryRtbSrcIdsReq)
      return this.equals((QueryRtbSrcIdsReq)that);
    return false;
  }

  public boolean equals(QueryRtbSrcIdsReq that) {
    if (that == null)
      return false;

    boolean this_present_srcType = true && this.isSetSrcType();
    boolean that_present_srcType = true && that.isSetSrcType();
    if (this_present_srcType || that_present_srcType) {
      if (!(this_present_srcType && that_present_srcType))
        return false;
      if (!this.srcType.equals(that.srcType))
        return false;
    }

    boolean this_present_spaceId = true;
    boolean that_present_spaceId = true;
    if (this_present_spaceId || that_present_spaceId) {
      if (!(this_present_spaceId && that_present_spaceId))
        return false;
      if (this.spaceId != that.spaceId)
        return false;
    }

    boolean this_present_start = true && this.isSetStart();
    boolean that_present_start = true && that.isSetStart();
    if (this_present_start || that_present_start) {
      if (!(this_present_start && that_present_start))
        return false;
      if (this.start != that.start)
        return false;
    }

    boolean this_present_max = true && this.isSetMax();
    boolean that_present_max = true && that.isSetMax();
    if (this_present_max || that_present_max) {
      if (!(this_present_max && that_present_max))
        return false;
      if (this.max != that.max)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_srcType = true && (isSetSrcType());
    list.add(present_srcType);
    if (present_srcType)
      list.add(srcType.getValue());

    boolean present_spaceId = true;
    list.add(present_spaceId);
    if (present_spaceId)
      list.add(spaceId);

    boolean present_start = true && (isSetStart());
    list.add(present_start);
    if (present_start)
      list.add(start);

    boolean present_max = true && (isSetMax());
    list.add(present_max);
    if (present_max)
      list.add(max);

    return list.hashCode();
  }

  @Override
  public int compareTo(QueryRtbSrcIdsReq other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSrcType()).compareTo(other.isSetSrcType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSrcType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.srcType, other.srcType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSpaceId()).compareTo(other.isSetSpaceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpaceId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spaceId, other.spaceId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStart()).compareTo(other.isSetStart());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStart()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.start, other.start);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMax()).compareTo(other.isSetMax());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMax()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.max, other.max);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("QueryRtbSrcIdsReq(");
    boolean first = true;

    sb.append("srcType:");
    if (this.srcType == null) {
      sb.append("null");
    } else {
      sb.append(this.srcType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("spaceId:");
    sb.append(this.spaceId);
    first = false;
    if (isSetStart()) {
      if (!first) sb.append(", ");
      sb.append("start:");
      sb.append(this.start);
      first = false;
    }
    if (isSetMax()) {
      if (!first) sb.append(", ");
      sb.append("max:");
      sb.append(this.max);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (srcType == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'srcType' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'spaceId' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class QueryRtbSrcIdsReqStandardSchemeFactory implements SchemeFactory {
    public QueryRtbSrcIdsReqStandardScheme getScheme() {
      return new QueryRtbSrcIdsReqStandardScheme();
    }
  }

  private static class QueryRtbSrcIdsReqStandardScheme extends StandardScheme<QueryRtbSrcIdsReq> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, QueryRtbSrcIdsReq struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SRC_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.srcType = com.ocean.rtb.persist.bean.thrift.common.RtbSrcType.findByValue(iprot.readI32());
              struct.setSrcTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SPACE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.spaceId = iprot.readI32();
              struct.setSpaceIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // START
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.start = iprot.readI32();
              struct.setStartIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MAX
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.max = iprot.readI32();
              struct.setMaxIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetSpaceId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'spaceId' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, QueryRtbSrcIdsReq struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.srcType != null) {
        oprot.writeFieldBegin(SRC_TYPE_FIELD_DESC);
        oprot.writeI32(struct.srcType.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SPACE_ID_FIELD_DESC);
      oprot.writeI32(struct.spaceId);
      oprot.writeFieldEnd();
      if (struct.isSetStart()) {
        oprot.writeFieldBegin(START_FIELD_DESC);
        oprot.writeI32(struct.start);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMax()) {
        oprot.writeFieldBegin(MAX_FIELD_DESC);
        oprot.writeI32(struct.max);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class QueryRtbSrcIdsReqTupleSchemeFactory implements SchemeFactory {
    public QueryRtbSrcIdsReqTupleScheme getScheme() {
      return new QueryRtbSrcIdsReqTupleScheme();
    }
  }

  private static class QueryRtbSrcIdsReqTupleScheme extends TupleScheme<QueryRtbSrcIdsReq> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, QueryRtbSrcIdsReq struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.srcType.getValue());
      oprot.writeI32(struct.spaceId);
      BitSet optionals = new BitSet();
      if (struct.isSetStart()) {
        optionals.set(0);
      }
      if (struct.isSetMax()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetStart()) {
        oprot.writeI32(struct.start);
      }
      if (struct.isSetMax()) {
        oprot.writeI32(struct.max);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, QueryRtbSrcIdsReq struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.srcType = com.ocean.rtb.persist.bean.thrift.common.RtbSrcType.findByValue(iprot.readI32());
      struct.setSrcTypeIsSet(true);
      struct.spaceId = iprot.readI32();
      struct.setSpaceIdIsSet(true);
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.start = iprot.readI32();
        struct.setStartIsSet(true);
      }
      if (incoming.get(1)) {
        struct.max = iprot.readI32();
        struct.setMaxIsSet(true);
      }
    }
  }

}

