/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ocean.rtb.persist.bean.thrift.common;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2019-3-22")
public class TagInfo implements org.apache.thrift.TBase<TagInfo, TagInfo._Fields>, java.io.Serializable, Cloneable, Comparable<TagInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TagInfo");

  private static final org.apache.thrift.protocol.TField TAG_FIELD_DESC = new org.apache.thrift.protocol.TField("tag", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField MATCH_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("match_type", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField SPACE_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("space_ids", org.apache.thrift.protocol.TType.SET, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TagInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TagInfoTupleSchemeFactory());
  }

  public String tag; // required
  public int match_type; // required
  public Set<Integer> space_ids; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TAG((short)1, "tag"),
    MATCH_TYPE((short)2, "match_type"),
    SPACE_IDS((short)3, "space_ids");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TAG
          return TAG;
        case 2: // MATCH_TYPE
          return MATCH_TYPE;
        case 3: // SPACE_IDS
          return SPACE_IDS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MATCH_TYPE_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.SPACE_IDS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TAG, new org.apache.thrift.meta_data.FieldMetaData("tag", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MATCH_TYPE, new org.apache.thrift.meta_data.FieldMetaData("match_type", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SPACE_IDS, new org.apache.thrift.meta_data.FieldMetaData("space_ids", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TagInfo.class, metaDataMap);
  }

  public TagInfo() {
  }

  public TagInfo(
    String tag,
    int match_type)
  {
    this();
    this.tag = tag;
    this.match_type = match_type;
    setMatch_typeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TagInfo(TagInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetTag()) {
      this.tag = other.tag;
    }
    this.match_type = other.match_type;
    if (other.isSetSpace_ids()) {
      Set<Integer> __this__space_ids = new HashSet<Integer>(other.space_ids);
      this.space_ids = __this__space_ids;
    }
  }

  public TagInfo deepCopy() {
    return new TagInfo(this);
  }

  @Override
  public void clear() {
    this.tag = null;
    setMatch_typeIsSet(false);
    this.match_type = 0;
    this.space_ids = null;
  }

  public String getTag() {
    return this.tag;
  }

  public TagInfo setTag(String tag) {
    this.tag = tag;
    return this;
  }

  public void unsetTag() {
    this.tag = null;
  }

  /** Returns true if field tag is set (has been assigned a value) and false otherwise */
  public boolean isSetTag() {
    return this.tag != null;
  }

  public void setTagIsSet(boolean value) {
    if (!value) {
      this.tag = null;
    }
  }

  public int getMatch_type() {
    return this.match_type;
  }

  public TagInfo setMatch_type(int match_type) {
    this.match_type = match_type;
    setMatch_typeIsSet(true);
    return this;
  }

  public void unsetMatch_type() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MATCH_TYPE_ISSET_ID);
  }

  /** Returns true if field match_type is set (has been assigned a value) and false otherwise */
  public boolean isSetMatch_type() {
    return EncodingUtils.testBit(__isset_bitfield, __MATCH_TYPE_ISSET_ID);
  }

  public void setMatch_typeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MATCH_TYPE_ISSET_ID, value);
  }

  public int getSpace_idsSize() {
    return (this.space_ids == null) ? 0 : this.space_ids.size();
  }

  public java.util.Iterator<Integer> getSpace_idsIterator() {
    return (this.space_ids == null) ? null : this.space_ids.iterator();
  }

  public void addToSpace_ids(int elem) {
    if (this.space_ids == null) {
      this.space_ids = new HashSet<Integer>();
    }
    this.space_ids.add(elem);
  }

  public Set<Integer> getSpace_ids() {
    return this.space_ids;
  }

  public TagInfo setSpace_ids(Set<Integer> space_ids) {
    this.space_ids = space_ids;
    return this;
  }

  public void unsetSpace_ids() {
    this.space_ids = null;
  }

  /** Returns true if field space_ids is set (has been assigned a value) and false otherwise */
  public boolean isSetSpace_ids() {
    return this.space_ids != null;
  }

  public void setSpace_idsIsSet(boolean value) {
    if (!value) {
      this.space_ids = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TAG:
      if (value == null) {
        unsetTag();
      } else {
        setTag((String)value);
      }
      break;

    case MATCH_TYPE:
      if (value == null) {
        unsetMatch_type();
      } else {
        setMatch_type((Integer)value);
      }
      break;

    case SPACE_IDS:
      if (value == null) {
        unsetSpace_ids();
      } else {
        setSpace_ids((Set<Integer>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TAG:
      return getTag();

    case MATCH_TYPE:
      return Integer.valueOf(getMatch_type());

    case SPACE_IDS:
      return getSpace_ids();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TAG:
      return isSetTag();
    case MATCH_TYPE:
      return isSetMatch_type();
    case SPACE_IDS:
      return isSetSpace_ids();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TagInfo)
      return this.equals((TagInfo)that);
    return false;
  }

  public boolean equals(TagInfo that) {
    if (that == null)
      return false;

    boolean this_present_tag = true && this.isSetTag();
    boolean that_present_tag = true && that.isSetTag();
    if (this_present_tag || that_present_tag) {
      if (!(this_present_tag && that_present_tag))
        return false;
      if (!this.tag.equals(that.tag))
        return false;
    }

    boolean this_present_match_type = true;
    boolean that_present_match_type = true;
    if (this_present_match_type || that_present_match_type) {
      if (!(this_present_match_type && that_present_match_type))
        return false;
      if (this.match_type != that.match_type)
        return false;
    }

    boolean this_present_space_ids = true && this.isSetSpace_ids();
    boolean that_present_space_ids = true && that.isSetSpace_ids();
    if (this_present_space_ids || that_present_space_ids) {
      if (!(this_present_space_ids && that_present_space_ids))
        return false;
      if (!this.space_ids.equals(that.space_ids))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_tag = true && (isSetTag());
    list.add(present_tag);
    if (present_tag)
      list.add(tag);

    boolean present_match_type = true;
    list.add(present_match_type);
    if (present_match_type)
      list.add(match_type);

    boolean present_space_ids = true && (isSetSpace_ids());
    list.add(present_space_ids);
    if (present_space_ids)
      list.add(space_ids);

    return list.hashCode();
  }

  @Override
  public int compareTo(TagInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTag()).compareTo(other.isSetTag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tag, other.tag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMatch_type()).compareTo(other.isSetMatch_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMatch_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.match_type, other.match_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSpace_ids()).compareTo(other.isSetSpace_ids());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpace_ids()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.space_ids, other.space_ids);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TagInfo(");
    boolean first = true;

    sb.append("tag:");
    if (this.tag == null) {
      sb.append("null");
    } else {
      sb.append(this.tag);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("match_type:");
    sb.append(this.match_type);
    first = false;
    if (isSetSpace_ids()) {
      if (!first) sb.append(", ");
      sb.append("space_ids:");
      if (this.space_ids == null) {
        sb.append("null");
      } else {
        sb.append(this.space_ids);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (tag == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'tag' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'match_type' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TagInfoStandardSchemeFactory implements SchemeFactory {
    public TagInfoStandardScheme getScheme() {
      return new TagInfoStandardScheme();
    }
  }

  private static class TagInfoStandardScheme extends StandardScheme<TagInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TagInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TAG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tag = iprot.readString();
              struct.setTagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MATCH_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.match_type = iprot.readI32();
              struct.setMatch_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SPACE_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set8 = iprot.readSetBegin();
                struct.space_ids = new HashSet<Integer>(2*_set8.size);
                int _elem9;
                for (int _i10 = 0; _i10 < _set8.size; ++_i10)
                {
                  _elem9 = iprot.readI32();
                  struct.space_ids.add(_elem9);
                }
                iprot.readSetEnd();
              }
              struct.setSpace_idsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetMatch_type()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'match_type' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TagInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.tag != null) {
        oprot.writeFieldBegin(TAG_FIELD_DESC);
        oprot.writeString(struct.tag);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MATCH_TYPE_FIELD_DESC);
      oprot.writeI32(struct.match_type);
      oprot.writeFieldEnd();
      if (struct.space_ids != null) {
        if (struct.isSetSpace_ids()) {
          oprot.writeFieldBegin(SPACE_IDS_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, struct.space_ids.size()));
            for (int _iter11 : struct.space_ids)
            {
              oprot.writeI32(_iter11);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TagInfoTupleSchemeFactory implements SchemeFactory {
    public TagInfoTupleScheme getScheme() {
      return new TagInfoTupleScheme();
    }
  }

  private static class TagInfoTupleScheme extends TupleScheme<TagInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TagInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.tag);
      oprot.writeI32(struct.match_type);
      BitSet optionals = new BitSet();
      if (struct.isSetSpace_ids()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetSpace_ids()) {
        {
          oprot.writeI32(struct.space_ids.size());
          for (int _iter12 : struct.space_ids)
          {
            oprot.writeI32(_iter12);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TagInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.tag = iprot.readString();
      struct.setTagIsSet(true);
      struct.match_type = iprot.readI32();
      struct.setMatch_typeIsSet(true);
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TSet _set13 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.space_ids = new HashSet<Integer>(2*_set13.size);
          int _elem14;
          for (int _i15 = 0; _i15 < _set13.size; ++_i15)
          {
            _elem14 = iprot.readI32();
            struct.space_ids.add(_elem14);
          }
        }
        struct.setSpace_idsIsSet(true);
      }
    }
  }

}

