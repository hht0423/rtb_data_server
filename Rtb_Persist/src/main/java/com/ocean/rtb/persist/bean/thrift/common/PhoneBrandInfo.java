/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ocean.rtb.persist.bean.thrift.common;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2019-3-22")
public class PhoneBrandInfo implements org.apache.thrift.TBase<PhoneBrandInfo, PhoneBrandInfo._Fields>, java.io.Serializable, Cloneable, Comparable<PhoneBrandInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PhoneBrandInfo");

  private static final org.apache.thrift.protocol.TField BRAND_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("brandId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField MODELS_FIELD_DESC = new org.apache.thrift.protocol.TField("models", org.apache.thrift.protocol.TType.SET, (short)2);
  private static final org.apache.thrift.protocol.TField BRAND_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("brandName", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PhoneBrandInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PhoneBrandInfoTupleSchemeFactory());
  }

  public String brandId; // required
  public Set<String> models; // optional
  public String brandName; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BRAND_ID((short)1, "brandId"),
    MODELS((short)2, "models"),
    BRAND_NAME((short)3, "brandName");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BRAND_ID
          return BRAND_ID;
        case 2: // MODELS
          return MODELS;
        case 3: // BRAND_NAME
          return BRAND_NAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.MODELS,_Fields.BRAND_NAME};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BRAND_ID, new org.apache.thrift.meta_data.FieldMetaData("brandId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MODELS, new org.apache.thrift.meta_data.FieldMetaData("models", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.BRAND_NAME, new org.apache.thrift.meta_data.FieldMetaData("brandName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PhoneBrandInfo.class, metaDataMap);
  }

  public PhoneBrandInfo() {
  }

  public PhoneBrandInfo(
    String brandId)
  {
    this();
    this.brandId = brandId;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PhoneBrandInfo(PhoneBrandInfo other) {
    if (other.isSetBrandId()) {
      this.brandId = other.brandId;
    }
    if (other.isSetModels()) {
      Set<String> __this__models = new HashSet<String>(other.models);
      this.models = __this__models;
    }
    if (other.isSetBrandName()) {
      this.brandName = other.brandName;
    }
  }

  public PhoneBrandInfo deepCopy() {
    return new PhoneBrandInfo(this);
  }

  @Override
  public void clear() {
    this.brandId = null;
    this.models = null;
    this.brandName = null;
  }

  public String getBrandId() {
    return this.brandId;
  }

  public PhoneBrandInfo setBrandId(String brandId) {
    this.brandId = brandId;
    return this;
  }

  public void unsetBrandId() {
    this.brandId = null;
  }

  /** Returns true if field brandId is set (has been assigned a value) and false otherwise */
  public boolean isSetBrandId() {
    return this.brandId != null;
  }

  public void setBrandIdIsSet(boolean value) {
    if (!value) {
      this.brandId = null;
    }
  }

  public int getModelsSize() {
    return (this.models == null) ? 0 : this.models.size();
  }

  public java.util.Iterator<String> getModelsIterator() {
    return (this.models == null) ? null : this.models.iterator();
  }

  public void addToModels(String elem) {
    if (this.models == null) {
      this.models = new HashSet<String>();
    }
    this.models.add(elem);
  }

  public Set<String> getModels() {
    return this.models;
  }

  public PhoneBrandInfo setModels(Set<String> models) {
    this.models = models;
    return this;
  }

  public void unsetModels() {
    this.models = null;
  }

  /** Returns true if field models is set (has been assigned a value) and false otherwise */
  public boolean isSetModels() {
    return this.models != null;
  }

  public void setModelsIsSet(boolean value) {
    if (!value) {
      this.models = null;
    }
  }

  public String getBrandName() {
    return this.brandName;
  }

  public PhoneBrandInfo setBrandName(String brandName) {
    this.brandName = brandName;
    return this;
  }

  public void unsetBrandName() {
    this.brandName = null;
  }

  /** Returns true if field brandName is set (has been assigned a value) and false otherwise */
  public boolean isSetBrandName() {
    return this.brandName != null;
  }

  public void setBrandNameIsSet(boolean value) {
    if (!value) {
      this.brandName = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case BRAND_ID:
      if (value == null) {
        unsetBrandId();
      } else {
        setBrandId((String)value);
      }
      break;

    case MODELS:
      if (value == null) {
        unsetModels();
      } else {
        setModels((Set<String>)value);
      }
      break;

    case BRAND_NAME:
      if (value == null) {
        unsetBrandName();
      } else {
        setBrandName((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case BRAND_ID:
      return getBrandId();

    case MODELS:
      return getModels();

    case BRAND_NAME:
      return getBrandName();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case BRAND_ID:
      return isSetBrandId();
    case MODELS:
      return isSetModels();
    case BRAND_NAME:
      return isSetBrandName();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PhoneBrandInfo)
      return this.equals((PhoneBrandInfo)that);
    return false;
  }

  public boolean equals(PhoneBrandInfo that) {
    if (that == null)
      return false;

    boolean this_present_brandId = true && this.isSetBrandId();
    boolean that_present_brandId = true && that.isSetBrandId();
    if (this_present_brandId || that_present_brandId) {
      if (!(this_present_brandId && that_present_brandId))
        return false;
      if (!this.brandId.equals(that.brandId))
        return false;
    }

    boolean this_present_models = true && this.isSetModels();
    boolean that_present_models = true && that.isSetModels();
    if (this_present_models || that_present_models) {
      if (!(this_present_models && that_present_models))
        return false;
      if (!this.models.equals(that.models))
        return false;
    }

    boolean this_present_brandName = true && this.isSetBrandName();
    boolean that_present_brandName = true && that.isSetBrandName();
    if (this_present_brandName || that_present_brandName) {
      if (!(this_present_brandName && that_present_brandName))
        return false;
      if (!this.brandName.equals(that.brandName))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_brandId = true && (isSetBrandId());
    list.add(present_brandId);
    if (present_brandId)
      list.add(brandId);

    boolean present_models = true && (isSetModels());
    list.add(present_models);
    if (present_models)
      list.add(models);

    boolean present_brandName = true && (isSetBrandName());
    list.add(present_brandName);
    if (present_brandName)
      list.add(brandName);

    return list.hashCode();
  }

  @Override
  public int compareTo(PhoneBrandInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetBrandId()).compareTo(other.isSetBrandId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBrandId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.brandId, other.brandId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetModels()).compareTo(other.isSetModels());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetModels()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.models, other.models);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBrandName()).compareTo(other.isSetBrandName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBrandName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.brandName, other.brandName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("PhoneBrandInfo(");
    boolean first = true;

    sb.append("brandId:");
    if (this.brandId == null) {
      sb.append("null");
    } else {
      sb.append(this.brandId);
    }
    first = false;
    if (isSetModels()) {
      if (!first) sb.append(", ");
      sb.append("models:");
      if (this.models == null) {
        sb.append("null");
      } else {
        sb.append(this.models);
      }
      first = false;
    }
    if (isSetBrandName()) {
      if (!first) sb.append(", ");
      sb.append("brandName:");
      if (this.brandName == null) {
        sb.append("null");
      } else {
        sb.append(this.brandName);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (brandId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'brandId' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PhoneBrandInfoStandardSchemeFactory implements SchemeFactory {
    public PhoneBrandInfoStandardScheme getScheme() {
      return new PhoneBrandInfoStandardScheme();
    }
  }

  private static class PhoneBrandInfoStandardScheme extends StandardScheme<PhoneBrandInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, PhoneBrandInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BRAND_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.brandId = iprot.readString();
              struct.setBrandIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MODELS
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set78 = iprot.readSetBegin();
                struct.models = new HashSet<String>(2*_set78.size);
                String _elem79;
                for (int _i80 = 0; _i80 < _set78.size; ++_i80)
                {
                  _elem79 = iprot.readString();
                  struct.models.add(_elem79);
                }
                iprot.readSetEnd();
              }
              struct.setModelsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // BRAND_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.brandName = iprot.readString();
              struct.setBrandNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, PhoneBrandInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.brandId != null) {
        oprot.writeFieldBegin(BRAND_ID_FIELD_DESC);
        oprot.writeString(struct.brandId);
        oprot.writeFieldEnd();
      }
      if (struct.models != null) {
        if (struct.isSetModels()) {
          oprot.writeFieldBegin(MODELS_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.models.size()));
            for (String _iter81 : struct.models)
            {
              oprot.writeString(_iter81);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.brandName != null) {
        if (struct.isSetBrandName()) {
          oprot.writeFieldBegin(BRAND_NAME_FIELD_DESC);
          oprot.writeString(struct.brandName);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PhoneBrandInfoTupleSchemeFactory implements SchemeFactory {
    public PhoneBrandInfoTupleScheme getScheme() {
      return new PhoneBrandInfoTupleScheme();
    }
  }

  private static class PhoneBrandInfoTupleScheme extends TupleScheme<PhoneBrandInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PhoneBrandInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.brandId);
      BitSet optionals = new BitSet();
      if (struct.isSetModels()) {
        optionals.set(0);
      }
      if (struct.isSetBrandName()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetModels()) {
        {
          oprot.writeI32(struct.models.size());
          for (String _iter82 : struct.models)
          {
            oprot.writeString(_iter82);
          }
        }
      }
      if (struct.isSetBrandName()) {
        oprot.writeString(struct.brandName);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PhoneBrandInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.brandId = iprot.readString();
      struct.setBrandIdIsSet(true);
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TSet _set83 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.models = new HashSet<String>(2*_set83.size);
          String _elem84;
          for (int _i85 = 0; _i85 < _set83.size; ++_i85)
          {
            _elem84 = iprot.readString();
            struct.models.add(_elem84);
          }
        }
        struct.setModelsIsSet(true);
      }
      if (incoming.get(1)) {
        struct.brandName = iprot.readString();
        struct.setBrandNameIsSet(true);
      }
    }
  }

}

