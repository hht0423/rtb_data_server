/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ocean.rtb.persist.bean.thrift.common;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2019-3-25")
public class RtbBalance implements org.apache.thrift.TBase<RtbBalance, RtbBalance._Fields>, java.io.Serializable, Cloneable, Comparable<RtbBalance> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RtbBalance");

  private static final org.apache.thrift.protocol.TField BALANCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("balanceId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField VALID_RESULTS_FIELD_DESC = new org.apache.thrift.protocol.TField("validResults", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField RTB_RESULTS_FIELD_DESC = new org.apache.thrift.protocol.TField("rtbResults", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField EXPIRED_RESULTS_FIELD_DESC = new org.apache.thrift.protocol.TField("expiredResults", org.apache.thrift.protocol.TType.I64, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new RtbBalanceStandardSchemeFactory());
    schemes.put(TupleScheme.class, new RtbBalanceTupleSchemeFactory());
  }

  public String balanceId; // required
  public long validResults; // optional
  public long rtbResults; // optional
  public long expiredResults; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BALANCE_ID((short)1, "balanceId"),
    VALID_RESULTS((short)2, "validResults"),
    RTB_RESULTS((short)3, "rtbResults"),
    EXPIRED_RESULTS((short)4, "expiredResults");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BALANCE_ID
          return BALANCE_ID;
        case 2: // VALID_RESULTS
          return VALID_RESULTS;
        case 3: // RTB_RESULTS
          return RTB_RESULTS;
        case 4: // EXPIRED_RESULTS
          return EXPIRED_RESULTS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __VALIDRESULTS_ISSET_ID = 0;
  private static final int __RTBRESULTS_ISSET_ID = 1;
  private static final int __EXPIREDRESULTS_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.VALID_RESULTS,_Fields.RTB_RESULTS,_Fields.EXPIRED_RESULTS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BALANCE_ID, new org.apache.thrift.meta_data.FieldMetaData("balanceId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VALID_RESULTS, new org.apache.thrift.meta_data.FieldMetaData("validResults", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.RTB_RESULTS, new org.apache.thrift.meta_data.FieldMetaData("rtbResults", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.EXPIRED_RESULTS, new org.apache.thrift.meta_data.FieldMetaData("expiredResults", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RtbBalance.class, metaDataMap);
  }

  public RtbBalance() {
  }

  public RtbBalance(
    String balanceId)
  {
    this();
    this.balanceId = balanceId;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RtbBalance(RtbBalance other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetBalanceId()) {
      this.balanceId = other.balanceId;
    }
    this.validResults = other.validResults;
    this.rtbResults = other.rtbResults;
    this.expiredResults = other.expiredResults;
  }

  public RtbBalance deepCopy() {
    return new RtbBalance(this);
  }

  @Override
  public void clear() {
    this.balanceId = null;
    setValidResultsIsSet(false);
    this.validResults = 0;
    setRtbResultsIsSet(false);
    this.rtbResults = 0;
    setExpiredResultsIsSet(false);
    this.expiredResults = 0;
  }

  public String getBalanceId() {
    return this.balanceId;
  }

  public RtbBalance setBalanceId(String balanceId) {
    this.balanceId = balanceId;
    return this;
  }

  public void unsetBalanceId() {
    this.balanceId = null;
  }

  /** Returns true if field balanceId is set (has been assigned a value) and false otherwise */
  public boolean isSetBalanceId() {
    return this.balanceId != null;
  }

  public void setBalanceIdIsSet(boolean value) {
    if (!value) {
      this.balanceId = null;
    }
  }

  public long getValidResults() {
    return this.validResults;
  }

  public RtbBalance setValidResults(long validResults) {
    this.validResults = validResults;
    setValidResultsIsSet(true);
    return this;
  }

  public void unsetValidResults() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VALIDRESULTS_ISSET_ID);
  }

  /** Returns true if field validResults is set (has been assigned a value) and false otherwise */
  public boolean isSetValidResults() {
    return EncodingUtils.testBit(__isset_bitfield, __VALIDRESULTS_ISSET_ID);
  }

  public void setValidResultsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VALIDRESULTS_ISSET_ID, value);
  }

  public long getRtbResults() {
    return this.rtbResults;
  }

  public RtbBalance setRtbResults(long rtbResults) {
    this.rtbResults = rtbResults;
    setRtbResultsIsSet(true);
    return this;
  }

  public void unsetRtbResults() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RTBRESULTS_ISSET_ID);
  }

  /** Returns true if field rtbResults is set (has been assigned a value) and false otherwise */
  public boolean isSetRtbResults() {
    return EncodingUtils.testBit(__isset_bitfield, __RTBRESULTS_ISSET_ID);
  }

  public void setRtbResultsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RTBRESULTS_ISSET_ID, value);
  }

  public long getExpiredResults() {
    return this.expiredResults;
  }

  public RtbBalance setExpiredResults(long expiredResults) {
    this.expiredResults = expiredResults;
    setExpiredResultsIsSet(true);
    return this;
  }

  public void unsetExpiredResults() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXPIREDRESULTS_ISSET_ID);
  }

  /** Returns true if field expiredResults is set (has been assigned a value) and false otherwise */
  public boolean isSetExpiredResults() {
    return EncodingUtils.testBit(__isset_bitfield, __EXPIREDRESULTS_ISSET_ID);
  }

  public void setExpiredResultsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXPIREDRESULTS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case BALANCE_ID:
      if (value == null) {
        unsetBalanceId();
      } else {
        setBalanceId((String)value);
      }
      break;

    case VALID_RESULTS:
      if (value == null) {
        unsetValidResults();
      } else {
        setValidResults((Long)value);
      }
      break;

    case RTB_RESULTS:
      if (value == null) {
        unsetRtbResults();
      } else {
        setRtbResults((Long)value);
      }
      break;

    case EXPIRED_RESULTS:
      if (value == null) {
        unsetExpiredResults();
      } else {
        setExpiredResults((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case BALANCE_ID:
      return getBalanceId();

    case VALID_RESULTS:
      return Long.valueOf(getValidResults());

    case RTB_RESULTS:
      return Long.valueOf(getRtbResults());

    case EXPIRED_RESULTS:
      return Long.valueOf(getExpiredResults());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case BALANCE_ID:
      return isSetBalanceId();
    case VALID_RESULTS:
      return isSetValidResults();
    case RTB_RESULTS:
      return isSetRtbResults();
    case EXPIRED_RESULTS:
      return isSetExpiredResults();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RtbBalance)
      return this.equals((RtbBalance)that);
    return false;
  }

  public boolean equals(RtbBalance that) {
    if (that == null)
      return false;

    boolean this_present_balanceId = true && this.isSetBalanceId();
    boolean that_present_balanceId = true && that.isSetBalanceId();
    if (this_present_balanceId || that_present_balanceId) {
      if (!(this_present_balanceId && that_present_balanceId))
        return false;
      if (!this.balanceId.equals(that.balanceId))
        return false;
    }

    boolean this_present_validResults = true && this.isSetValidResults();
    boolean that_present_validResults = true && that.isSetValidResults();
    if (this_present_validResults || that_present_validResults) {
      if (!(this_present_validResults && that_present_validResults))
        return false;
      if (this.validResults != that.validResults)
        return false;
    }

    boolean this_present_rtbResults = true && this.isSetRtbResults();
    boolean that_present_rtbResults = true && that.isSetRtbResults();
    if (this_present_rtbResults || that_present_rtbResults) {
      if (!(this_present_rtbResults && that_present_rtbResults))
        return false;
      if (this.rtbResults != that.rtbResults)
        return false;
    }

    boolean this_present_expiredResults = true && this.isSetExpiredResults();
    boolean that_present_expiredResults = true && that.isSetExpiredResults();
    if (this_present_expiredResults || that_present_expiredResults) {
      if (!(this_present_expiredResults && that_present_expiredResults))
        return false;
      if (this.expiredResults != that.expiredResults)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_balanceId = true && (isSetBalanceId());
    list.add(present_balanceId);
    if (present_balanceId)
      list.add(balanceId);

    boolean present_validResults = true && (isSetValidResults());
    list.add(present_validResults);
    if (present_validResults)
      list.add(validResults);

    boolean present_rtbResults = true && (isSetRtbResults());
    list.add(present_rtbResults);
    if (present_rtbResults)
      list.add(rtbResults);

    boolean present_expiredResults = true && (isSetExpiredResults());
    list.add(present_expiredResults);
    if (present_expiredResults)
      list.add(expiredResults);

    return list.hashCode();
  }

  @Override
  public int compareTo(RtbBalance other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetBalanceId()).compareTo(other.isSetBalanceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBalanceId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.balanceId, other.balanceId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetValidResults()).compareTo(other.isSetValidResults());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValidResults()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.validResults, other.validResults);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRtbResults()).compareTo(other.isSetRtbResults());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRtbResults()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rtbResults, other.rtbResults);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExpiredResults()).compareTo(other.isSetExpiredResults());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExpiredResults()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.expiredResults, other.expiredResults);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("RtbBalance(");
    boolean first = true;

    sb.append("balanceId:");
    if (this.balanceId == null) {
      sb.append("null");
    } else {
      sb.append(this.balanceId);
    }
    first = false;
    if (isSetValidResults()) {
      if (!first) sb.append(", ");
      sb.append("validResults:");
      sb.append(this.validResults);
      first = false;
    }
    if (isSetRtbResults()) {
      if (!first) sb.append(", ");
      sb.append("rtbResults:");
      sb.append(this.rtbResults);
      first = false;
    }
    if (isSetExpiredResults()) {
      if (!first) sb.append(", ");
      sb.append("expiredResults:");
      sb.append(this.expiredResults);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (balanceId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'balanceId' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RtbBalanceStandardSchemeFactory implements SchemeFactory {
    public RtbBalanceStandardScheme getScheme() {
      return new RtbBalanceStandardScheme();
    }
  }

  private static class RtbBalanceStandardScheme extends StandardScheme<RtbBalance> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RtbBalance struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BALANCE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.balanceId = iprot.readString();
              struct.setBalanceIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // VALID_RESULTS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.validResults = iprot.readI64();
              struct.setValidResultsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // RTB_RESULTS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.rtbResults = iprot.readI64();
              struct.setRtbResultsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // EXPIRED_RESULTS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.expiredResults = iprot.readI64();
              struct.setExpiredResultsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RtbBalance struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.balanceId != null) {
        oprot.writeFieldBegin(BALANCE_ID_FIELD_DESC);
        oprot.writeString(struct.balanceId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetValidResults()) {
        oprot.writeFieldBegin(VALID_RESULTS_FIELD_DESC);
        oprot.writeI64(struct.validResults);
        oprot.writeFieldEnd();
      }
      if (struct.isSetRtbResults()) {
        oprot.writeFieldBegin(RTB_RESULTS_FIELD_DESC);
        oprot.writeI64(struct.rtbResults);
        oprot.writeFieldEnd();
      }
      if (struct.isSetExpiredResults()) {
        oprot.writeFieldBegin(EXPIRED_RESULTS_FIELD_DESC);
        oprot.writeI64(struct.expiredResults);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RtbBalanceTupleSchemeFactory implements SchemeFactory {
    public RtbBalanceTupleScheme getScheme() {
      return new RtbBalanceTupleScheme();
    }
  }

  private static class RtbBalanceTupleScheme extends TupleScheme<RtbBalance> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RtbBalance struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.balanceId);
      BitSet optionals = new BitSet();
      if (struct.isSetValidResults()) {
        optionals.set(0);
      }
      if (struct.isSetRtbResults()) {
        optionals.set(1);
      }
      if (struct.isSetExpiredResults()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetValidResults()) {
        oprot.writeI64(struct.validResults);
      }
      if (struct.isSetRtbResults()) {
        oprot.writeI64(struct.rtbResults);
      }
      if (struct.isSetExpiredResults()) {
        oprot.writeI64(struct.expiredResults);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RtbBalance struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.balanceId = iprot.readString();
      struct.setBalanceIdIsSet(true);
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.validResults = iprot.readI64();
        struct.setValidResultsIsSet(true);
      }
      if (incoming.get(1)) {
        struct.rtbResults = iprot.readI64();
        struct.setRtbResultsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.expiredResults = iprot.readI64();
        struct.setExpiredResultsIsSet(true);
      }
    }
  }

}

