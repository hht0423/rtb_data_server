/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ocean.rtb.persist.bean.thrift.profile;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2019-3-27")
public class RtbUserInfo implements org.apache.thrift.TBase<RtbUserInfo, RtbUserInfo._Fields>, java.io.Serializable, Cloneable, Comparable<RtbUserInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RtbUserInfo");

  private static final org.apache.thrift.protocol.TField IMEI_FIELD_DESC = new org.apache.thrift.protocol.TField("imei", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField OS_FIELD_DESC = new org.apache.thrift.protocol.TField("os", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField OSVERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("osversion", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField PHONEMODEL_FIELD_DESC = new org.apache.thrift.protocol.TField("phonemodel", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField MOBILE_FIELD_DESC = new org.apache.thrift.protocol.TField("mobile", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField CLIENT_IP_FIELD_DESC = new org.apache.thrift.protocol.TField("client_ip", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField CITY_FIELD_DESC = new org.apache.thrift.protocol.TField("city", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField LON_FIELD_DESC = new org.apache.thrift.protocol.TField("lon", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField LAT_FIELD_DESC = new org.apache.thrift.protocol.TField("lat", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField UA_FIELD_DESC = new org.apache.thrift.protocol.TField("ua", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField AAID_FIELD_DESC = new org.apache.thrift.protocol.TField("aaid", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField ADID_FIELD_DESC = new org.apache.thrift.protocol.TField("adid", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField IDFA_FIELD_DESC = new org.apache.thrift.protocol.TField("idfa", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField BRAND_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("brand_id", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField BRAND_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("brand_name", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField DEVICE_HEIGHT_FIELD_DESC = new org.apache.thrift.protocol.TField("device_height", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField DEVICE_WIDTH_FIELD_DESC = new org.apache.thrift.protocol.TField("device_width", org.apache.thrift.protocol.TType.I32, (short)17);
  private static final org.apache.thrift.protocol.TField MAC_FIELD_DESC = new org.apache.thrift.protocol.TField("mac", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField IMSI_FIELD_DESC = new org.apache.thrift.protocol.TField("imsi", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField DIP_FIELD_DESC = new org.apache.thrift.protocol.TField("dip", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField DENSITY_FIELD_DESC = new org.apache.thrift.protocol.TField("density", org.apache.thrift.protocol.TType.STRING, (short)21);
  private static final org.apache.thrift.protocol.TField CITY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("city_name", org.apache.thrift.protocol.TType.STRING, (short)22);
  private static final org.apache.thrift.protocol.TField LAC_FIELD_DESC = new org.apache.thrift.protocol.TField("lac", org.apache.thrift.protocol.TType.I32, (short)23);
  private static final org.apache.thrift.protocol.TField CID_FIELD_DESC = new org.apache.thrift.protocol.TField("cid", org.apache.thrift.protocol.TType.I32, (short)24);
  private static final org.apache.thrift.protocol.TField OS_API_LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("os_api_level", org.apache.thrift.protocol.TType.STRING, (short)25);
  private static final org.apache.thrift.protocol.TField SN_FIELD_DESC = new org.apache.thrift.protocol.TField("sn", org.apache.thrift.protocol.TType.STRING, (short)26);
  private static final org.apache.thrift.protocol.TField TAG_FIELD_DESC = new org.apache.thrift.protocol.TField("tag", org.apache.thrift.protocol.TType.MAP, (short)27);
  private static final org.apache.thrift.protocol.TField DEV_PRICE_LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("dev_price_level", org.apache.thrift.protocol.TType.I32, (short)28);
  private static final org.apache.thrift.protocol.TField APP_FIELD_DESC = new org.apache.thrift.protocol.TField("app", org.apache.thrift.protocol.TType.STRING, (short)29);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.STRING, (short)30);
  private static final org.apache.thrift.protocol.TField VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("version", org.apache.thrift.protocol.TType.STRING, (short)31);
  private static final org.apache.thrift.protocol.TField RESULT_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("result_num", org.apache.thrift.protocol.TType.I32, (short)32);
  private static final org.apache.thrift.protocol.TField CHANNEL_FIELD_DESC = new org.apache.thrift.protocol.TField("channel", org.apache.thrift.protocol.TType.STRING, (short)33);
  private static final org.apache.thrift.protocol.TField NET_FIELD_DESC = new org.apache.thrift.protocol.TField("net", org.apache.thrift.protocol.TType.STRING, (short)34);
  private static final org.apache.thrift.protocol.TField HASH_FIELD_DESC = new org.apache.thrift.protocol.TField("hash", org.apache.thrift.protocol.TType.STRING, (short)35);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new RtbUserInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new RtbUserInfoTupleSchemeFactory());
  }

  public String imei; // optional
  public String os; // optional
  public String osversion; // optional
  public String phonemodel; // optional
  public String mobile; // optional
  public String client_ip; // optional
  public String city; // optional
  public String lon; // optional
  public String lat; // optional
  public String ua; // optional
  public String aaid; // optional
  public String adid; // optional
  public String idfa; // optional
  public String brand_id; // optional
  public String brand_name; // optional
  public int device_height; // optional
  public int device_width; // optional
  public String mac; // optional
  public String imsi; // optional
  public String dip; // optional
  public String density; // optional
  public String city_name; // optional
  public int lac; // optional
  public int cid; // optional
  public String os_api_level; // optional
  public String sn; // optional
  public Map<String,List<String>> tag; // optional
  public int dev_price_level; // optional
  public String app; // optional
  public String type; // optional
  public String version; // optional
  public int result_num; // optional
  public String channel; // optional
  public String net; // optional
  public String hash; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    IMEI((short)1, "imei"),
    OS((short)2, "os"),
    OSVERSION((short)3, "osversion"),
    PHONEMODEL((short)4, "phonemodel"),
    MOBILE((short)5, "mobile"),
    CLIENT_IP((short)6, "client_ip"),
    CITY((short)7, "city"),
    LON((short)8, "lon"),
    LAT((short)9, "lat"),
    UA((short)10, "ua"),
    AAID((short)11, "aaid"),
    ADID((short)12, "adid"),
    IDFA((short)13, "idfa"),
    BRAND_ID((short)14, "brand_id"),
    BRAND_NAME((short)15, "brand_name"),
    DEVICE_HEIGHT((short)16, "device_height"),
    DEVICE_WIDTH((short)17, "device_width"),
    MAC((short)18, "mac"),
    IMSI((short)19, "imsi"),
    DIP((short)20, "dip"),
    DENSITY((short)21, "density"),
    CITY_NAME((short)22, "city_name"),
    LAC((short)23, "lac"),
    CID((short)24, "cid"),
    OS_API_LEVEL((short)25, "os_api_level"),
    SN((short)26, "sn"),
    TAG((short)27, "tag"),
    DEV_PRICE_LEVEL((short)28, "dev_price_level"),
    APP((short)29, "app"),
    TYPE((short)30, "type"),
    VERSION((short)31, "version"),
    RESULT_NUM((short)32, "result_num"),
    CHANNEL((short)33, "channel"),
    NET((short)34, "net"),
    HASH((short)35, "hash");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // IMEI
          return IMEI;
        case 2: // OS
          return OS;
        case 3: // OSVERSION
          return OSVERSION;
        case 4: // PHONEMODEL
          return PHONEMODEL;
        case 5: // MOBILE
          return MOBILE;
        case 6: // CLIENT_IP
          return CLIENT_IP;
        case 7: // CITY
          return CITY;
        case 8: // LON
          return LON;
        case 9: // LAT
          return LAT;
        case 10: // UA
          return UA;
        case 11: // AAID
          return AAID;
        case 12: // ADID
          return ADID;
        case 13: // IDFA
          return IDFA;
        case 14: // BRAND_ID
          return BRAND_ID;
        case 15: // BRAND_NAME
          return BRAND_NAME;
        case 16: // DEVICE_HEIGHT
          return DEVICE_HEIGHT;
        case 17: // DEVICE_WIDTH
          return DEVICE_WIDTH;
        case 18: // MAC
          return MAC;
        case 19: // IMSI
          return IMSI;
        case 20: // DIP
          return DIP;
        case 21: // DENSITY
          return DENSITY;
        case 22: // CITY_NAME
          return CITY_NAME;
        case 23: // LAC
          return LAC;
        case 24: // CID
          return CID;
        case 25: // OS_API_LEVEL
          return OS_API_LEVEL;
        case 26: // SN
          return SN;
        case 27: // TAG
          return TAG;
        case 28: // DEV_PRICE_LEVEL
          return DEV_PRICE_LEVEL;
        case 29: // APP
          return APP;
        case 30: // TYPE
          return TYPE;
        case 31: // VERSION
          return VERSION;
        case 32: // RESULT_NUM
          return RESULT_NUM;
        case 33: // CHANNEL
          return CHANNEL;
        case 34: // NET
          return NET;
        case 35: // HASH
          return HASH;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __DEVICE_HEIGHT_ISSET_ID = 0;
  private static final int __DEVICE_WIDTH_ISSET_ID = 1;
  private static final int __LAC_ISSET_ID = 2;
  private static final int __CID_ISSET_ID = 3;
  private static final int __DEV_PRICE_LEVEL_ISSET_ID = 4;
  private static final int __RESULT_NUM_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.IMEI,_Fields.OS,_Fields.OSVERSION,_Fields.PHONEMODEL,_Fields.MOBILE,_Fields.CLIENT_IP,_Fields.CITY,_Fields.LON,_Fields.LAT,_Fields.UA,_Fields.AAID,_Fields.ADID,_Fields.IDFA,_Fields.BRAND_ID,_Fields.BRAND_NAME,_Fields.DEVICE_HEIGHT,_Fields.DEVICE_WIDTH,_Fields.MAC,_Fields.IMSI,_Fields.DIP,_Fields.DENSITY,_Fields.CITY_NAME,_Fields.LAC,_Fields.CID,_Fields.OS_API_LEVEL,_Fields.SN,_Fields.TAG,_Fields.DEV_PRICE_LEVEL,_Fields.APP,_Fields.TYPE,_Fields.VERSION,_Fields.RESULT_NUM,_Fields.CHANNEL,_Fields.NET,_Fields.HASH};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.IMEI, new org.apache.thrift.meta_data.FieldMetaData("imei", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OS, new org.apache.thrift.meta_data.FieldMetaData("os", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OSVERSION, new org.apache.thrift.meta_data.FieldMetaData("osversion", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PHONEMODEL, new org.apache.thrift.meta_data.FieldMetaData("phonemodel", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MOBILE, new org.apache.thrift.meta_data.FieldMetaData("mobile", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CLIENT_IP, new org.apache.thrift.meta_data.FieldMetaData("client_ip", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CITY, new org.apache.thrift.meta_data.FieldMetaData("city", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LON, new org.apache.thrift.meta_data.FieldMetaData("lon", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LAT, new org.apache.thrift.meta_data.FieldMetaData("lat", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UA, new org.apache.thrift.meta_data.FieldMetaData("ua", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AAID, new org.apache.thrift.meta_data.FieldMetaData("aaid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ADID, new org.apache.thrift.meta_data.FieldMetaData("adid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IDFA, new org.apache.thrift.meta_data.FieldMetaData("idfa", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BRAND_ID, new org.apache.thrift.meta_data.FieldMetaData("brand_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BRAND_NAME, new org.apache.thrift.meta_data.FieldMetaData("brand_name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DEVICE_HEIGHT, new org.apache.thrift.meta_data.FieldMetaData("device_height", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEVICE_WIDTH, new org.apache.thrift.meta_data.FieldMetaData("device_width", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MAC, new org.apache.thrift.meta_data.FieldMetaData("mac", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IMSI, new org.apache.thrift.meta_data.FieldMetaData("imsi", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DIP, new org.apache.thrift.meta_data.FieldMetaData("dip", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DENSITY, new org.apache.thrift.meta_data.FieldMetaData("density", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CITY_NAME, new org.apache.thrift.meta_data.FieldMetaData("city_name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LAC, new org.apache.thrift.meta_data.FieldMetaData("lac", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CID, new org.apache.thrift.meta_data.FieldMetaData("cid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OS_API_LEVEL, new org.apache.thrift.meta_data.FieldMetaData("os_api_level", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SN, new org.apache.thrift.meta_data.FieldMetaData("sn", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TAG, new org.apache.thrift.meta_data.FieldMetaData("tag", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
    tmpMap.put(_Fields.DEV_PRICE_LEVEL, new org.apache.thrift.meta_data.FieldMetaData("dev_price_level", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.APP, new org.apache.thrift.meta_data.FieldMetaData("app", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VERSION, new org.apache.thrift.meta_data.FieldMetaData("version", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RESULT_NUM, new org.apache.thrift.meta_data.FieldMetaData("result_num", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CHANNEL, new org.apache.thrift.meta_data.FieldMetaData("channel", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NET, new org.apache.thrift.meta_data.FieldMetaData("net", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HASH, new org.apache.thrift.meta_data.FieldMetaData("hash", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RtbUserInfo.class, metaDataMap);
  }

  public RtbUserInfo() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RtbUserInfo(RtbUserInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetImei()) {
      this.imei = other.imei;
    }
    if (other.isSetOs()) {
      this.os = other.os;
    }
    if (other.isSetOsversion()) {
      this.osversion = other.osversion;
    }
    if (other.isSetPhonemodel()) {
      this.phonemodel = other.phonemodel;
    }
    if (other.isSetMobile()) {
      this.mobile = other.mobile;
    }
    if (other.isSetClient_ip()) {
      this.client_ip = other.client_ip;
    }
    if (other.isSetCity()) {
      this.city = other.city;
    }
    if (other.isSetLon()) {
      this.lon = other.lon;
    }
    if (other.isSetLat()) {
      this.lat = other.lat;
    }
    if (other.isSetUa()) {
      this.ua = other.ua;
    }
    if (other.isSetAaid()) {
      this.aaid = other.aaid;
    }
    if (other.isSetAdid()) {
      this.adid = other.adid;
    }
    if (other.isSetIdfa()) {
      this.idfa = other.idfa;
    }
    if (other.isSetBrand_id()) {
      this.brand_id = other.brand_id;
    }
    if (other.isSetBrand_name()) {
      this.brand_name = other.brand_name;
    }
    this.device_height = other.device_height;
    this.device_width = other.device_width;
    if (other.isSetMac()) {
      this.mac = other.mac;
    }
    if (other.isSetImsi()) {
      this.imsi = other.imsi;
    }
    if (other.isSetDip()) {
      this.dip = other.dip;
    }
    if (other.isSetDensity()) {
      this.density = other.density;
    }
    if (other.isSetCity_name()) {
      this.city_name = other.city_name;
    }
    this.lac = other.lac;
    this.cid = other.cid;
    if (other.isSetOs_api_level()) {
      this.os_api_level = other.os_api_level;
    }
    if (other.isSetSn()) {
      this.sn = other.sn;
    }
    if (other.isSetTag()) {
      Map<String,List<String>> __this__tag = new HashMap<String,List<String>>(other.tag.size());
      for (Map.Entry<String, List<String>> other_element : other.tag.entrySet()) {

        String other_element_key = other_element.getKey();
        List<String> other_element_value = other_element.getValue();

        String __this__tag_copy_key = other_element_key;

        List<String> __this__tag_copy_value = new ArrayList<String>(other_element_value);

        __this__tag.put(__this__tag_copy_key, __this__tag_copy_value);
      }
      this.tag = __this__tag;
    }
    this.dev_price_level = other.dev_price_level;
    if (other.isSetApp()) {
      this.app = other.app;
    }
    if (other.isSetType()) {
      this.type = other.type;
    }
    if (other.isSetVersion()) {
      this.version = other.version;
    }
    this.result_num = other.result_num;
    if (other.isSetChannel()) {
      this.channel = other.channel;
    }
    if (other.isSetNet()) {
      this.net = other.net;
    }
    if (other.isSetHash()) {
      this.hash = other.hash;
    }
  }

  public RtbUserInfo deepCopy() {
    return new RtbUserInfo(this);
  }

  @Override
  public void clear() {
    this.imei = null;
    this.os = null;
    this.osversion = null;
    this.phonemodel = null;
    this.mobile = null;
    this.client_ip = null;
    this.city = null;
    this.lon = null;
    this.lat = null;
    this.ua = null;
    this.aaid = null;
    this.adid = null;
    this.idfa = null;
    this.brand_id = null;
    this.brand_name = null;
    setDevice_heightIsSet(false);
    this.device_height = 0;
    setDevice_widthIsSet(false);
    this.device_width = 0;
    this.mac = null;
    this.imsi = null;
    this.dip = null;
    this.density = null;
    this.city_name = null;
    setLacIsSet(false);
    this.lac = 0;
    setCidIsSet(false);
    this.cid = 0;
    this.os_api_level = null;
    this.sn = null;
    this.tag = null;
    setDev_price_levelIsSet(false);
    this.dev_price_level = 0;
    this.app = null;
    this.type = null;
    this.version = null;
    setResult_numIsSet(false);
    this.result_num = 0;
    this.channel = null;
    this.net = null;
    this.hash = null;
  }

  public String getImei() {
    return this.imei;
  }

  public RtbUserInfo setImei(String imei) {
    this.imei = imei;
    return this;
  }

  public void unsetImei() {
    this.imei = null;
  }

  /** Returns true if field imei is set (has been assigned a value) and false otherwise */
  public boolean isSetImei() {
    return this.imei != null;
  }

  public void setImeiIsSet(boolean value) {
    if (!value) {
      this.imei = null;
    }
  }

  public String getOs() {
    return this.os;
  }

  public RtbUserInfo setOs(String os) {
    this.os = os;
    return this;
  }

  public void unsetOs() {
    this.os = null;
  }

  /** Returns true if field os is set (has been assigned a value) and false otherwise */
  public boolean isSetOs() {
    return this.os != null;
  }

  public void setOsIsSet(boolean value) {
    if (!value) {
      this.os = null;
    }
  }

  public String getOsversion() {
    return this.osversion;
  }

  public RtbUserInfo setOsversion(String osversion) {
    this.osversion = osversion;
    return this;
  }

  public void unsetOsversion() {
    this.osversion = null;
  }

  /** Returns true if field osversion is set (has been assigned a value) and false otherwise */
  public boolean isSetOsversion() {
    return this.osversion != null;
  }

  public void setOsversionIsSet(boolean value) {
    if (!value) {
      this.osversion = null;
    }
  }

  public String getPhonemodel() {
    return this.phonemodel;
  }

  public RtbUserInfo setPhonemodel(String phonemodel) {
    this.phonemodel = phonemodel;
    return this;
  }

  public void unsetPhonemodel() {
    this.phonemodel = null;
  }

  /** Returns true if field phonemodel is set (has been assigned a value) and false otherwise */
  public boolean isSetPhonemodel() {
    return this.phonemodel != null;
  }

  public void setPhonemodelIsSet(boolean value) {
    if (!value) {
      this.phonemodel = null;
    }
  }

  public String getMobile() {
    return this.mobile;
  }

  public RtbUserInfo setMobile(String mobile) {
    this.mobile = mobile;
    return this;
  }

  public void unsetMobile() {
    this.mobile = null;
  }

  /** Returns true if field mobile is set (has been assigned a value) and false otherwise */
  public boolean isSetMobile() {
    return this.mobile != null;
  }

  public void setMobileIsSet(boolean value) {
    if (!value) {
      this.mobile = null;
    }
  }

  public String getClient_ip() {
    return this.client_ip;
  }

  public RtbUserInfo setClient_ip(String client_ip) {
    this.client_ip = client_ip;
    return this;
  }

  public void unsetClient_ip() {
    this.client_ip = null;
  }

  /** Returns true if field client_ip is set (has been assigned a value) and false otherwise */
  public boolean isSetClient_ip() {
    return this.client_ip != null;
  }

  public void setClient_ipIsSet(boolean value) {
    if (!value) {
      this.client_ip = null;
    }
  }

  public String getCity() {
    return this.city;
  }

  public RtbUserInfo setCity(String city) {
    this.city = city;
    return this;
  }

  public void unsetCity() {
    this.city = null;
  }

  /** Returns true if field city is set (has been assigned a value) and false otherwise */
  public boolean isSetCity() {
    return this.city != null;
  }

  public void setCityIsSet(boolean value) {
    if (!value) {
      this.city = null;
    }
  }

  public String getLon() {
    return this.lon;
  }

  public RtbUserInfo setLon(String lon) {
    this.lon = lon;
    return this;
  }

  public void unsetLon() {
    this.lon = null;
  }

  /** Returns true if field lon is set (has been assigned a value) and false otherwise */
  public boolean isSetLon() {
    return this.lon != null;
  }

  public void setLonIsSet(boolean value) {
    if (!value) {
      this.lon = null;
    }
  }

  public String getLat() {
    return this.lat;
  }

  public RtbUserInfo setLat(String lat) {
    this.lat = lat;
    return this;
  }

  public void unsetLat() {
    this.lat = null;
  }

  /** Returns true if field lat is set (has been assigned a value) and false otherwise */
  public boolean isSetLat() {
    return this.lat != null;
  }

  public void setLatIsSet(boolean value) {
    if (!value) {
      this.lat = null;
    }
  }

  public String getUa() {
    return this.ua;
  }

  public RtbUserInfo setUa(String ua) {
    this.ua = ua;
    return this;
  }

  public void unsetUa() {
    this.ua = null;
  }

  /** Returns true if field ua is set (has been assigned a value) and false otherwise */
  public boolean isSetUa() {
    return this.ua != null;
  }

  public void setUaIsSet(boolean value) {
    if (!value) {
      this.ua = null;
    }
  }

  public String getAaid() {
    return this.aaid;
  }

  public RtbUserInfo setAaid(String aaid) {
    this.aaid = aaid;
    return this;
  }

  public void unsetAaid() {
    this.aaid = null;
  }

  /** Returns true if field aaid is set (has been assigned a value) and false otherwise */
  public boolean isSetAaid() {
    return this.aaid != null;
  }

  public void setAaidIsSet(boolean value) {
    if (!value) {
      this.aaid = null;
    }
  }

  public String getAdid() {
    return this.adid;
  }

  public RtbUserInfo setAdid(String adid) {
    this.adid = adid;
    return this;
  }

  public void unsetAdid() {
    this.adid = null;
  }

  /** Returns true if field adid is set (has been assigned a value) and false otherwise */
  public boolean isSetAdid() {
    return this.adid != null;
  }

  public void setAdidIsSet(boolean value) {
    if (!value) {
      this.adid = null;
    }
  }

  public String getIdfa() {
    return this.idfa;
  }

  public RtbUserInfo setIdfa(String idfa) {
    this.idfa = idfa;
    return this;
  }

  public void unsetIdfa() {
    this.idfa = null;
  }

  /** Returns true if field idfa is set (has been assigned a value) and false otherwise */
  public boolean isSetIdfa() {
    return this.idfa != null;
  }

  public void setIdfaIsSet(boolean value) {
    if (!value) {
      this.idfa = null;
    }
  }

  public String getBrand_id() {
    return this.brand_id;
  }

  public RtbUserInfo setBrand_id(String brand_id) {
    this.brand_id = brand_id;
    return this;
  }

  public void unsetBrand_id() {
    this.brand_id = null;
  }

  /** Returns true if field brand_id is set (has been assigned a value) and false otherwise */
  public boolean isSetBrand_id() {
    return this.brand_id != null;
  }

  public void setBrand_idIsSet(boolean value) {
    if (!value) {
      this.brand_id = null;
    }
  }

  public String getBrand_name() {
    return this.brand_name;
  }

  public RtbUserInfo setBrand_name(String brand_name) {
    this.brand_name = brand_name;
    return this;
  }

  public void unsetBrand_name() {
    this.brand_name = null;
  }

  /** Returns true if field brand_name is set (has been assigned a value) and false otherwise */
  public boolean isSetBrand_name() {
    return this.brand_name != null;
  }

  public void setBrand_nameIsSet(boolean value) {
    if (!value) {
      this.brand_name = null;
    }
  }

  public int getDevice_height() {
    return this.device_height;
  }

  public RtbUserInfo setDevice_height(int device_height) {
    this.device_height = device_height;
    setDevice_heightIsSet(true);
    return this;
  }

  public void unsetDevice_height() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEVICE_HEIGHT_ISSET_ID);
  }

  /** Returns true if field device_height is set (has been assigned a value) and false otherwise */
  public boolean isSetDevice_height() {
    return EncodingUtils.testBit(__isset_bitfield, __DEVICE_HEIGHT_ISSET_ID);
  }

  public void setDevice_heightIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEVICE_HEIGHT_ISSET_ID, value);
  }

  public int getDevice_width() {
    return this.device_width;
  }

  public RtbUserInfo setDevice_width(int device_width) {
    this.device_width = device_width;
    setDevice_widthIsSet(true);
    return this;
  }

  public void unsetDevice_width() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEVICE_WIDTH_ISSET_ID);
  }

  /** Returns true if field device_width is set (has been assigned a value) and false otherwise */
  public boolean isSetDevice_width() {
    return EncodingUtils.testBit(__isset_bitfield, __DEVICE_WIDTH_ISSET_ID);
  }

  public void setDevice_widthIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEVICE_WIDTH_ISSET_ID, value);
  }

  public String getMac() {
    return this.mac;
  }

  public RtbUserInfo setMac(String mac) {
    this.mac = mac;
    return this;
  }

  public void unsetMac() {
    this.mac = null;
  }

  /** Returns true if field mac is set (has been assigned a value) and false otherwise */
  public boolean isSetMac() {
    return this.mac != null;
  }

  public void setMacIsSet(boolean value) {
    if (!value) {
      this.mac = null;
    }
  }

  public String getImsi() {
    return this.imsi;
  }

  public RtbUserInfo setImsi(String imsi) {
    this.imsi = imsi;
    return this;
  }

  public void unsetImsi() {
    this.imsi = null;
  }

  /** Returns true if field imsi is set (has been assigned a value) and false otherwise */
  public boolean isSetImsi() {
    return this.imsi != null;
  }

  public void setImsiIsSet(boolean value) {
    if (!value) {
      this.imsi = null;
    }
  }

  public String getDip() {
    return this.dip;
  }

  public RtbUserInfo setDip(String dip) {
    this.dip = dip;
    return this;
  }

  public void unsetDip() {
    this.dip = null;
  }

  /** Returns true if field dip is set (has been assigned a value) and false otherwise */
  public boolean isSetDip() {
    return this.dip != null;
  }

  public void setDipIsSet(boolean value) {
    if (!value) {
      this.dip = null;
    }
  }

  public String getDensity() {
    return this.density;
  }

  public RtbUserInfo setDensity(String density) {
    this.density = density;
    return this;
  }

  public void unsetDensity() {
    this.density = null;
  }

  /** Returns true if field density is set (has been assigned a value) and false otherwise */
  public boolean isSetDensity() {
    return this.density != null;
  }

  public void setDensityIsSet(boolean value) {
    if (!value) {
      this.density = null;
    }
  }

  public String getCity_name() {
    return this.city_name;
  }

  public RtbUserInfo setCity_name(String city_name) {
    this.city_name = city_name;
    return this;
  }

  public void unsetCity_name() {
    this.city_name = null;
  }

  /** Returns true if field city_name is set (has been assigned a value) and false otherwise */
  public boolean isSetCity_name() {
    return this.city_name != null;
  }

  public void setCity_nameIsSet(boolean value) {
    if (!value) {
      this.city_name = null;
    }
  }

  public int getLac() {
    return this.lac;
  }

  public RtbUserInfo setLac(int lac) {
    this.lac = lac;
    setLacIsSet(true);
    return this;
  }

  public void unsetLac() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LAC_ISSET_ID);
  }

  /** Returns true if field lac is set (has been assigned a value) and false otherwise */
  public boolean isSetLac() {
    return EncodingUtils.testBit(__isset_bitfield, __LAC_ISSET_ID);
  }

  public void setLacIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LAC_ISSET_ID, value);
  }

  public int getCid() {
    return this.cid;
  }

  public RtbUserInfo setCid(int cid) {
    this.cid = cid;
    setCidIsSet(true);
    return this;
  }

  public void unsetCid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CID_ISSET_ID);
  }

  /** Returns true if field cid is set (has been assigned a value) and false otherwise */
  public boolean isSetCid() {
    return EncodingUtils.testBit(__isset_bitfield, __CID_ISSET_ID);
  }

  public void setCidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CID_ISSET_ID, value);
  }

  public String getOs_api_level() {
    return this.os_api_level;
  }

  public RtbUserInfo setOs_api_level(String os_api_level) {
    this.os_api_level = os_api_level;
    return this;
  }

  public void unsetOs_api_level() {
    this.os_api_level = null;
  }

  /** Returns true if field os_api_level is set (has been assigned a value) and false otherwise */
  public boolean isSetOs_api_level() {
    return this.os_api_level != null;
  }

  public void setOs_api_levelIsSet(boolean value) {
    if (!value) {
      this.os_api_level = null;
    }
  }

  public String getSn() {
    return this.sn;
  }

  public RtbUserInfo setSn(String sn) {
    this.sn = sn;
    return this;
  }

  public void unsetSn() {
    this.sn = null;
  }

  /** Returns true if field sn is set (has been assigned a value) and false otherwise */
  public boolean isSetSn() {
    return this.sn != null;
  }

  public void setSnIsSet(boolean value) {
    if (!value) {
      this.sn = null;
    }
  }

  public int getTagSize() {
    return (this.tag == null) ? 0 : this.tag.size();
  }

  public void putToTag(String key, List<String> val) {
    if (this.tag == null) {
      this.tag = new HashMap<String,List<String>>();
    }
    this.tag.put(key, val);
  }

  public Map<String,List<String>> getTag() {
    return this.tag;
  }

  public RtbUserInfo setTag(Map<String,List<String>> tag) {
    this.tag = tag;
    return this;
  }

  public void unsetTag() {
    this.tag = null;
  }

  /** Returns true if field tag is set (has been assigned a value) and false otherwise */
  public boolean isSetTag() {
    return this.tag != null;
  }

  public void setTagIsSet(boolean value) {
    if (!value) {
      this.tag = null;
    }
  }

  public int getDev_price_level() {
    return this.dev_price_level;
  }

  public RtbUserInfo setDev_price_level(int dev_price_level) {
    this.dev_price_level = dev_price_level;
    setDev_price_levelIsSet(true);
    return this;
  }

  public void unsetDev_price_level() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEV_PRICE_LEVEL_ISSET_ID);
  }

  /** Returns true if field dev_price_level is set (has been assigned a value) and false otherwise */
  public boolean isSetDev_price_level() {
    return EncodingUtils.testBit(__isset_bitfield, __DEV_PRICE_LEVEL_ISSET_ID);
  }

  public void setDev_price_levelIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEV_PRICE_LEVEL_ISSET_ID, value);
  }

  public String getApp() {
    return this.app;
  }

  public RtbUserInfo setApp(String app) {
    this.app = app;
    return this;
  }

  public void unsetApp() {
    this.app = null;
  }

  /** Returns true if field app is set (has been assigned a value) and false otherwise */
  public boolean isSetApp() {
    return this.app != null;
  }

  public void setAppIsSet(boolean value) {
    if (!value) {
      this.app = null;
    }
  }

  public String getType() {
    return this.type;
  }

  public RtbUserInfo setType(String type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public String getVersion() {
    return this.version;
  }

  public RtbUserInfo setVersion(String version) {
    this.version = version;
    return this;
  }

  public void unsetVersion() {
    this.version = null;
  }

  /** Returns true if field version is set (has been assigned a value) and false otherwise */
  public boolean isSetVersion() {
    return this.version != null;
  }

  public void setVersionIsSet(boolean value) {
    if (!value) {
      this.version = null;
    }
  }

  public int getResult_num() {
    return this.result_num;
  }

  public RtbUserInfo setResult_num(int result_num) {
    this.result_num = result_num;
    setResult_numIsSet(true);
    return this;
  }

  public void unsetResult_num() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RESULT_NUM_ISSET_ID);
  }

  /** Returns true if field result_num is set (has been assigned a value) and false otherwise */
  public boolean isSetResult_num() {
    return EncodingUtils.testBit(__isset_bitfield, __RESULT_NUM_ISSET_ID);
  }

  public void setResult_numIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RESULT_NUM_ISSET_ID, value);
  }

  public String getChannel() {
    return this.channel;
  }

  public RtbUserInfo setChannel(String channel) {
    this.channel = channel;
    return this;
  }

  public void unsetChannel() {
    this.channel = null;
  }

  /** Returns true if field channel is set (has been assigned a value) and false otherwise */
  public boolean isSetChannel() {
    return this.channel != null;
  }

  public void setChannelIsSet(boolean value) {
    if (!value) {
      this.channel = null;
    }
  }

  public String getNet() {
    return this.net;
  }

  public RtbUserInfo setNet(String net) {
    this.net = net;
    return this;
  }

  public void unsetNet() {
    this.net = null;
  }

  /** Returns true if field net is set (has been assigned a value) and false otherwise */
  public boolean isSetNet() {
    return this.net != null;
  }

  public void setNetIsSet(boolean value) {
    if (!value) {
      this.net = null;
    }
  }

  public String getHash() {
    return this.hash;
  }

  public RtbUserInfo setHash(String hash) {
    this.hash = hash;
    return this;
  }

  public void unsetHash() {
    this.hash = null;
  }

  /** Returns true if field hash is set (has been assigned a value) and false otherwise */
  public boolean isSetHash() {
    return this.hash != null;
  }

  public void setHashIsSet(boolean value) {
    if (!value) {
      this.hash = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case IMEI:
      if (value == null) {
        unsetImei();
      } else {
        setImei((String)value);
      }
      break;

    case OS:
      if (value == null) {
        unsetOs();
      } else {
        setOs((String)value);
      }
      break;

    case OSVERSION:
      if (value == null) {
        unsetOsversion();
      } else {
        setOsversion((String)value);
      }
      break;

    case PHONEMODEL:
      if (value == null) {
        unsetPhonemodel();
      } else {
        setPhonemodel((String)value);
      }
      break;

    case MOBILE:
      if (value == null) {
        unsetMobile();
      } else {
        setMobile((String)value);
      }
      break;

    case CLIENT_IP:
      if (value == null) {
        unsetClient_ip();
      } else {
        setClient_ip((String)value);
      }
      break;

    case CITY:
      if (value == null) {
        unsetCity();
      } else {
        setCity((String)value);
      }
      break;

    case LON:
      if (value == null) {
        unsetLon();
      } else {
        setLon((String)value);
      }
      break;

    case LAT:
      if (value == null) {
        unsetLat();
      } else {
        setLat((String)value);
      }
      break;

    case UA:
      if (value == null) {
        unsetUa();
      } else {
        setUa((String)value);
      }
      break;

    case AAID:
      if (value == null) {
        unsetAaid();
      } else {
        setAaid((String)value);
      }
      break;

    case ADID:
      if (value == null) {
        unsetAdid();
      } else {
        setAdid((String)value);
      }
      break;

    case IDFA:
      if (value == null) {
        unsetIdfa();
      } else {
        setIdfa((String)value);
      }
      break;

    case BRAND_ID:
      if (value == null) {
        unsetBrand_id();
      } else {
        setBrand_id((String)value);
      }
      break;

    case BRAND_NAME:
      if (value == null) {
        unsetBrand_name();
      } else {
        setBrand_name((String)value);
      }
      break;

    case DEVICE_HEIGHT:
      if (value == null) {
        unsetDevice_height();
      } else {
        setDevice_height((Integer)value);
      }
      break;

    case DEVICE_WIDTH:
      if (value == null) {
        unsetDevice_width();
      } else {
        setDevice_width((Integer)value);
      }
      break;

    case MAC:
      if (value == null) {
        unsetMac();
      } else {
        setMac((String)value);
      }
      break;

    case IMSI:
      if (value == null) {
        unsetImsi();
      } else {
        setImsi((String)value);
      }
      break;

    case DIP:
      if (value == null) {
        unsetDip();
      } else {
        setDip((String)value);
      }
      break;

    case DENSITY:
      if (value == null) {
        unsetDensity();
      } else {
        setDensity((String)value);
      }
      break;

    case CITY_NAME:
      if (value == null) {
        unsetCity_name();
      } else {
        setCity_name((String)value);
      }
      break;

    case LAC:
      if (value == null) {
        unsetLac();
      } else {
        setLac((Integer)value);
      }
      break;

    case CID:
      if (value == null) {
        unsetCid();
      } else {
        setCid((Integer)value);
      }
      break;

    case OS_API_LEVEL:
      if (value == null) {
        unsetOs_api_level();
      } else {
        setOs_api_level((String)value);
      }
      break;

    case SN:
      if (value == null) {
        unsetSn();
      } else {
        setSn((String)value);
      }
      break;

    case TAG:
      if (value == null) {
        unsetTag();
      } else {
        setTag((Map<String,List<String>>)value);
      }
      break;

    case DEV_PRICE_LEVEL:
      if (value == null) {
        unsetDev_price_level();
      } else {
        setDev_price_level((Integer)value);
      }
      break;

    case APP:
      if (value == null) {
        unsetApp();
      } else {
        setApp((String)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((String)value);
      }
      break;

    case VERSION:
      if (value == null) {
        unsetVersion();
      } else {
        setVersion((String)value);
      }
      break;

    case RESULT_NUM:
      if (value == null) {
        unsetResult_num();
      } else {
        setResult_num((Integer)value);
      }
      break;

    case CHANNEL:
      if (value == null) {
        unsetChannel();
      } else {
        setChannel((String)value);
      }
      break;

    case NET:
      if (value == null) {
        unsetNet();
      } else {
        setNet((String)value);
      }
      break;

    case HASH:
      if (value == null) {
        unsetHash();
      } else {
        setHash((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case IMEI:
      return getImei();

    case OS:
      return getOs();

    case OSVERSION:
      return getOsversion();

    case PHONEMODEL:
      return getPhonemodel();

    case MOBILE:
      return getMobile();

    case CLIENT_IP:
      return getClient_ip();

    case CITY:
      return getCity();

    case LON:
      return getLon();

    case LAT:
      return getLat();

    case UA:
      return getUa();

    case AAID:
      return getAaid();

    case ADID:
      return getAdid();

    case IDFA:
      return getIdfa();

    case BRAND_ID:
      return getBrand_id();

    case BRAND_NAME:
      return getBrand_name();

    case DEVICE_HEIGHT:
      return Integer.valueOf(getDevice_height());

    case DEVICE_WIDTH:
      return Integer.valueOf(getDevice_width());

    case MAC:
      return getMac();

    case IMSI:
      return getImsi();

    case DIP:
      return getDip();

    case DENSITY:
      return getDensity();

    case CITY_NAME:
      return getCity_name();

    case LAC:
      return Integer.valueOf(getLac());

    case CID:
      return Integer.valueOf(getCid());

    case OS_API_LEVEL:
      return getOs_api_level();

    case SN:
      return getSn();

    case TAG:
      return getTag();

    case DEV_PRICE_LEVEL:
      return Integer.valueOf(getDev_price_level());

    case APP:
      return getApp();

    case TYPE:
      return getType();

    case VERSION:
      return getVersion();

    case RESULT_NUM:
      return Integer.valueOf(getResult_num());

    case CHANNEL:
      return getChannel();

    case NET:
      return getNet();

    case HASH:
      return getHash();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case IMEI:
      return isSetImei();
    case OS:
      return isSetOs();
    case OSVERSION:
      return isSetOsversion();
    case PHONEMODEL:
      return isSetPhonemodel();
    case MOBILE:
      return isSetMobile();
    case CLIENT_IP:
      return isSetClient_ip();
    case CITY:
      return isSetCity();
    case LON:
      return isSetLon();
    case LAT:
      return isSetLat();
    case UA:
      return isSetUa();
    case AAID:
      return isSetAaid();
    case ADID:
      return isSetAdid();
    case IDFA:
      return isSetIdfa();
    case BRAND_ID:
      return isSetBrand_id();
    case BRAND_NAME:
      return isSetBrand_name();
    case DEVICE_HEIGHT:
      return isSetDevice_height();
    case DEVICE_WIDTH:
      return isSetDevice_width();
    case MAC:
      return isSetMac();
    case IMSI:
      return isSetImsi();
    case DIP:
      return isSetDip();
    case DENSITY:
      return isSetDensity();
    case CITY_NAME:
      return isSetCity_name();
    case LAC:
      return isSetLac();
    case CID:
      return isSetCid();
    case OS_API_LEVEL:
      return isSetOs_api_level();
    case SN:
      return isSetSn();
    case TAG:
      return isSetTag();
    case DEV_PRICE_LEVEL:
      return isSetDev_price_level();
    case APP:
      return isSetApp();
    case TYPE:
      return isSetType();
    case VERSION:
      return isSetVersion();
    case RESULT_NUM:
      return isSetResult_num();
    case CHANNEL:
      return isSetChannel();
    case NET:
      return isSetNet();
    case HASH:
      return isSetHash();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RtbUserInfo)
      return this.equals((RtbUserInfo)that);
    return false;
  }

  public boolean equals(RtbUserInfo that) {
    if (that == null)
      return false;

    boolean this_present_imei = true && this.isSetImei();
    boolean that_present_imei = true && that.isSetImei();
    if (this_present_imei || that_present_imei) {
      if (!(this_present_imei && that_present_imei))
        return false;
      if (!this.imei.equals(that.imei))
        return false;
    }

    boolean this_present_os = true && this.isSetOs();
    boolean that_present_os = true && that.isSetOs();
    if (this_present_os || that_present_os) {
      if (!(this_present_os && that_present_os))
        return false;
      if (!this.os.equals(that.os))
        return false;
    }

    boolean this_present_osversion = true && this.isSetOsversion();
    boolean that_present_osversion = true && that.isSetOsversion();
    if (this_present_osversion || that_present_osversion) {
      if (!(this_present_osversion && that_present_osversion))
        return false;
      if (!this.osversion.equals(that.osversion))
        return false;
    }

    boolean this_present_phonemodel = true && this.isSetPhonemodel();
    boolean that_present_phonemodel = true && that.isSetPhonemodel();
    if (this_present_phonemodel || that_present_phonemodel) {
      if (!(this_present_phonemodel && that_present_phonemodel))
        return false;
      if (!this.phonemodel.equals(that.phonemodel))
        return false;
    }

    boolean this_present_mobile = true && this.isSetMobile();
    boolean that_present_mobile = true && that.isSetMobile();
    if (this_present_mobile || that_present_mobile) {
      if (!(this_present_mobile && that_present_mobile))
        return false;
      if (!this.mobile.equals(that.mobile))
        return false;
    }

    boolean this_present_client_ip = true && this.isSetClient_ip();
    boolean that_present_client_ip = true && that.isSetClient_ip();
    if (this_present_client_ip || that_present_client_ip) {
      if (!(this_present_client_ip && that_present_client_ip))
        return false;
      if (!this.client_ip.equals(that.client_ip))
        return false;
    }

    boolean this_present_city = true && this.isSetCity();
    boolean that_present_city = true && that.isSetCity();
    if (this_present_city || that_present_city) {
      if (!(this_present_city && that_present_city))
        return false;
      if (!this.city.equals(that.city))
        return false;
    }

    boolean this_present_lon = true && this.isSetLon();
    boolean that_present_lon = true && that.isSetLon();
    if (this_present_lon || that_present_lon) {
      if (!(this_present_lon && that_present_lon))
        return false;
      if (!this.lon.equals(that.lon))
        return false;
    }

    boolean this_present_lat = true && this.isSetLat();
    boolean that_present_lat = true && that.isSetLat();
    if (this_present_lat || that_present_lat) {
      if (!(this_present_lat && that_present_lat))
        return false;
      if (!this.lat.equals(that.lat))
        return false;
    }

    boolean this_present_ua = true && this.isSetUa();
    boolean that_present_ua = true && that.isSetUa();
    if (this_present_ua || that_present_ua) {
      if (!(this_present_ua && that_present_ua))
        return false;
      if (!this.ua.equals(that.ua))
        return false;
    }

    boolean this_present_aaid = true && this.isSetAaid();
    boolean that_present_aaid = true && that.isSetAaid();
    if (this_present_aaid || that_present_aaid) {
      if (!(this_present_aaid && that_present_aaid))
        return false;
      if (!this.aaid.equals(that.aaid))
        return false;
    }

    boolean this_present_adid = true && this.isSetAdid();
    boolean that_present_adid = true && that.isSetAdid();
    if (this_present_adid || that_present_adid) {
      if (!(this_present_adid && that_present_adid))
        return false;
      if (!this.adid.equals(that.adid))
        return false;
    }

    boolean this_present_idfa = true && this.isSetIdfa();
    boolean that_present_idfa = true && that.isSetIdfa();
    if (this_present_idfa || that_present_idfa) {
      if (!(this_present_idfa && that_present_idfa))
        return false;
      if (!this.idfa.equals(that.idfa))
        return false;
    }

    boolean this_present_brand_id = true && this.isSetBrand_id();
    boolean that_present_brand_id = true && that.isSetBrand_id();
    if (this_present_brand_id || that_present_brand_id) {
      if (!(this_present_brand_id && that_present_brand_id))
        return false;
      if (!this.brand_id.equals(that.brand_id))
        return false;
    }

    boolean this_present_brand_name = true && this.isSetBrand_name();
    boolean that_present_brand_name = true && that.isSetBrand_name();
    if (this_present_brand_name || that_present_brand_name) {
      if (!(this_present_brand_name && that_present_brand_name))
        return false;
      if (!this.brand_name.equals(that.brand_name))
        return false;
    }

    boolean this_present_device_height = true && this.isSetDevice_height();
    boolean that_present_device_height = true && that.isSetDevice_height();
    if (this_present_device_height || that_present_device_height) {
      if (!(this_present_device_height && that_present_device_height))
        return false;
      if (this.device_height != that.device_height)
        return false;
    }

    boolean this_present_device_width = true && this.isSetDevice_width();
    boolean that_present_device_width = true && that.isSetDevice_width();
    if (this_present_device_width || that_present_device_width) {
      if (!(this_present_device_width && that_present_device_width))
        return false;
      if (this.device_width != that.device_width)
        return false;
    }

    boolean this_present_mac = true && this.isSetMac();
    boolean that_present_mac = true && that.isSetMac();
    if (this_present_mac || that_present_mac) {
      if (!(this_present_mac && that_present_mac))
        return false;
      if (!this.mac.equals(that.mac))
        return false;
    }

    boolean this_present_imsi = true && this.isSetImsi();
    boolean that_present_imsi = true && that.isSetImsi();
    if (this_present_imsi || that_present_imsi) {
      if (!(this_present_imsi && that_present_imsi))
        return false;
      if (!this.imsi.equals(that.imsi))
        return false;
    }

    boolean this_present_dip = true && this.isSetDip();
    boolean that_present_dip = true && that.isSetDip();
    if (this_present_dip || that_present_dip) {
      if (!(this_present_dip && that_present_dip))
        return false;
      if (!this.dip.equals(that.dip))
        return false;
    }

    boolean this_present_density = true && this.isSetDensity();
    boolean that_present_density = true && that.isSetDensity();
    if (this_present_density || that_present_density) {
      if (!(this_present_density && that_present_density))
        return false;
      if (!this.density.equals(that.density))
        return false;
    }

    boolean this_present_city_name = true && this.isSetCity_name();
    boolean that_present_city_name = true && that.isSetCity_name();
    if (this_present_city_name || that_present_city_name) {
      if (!(this_present_city_name && that_present_city_name))
        return false;
      if (!this.city_name.equals(that.city_name))
        return false;
    }

    boolean this_present_lac = true && this.isSetLac();
    boolean that_present_lac = true && that.isSetLac();
    if (this_present_lac || that_present_lac) {
      if (!(this_present_lac && that_present_lac))
        return false;
      if (this.lac != that.lac)
        return false;
    }

    boolean this_present_cid = true && this.isSetCid();
    boolean that_present_cid = true && that.isSetCid();
    if (this_present_cid || that_present_cid) {
      if (!(this_present_cid && that_present_cid))
        return false;
      if (this.cid != that.cid)
        return false;
    }

    boolean this_present_os_api_level = true && this.isSetOs_api_level();
    boolean that_present_os_api_level = true && that.isSetOs_api_level();
    if (this_present_os_api_level || that_present_os_api_level) {
      if (!(this_present_os_api_level && that_present_os_api_level))
        return false;
      if (!this.os_api_level.equals(that.os_api_level))
        return false;
    }

    boolean this_present_sn = true && this.isSetSn();
    boolean that_present_sn = true && that.isSetSn();
    if (this_present_sn || that_present_sn) {
      if (!(this_present_sn && that_present_sn))
        return false;
      if (!this.sn.equals(that.sn))
        return false;
    }

    boolean this_present_tag = true && this.isSetTag();
    boolean that_present_tag = true && that.isSetTag();
    if (this_present_tag || that_present_tag) {
      if (!(this_present_tag && that_present_tag))
        return false;
      if (!this.tag.equals(that.tag))
        return false;
    }

    boolean this_present_dev_price_level = true && this.isSetDev_price_level();
    boolean that_present_dev_price_level = true && that.isSetDev_price_level();
    if (this_present_dev_price_level || that_present_dev_price_level) {
      if (!(this_present_dev_price_level && that_present_dev_price_level))
        return false;
      if (this.dev_price_level != that.dev_price_level)
        return false;
    }

    boolean this_present_app = true && this.isSetApp();
    boolean that_present_app = true && that.isSetApp();
    if (this_present_app || that_present_app) {
      if (!(this_present_app && that_present_app))
        return false;
      if (!this.app.equals(that.app))
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_version = true && this.isSetVersion();
    boolean that_present_version = true && that.isSetVersion();
    if (this_present_version || that_present_version) {
      if (!(this_present_version && that_present_version))
        return false;
      if (!this.version.equals(that.version))
        return false;
    }

    boolean this_present_result_num = true && this.isSetResult_num();
    boolean that_present_result_num = true && that.isSetResult_num();
    if (this_present_result_num || that_present_result_num) {
      if (!(this_present_result_num && that_present_result_num))
        return false;
      if (this.result_num != that.result_num)
        return false;
    }

    boolean this_present_channel = true && this.isSetChannel();
    boolean that_present_channel = true && that.isSetChannel();
    if (this_present_channel || that_present_channel) {
      if (!(this_present_channel && that_present_channel))
        return false;
      if (!this.channel.equals(that.channel))
        return false;
    }

    boolean this_present_net = true && this.isSetNet();
    boolean that_present_net = true && that.isSetNet();
    if (this_present_net || that_present_net) {
      if (!(this_present_net && that_present_net))
        return false;
      if (!this.net.equals(that.net))
        return false;
    }

    boolean this_present_hash = true && this.isSetHash();
    boolean that_present_hash = true && that.isSetHash();
    if (this_present_hash || that_present_hash) {
      if (!(this_present_hash && that_present_hash))
        return false;
      if (!this.hash.equals(that.hash))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_imei = true && (isSetImei());
    list.add(present_imei);
    if (present_imei)
      list.add(imei);

    boolean present_os = true && (isSetOs());
    list.add(present_os);
    if (present_os)
      list.add(os);

    boolean present_osversion = true && (isSetOsversion());
    list.add(present_osversion);
    if (present_osversion)
      list.add(osversion);

    boolean present_phonemodel = true && (isSetPhonemodel());
    list.add(present_phonemodel);
    if (present_phonemodel)
      list.add(phonemodel);

    boolean present_mobile = true && (isSetMobile());
    list.add(present_mobile);
    if (present_mobile)
      list.add(mobile);

    boolean present_client_ip = true && (isSetClient_ip());
    list.add(present_client_ip);
    if (present_client_ip)
      list.add(client_ip);

    boolean present_city = true && (isSetCity());
    list.add(present_city);
    if (present_city)
      list.add(city);

    boolean present_lon = true && (isSetLon());
    list.add(present_lon);
    if (present_lon)
      list.add(lon);

    boolean present_lat = true && (isSetLat());
    list.add(present_lat);
    if (present_lat)
      list.add(lat);

    boolean present_ua = true && (isSetUa());
    list.add(present_ua);
    if (present_ua)
      list.add(ua);

    boolean present_aaid = true && (isSetAaid());
    list.add(present_aaid);
    if (present_aaid)
      list.add(aaid);

    boolean present_adid = true && (isSetAdid());
    list.add(present_adid);
    if (present_adid)
      list.add(adid);

    boolean present_idfa = true && (isSetIdfa());
    list.add(present_idfa);
    if (present_idfa)
      list.add(idfa);

    boolean present_brand_id = true && (isSetBrand_id());
    list.add(present_brand_id);
    if (present_brand_id)
      list.add(brand_id);

    boolean present_brand_name = true && (isSetBrand_name());
    list.add(present_brand_name);
    if (present_brand_name)
      list.add(brand_name);

    boolean present_device_height = true && (isSetDevice_height());
    list.add(present_device_height);
    if (present_device_height)
      list.add(device_height);

    boolean present_device_width = true && (isSetDevice_width());
    list.add(present_device_width);
    if (present_device_width)
      list.add(device_width);

    boolean present_mac = true && (isSetMac());
    list.add(present_mac);
    if (present_mac)
      list.add(mac);

    boolean present_imsi = true && (isSetImsi());
    list.add(present_imsi);
    if (present_imsi)
      list.add(imsi);

    boolean present_dip = true && (isSetDip());
    list.add(present_dip);
    if (present_dip)
      list.add(dip);

    boolean present_density = true && (isSetDensity());
    list.add(present_density);
    if (present_density)
      list.add(density);

    boolean present_city_name = true && (isSetCity_name());
    list.add(present_city_name);
    if (present_city_name)
      list.add(city_name);

    boolean present_lac = true && (isSetLac());
    list.add(present_lac);
    if (present_lac)
      list.add(lac);

    boolean present_cid = true && (isSetCid());
    list.add(present_cid);
    if (present_cid)
      list.add(cid);

    boolean present_os_api_level = true && (isSetOs_api_level());
    list.add(present_os_api_level);
    if (present_os_api_level)
      list.add(os_api_level);

    boolean present_sn = true && (isSetSn());
    list.add(present_sn);
    if (present_sn)
      list.add(sn);

    boolean present_tag = true && (isSetTag());
    list.add(present_tag);
    if (present_tag)
      list.add(tag);

    boolean present_dev_price_level = true && (isSetDev_price_level());
    list.add(present_dev_price_level);
    if (present_dev_price_level)
      list.add(dev_price_level);

    boolean present_app = true && (isSetApp());
    list.add(present_app);
    if (present_app)
      list.add(app);

    boolean present_type = true && (isSetType());
    list.add(present_type);
    if (present_type)
      list.add(type);

    boolean present_version = true && (isSetVersion());
    list.add(present_version);
    if (present_version)
      list.add(version);

    boolean present_result_num = true && (isSetResult_num());
    list.add(present_result_num);
    if (present_result_num)
      list.add(result_num);

    boolean present_channel = true && (isSetChannel());
    list.add(present_channel);
    if (present_channel)
      list.add(channel);

    boolean present_net = true && (isSetNet());
    list.add(present_net);
    if (present_net)
      list.add(net);

    boolean present_hash = true && (isSetHash());
    list.add(present_hash);
    if (present_hash)
      list.add(hash);

    return list.hashCode();
  }

  @Override
  public int compareTo(RtbUserInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetImei()).compareTo(other.isSetImei());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImei()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.imei, other.imei);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOs()).compareTo(other.isSetOs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.os, other.os);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOsversion()).compareTo(other.isSetOsversion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOsversion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.osversion, other.osversion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPhonemodel()).compareTo(other.isSetPhonemodel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPhonemodel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.phonemodel, other.phonemodel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMobile()).compareTo(other.isSetMobile());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMobile()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mobile, other.mobile);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClient_ip()).compareTo(other.isSetClient_ip());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClient_ip()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.client_ip, other.client_ip);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCity()).compareTo(other.isSetCity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.city, other.city);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLon()).compareTo(other.isSetLon());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLon()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lon, other.lon);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLat()).compareTo(other.isSetLat());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLat()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lat, other.lat);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUa()).compareTo(other.isSetUa());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUa()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ua, other.ua);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAaid()).compareTo(other.isSetAaid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAaid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aaid, other.aaid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAdid()).compareTo(other.isSetAdid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAdid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.adid, other.adid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIdfa()).compareTo(other.isSetIdfa());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIdfa()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.idfa, other.idfa);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBrand_id()).compareTo(other.isSetBrand_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBrand_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.brand_id, other.brand_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBrand_name()).compareTo(other.isSetBrand_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBrand_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.brand_name, other.brand_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDevice_height()).compareTo(other.isSetDevice_height());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDevice_height()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.device_height, other.device_height);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDevice_width()).compareTo(other.isSetDevice_width());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDevice_width()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.device_width, other.device_width);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMac()).compareTo(other.isSetMac());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMac()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mac, other.mac);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetImsi()).compareTo(other.isSetImsi());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImsi()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.imsi, other.imsi);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDip()).compareTo(other.isSetDip());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDip()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dip, other.dip);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDensity()).compareTo(other.isSetDensity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDensity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.density, other.density);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCity_name()).compareTo(other.isSetCity_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCity_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.city_name, other.city_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLac()).compareTo(other.isSetLac());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLac()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lac, other.lac);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCid()).compareTo(other.isSetCid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cid, other.cid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOs_api_level()).compareTo(other.isSetOs_api_level());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOs_api_level()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.os_api_level, other.os_api_level);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSn()).compareTo(other.isSetSn());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSn()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sn, other.sn);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTag()).compareTo(other.isSetTag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tag, other.tag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDev_price_level()).compareTo(other.isSetDev_price_level());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDev_price_level()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dev_price_level, other.dev_price_level);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetApp()).compareTo(other.isSetApp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.app, other.app);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVersion()).compareTo(other.isSetVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version, other.version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResult_num()).compareTo(other.isSetResult_num());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResult_num()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.result_num, other.result_num);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChannel()).compareTo(other.isSetChannel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChannel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channel, other.channel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNet()).compareTo(other.isSetNet());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNet()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.net, other.net);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHash()).compareTo(other.isSetHash());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHash()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hash, other.hash);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("RtbUserInfo(");
    boolean first = true;

    if (isSetImei()) {
      sb.append("imei:");
      if (this.imei == null) {
        sb.append("null");
      } else {
        sb.append(this.imei);
      }
      first = false;
    }
    if (isSetOs()) {
      if (!first) sb.append(", ");
      sb.append("os:");
      if (this.os == null) {
        sb.append("null");
      } else {
        sb.append(this.os);
      }
      first = false;
    }
    if (isSetOsversion()) {
      if (!first) sb.append(", ");
      sb.append("osversion:");
      if (this.osversion == null) {
        sb.append("null");
      } else {
        sb.append(this.osversion);
      }
      first = false;
    }
    if (isSetPhonemodel()) {
      if (!first) sb.append(", ");
      sb.append("phonemodel:");
      if (this.phonemodel == null) {
        sb.append("null");
      } else {
        sb.append(this.phonemodel);
      }
      first = false;
    }
    if (isSetMobile()) {
      if (!first) sb.append(", ");
      sb.append("mobile:");
      if (this.mobile == null) {
        sb.append("null");
      } else {
        sb.append(this.mobile);
      }
      first = false;
    }
    if (isSetClient_ip()) {
      if (!first) sb.append(", ");
      sb.append("client_ip:");
      if (this.client_ip == null) {
        sb.append("null");
      } else {
        sb.append(this.client_ip);
      }
      first = false;
    }
    if (isSetCity()) {
      if (!first) sb.append(", ");
      sb.append("city:");
      if (this.city == null) {
        sb.append("null");
      } else {
        sb.append(this.city);
      }
      first = false;
    }
    if (isSetLon()) {
      if (!first) sb.append(", ");
      sb.append("lon:");
      if (this.lon == null) {
        sb.append("null");
      } else {
        sb.append(this.lon);
      }
      first = false;
    }
    if (isSetLat()) {
      if (!first) sb.append(", ");
      sb.append("lat:");
      if (this.lat == null) {
        sb.append("null");
      } else {
        sb.append(this.lat);
      }
      first = false;
    }
    if (isSetUa()) {
      if (!first) sb.append(", ");
      sb.append("ua:");
      if (this.ua == null) {
        sb.append("null");
      } else {
        sb.append(this.ua);
      }
      first = false;
    }
    if (isSetAaid()) {
      if (!first) sb.append(", ");
      sb.append("aaid:");
      if (this.aaid == null) {
        sb.append("null");
      } else {
        sb.append(this.aaid);
      }
      first = false;
    }
    if (isSetAdid()) {
      if (!first) sb.append(", ");
      sb.append("adid:");
      if (this.adid == null) {
        sb.append("null");
      } else {
        sb.append(this.adid);
      }
      first = false;
    }
    if (isSetIdfa()) {
      if (!first) sb.append(", ");
      sb.append("idfa:");
      if (this.idfa == null) {
        sb.append("null");
      } else {
        sb.append(this.idfa);
      }
      first = false;
    }
    if (isSetBrand_id()) {
      if (!first) sb.append(", ");
      sb.append("brand_id:");
      if (this.brand_id == null) {
        sb.append("null");
      } else {
        sb.append(this.brand_id);
      }
      first = false;
    }
    if (isSetBrand_name()) {
      if (!first) sb.append(", ");
      sb.append("brand_name:");
      if (this.brand_name == null) {
        sb.append("null");
      } else {
        sb.append(this.brand_name);
      }
      first = false;
    }
    if (isSetDevice_height()) {
      if (!first) sb.append(", ");
      sb.append("device_height:");
      sb.append(this.device_height);
      first = false;
    }
    if (isSetDevice_width()) {
      if (!first) sb.append(", ");
      sb.append("device_width:");
      sb.append(this.device_width);
      first = false;
    }
    if (isSetMac()) {
      if (!first) sb.append(", ");
      sb.append("mac:");
      if (this.mac == null) {
        sb.append("null");
      } else {
        sb.append(this.mac);
      }
      first = false;
    }
    if (isSetImsi()) {
      if (!first) sb.append(", ");
      sb.append("imsi:");
      if (this.imsi == null) {
        sb.append("null");
      } else {
        sb.append(this.imsi);
      }
      first = false;
    }
    if (isSetDip()) {
      if (!first) sb.append(", ");
      sb.append("dip:");
      if (this.dip == null) {
        sb.append("null");
      } else {
        sb.append(this.dip);
      }
      first = false;
    }
    if (isSetDensity()) {
      if (!first) sb.append(", ");
      sb.append("density:");
      if (this.density == null) {
        sb.append("null");
      } else {
        sb.append(this.density);
      }
      first = false;
    }
    if (isSetCity_name()) {
      if (!first) sb.append(", ");
      sb.append("city_name:");
      if (this.city_name == null) {
        sb.append("null");
      } else {
        sb.append(this.city_name);
      }
      first = false;
    }
    if (isSetLac()) {
      if (!first) sb.append(", ");
      sb.append("lac:");
      sb.append(this.lac);
      first = false;
    }
    if (isSetCid()) {
      if (!first) sb.append(", ");
      sb.append("cid:");
      sb.append(this.cid);
      first = false;
    }
    if (isSetOs_api_level()) {
      if (!first) sb.append(", ");
      sb.append("os_api_level:");
      if (this.os_api_level == null) {
        sb.append("null");
      } else {
        sb.append(this.os_api_level);
      }
      first = false;
    }
    if (isSetSn()) {
      if (!first) sb.append(", ");
      sb.append("sn:");
      if (this.sn == null) {
        sb.append("null");
      } else {
        sb.append(this.sn);
      }
      first = false;
    }
    if (isSetTag()) {
      if (!first) sb.append(", ");
      sb.append("tag:");
      if (this.tag == null) {
        sb.append("null");
      } else {
        sb.append(this.tag);
      }
      first = false;
    }
    if (isSetDev_price_level()) {
      if (!first) sb.append(", ");
      sb.append("dev_price_level:");
      sb.append(this.dev_price_level);
      first = false;
    }
    if (isSetApp()) {
      if (!first) sb.append(", ");
      sb.append("app:");
      if (this.app == null) {
        sb.append("null");
      } else {
        sb.append(this.app);
      }
      first = false;
    }
    if (isSetType()) {
      if (!first) sb.append(", ");
      sb.append("type:");
      if (this.type == null) {
        sb.append("null");
      } else {
        sb.append(this.type);
      }
      first = false;
    }
    if (isSetVersion()) {
      if (!first) sb.append(", ");
      sb.append("version:");
      if (this.version == null) {
        sb.append("null");
      } else {
        sb.append(this.version);
      }
      first = false;
    }
    if (isSetResult_num()) {
      if (!first) sb.append(", ");
      sb.append("result_num:");
      sb.append(this.result_num);
      first = false;
    }
    if (isSetChannel()) {
      if (!first) sb.append(", ");
      sb.append("channel:");
      if (this.channel == null) {
        sb.append("null");
      } else {
        sb.append(this.channel);
      }
      first = false;
    }
    if (isSetNet()) {
      if (!first) sb.append(", ");
      sb.append("net:");
      if (this.net == null) {
        sb.append("null");
      } else {
        sb.append(this.net);
      }
      first = false;
    }
    if (isSetHash()) {
      if (!first) sb.append(", ");
      sb.append("hash:");
      if (this.hash == null) {
        sb.append("null");
      } else {
        sb.append(this.hash);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RtbUserInfoStandardSchemeFactory implements SchemeFactory {
    public RtbUserInfoStandardScheme getScheme() {
      return new RtbUserInfoStandardScheme();
    }
  }

  private static class RtbUserInfoStandardScheme extends StandardScheme<RtbUserInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RtbUserInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // IMEI
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.imei = iprot.readString();
              struct.setImeiIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // OS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.os = iprot.readString();
              struct.setOsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // OSVERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.osversion = iprot.readString();
              struct.setOsversionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PHONEMODEL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.phonemodel = iprot.readString();
              struct.setPhonemodelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // MOBILE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mobile = iprot.readString();
              struct.setMobileIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CLIENT_IP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.client_ip = iprot.readString();
              struct.setClient_ipIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CITY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.city = iprot.readString();
              struct.setCityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // LON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lon = iprot.readString();
              struct.setLonIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // LAT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lat = iprot.readString();
              struct.setLatIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // UA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ua = iprot.readString();
              struct.setUaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // AAID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.aaid = iprot.readString();
              struct.setAaidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // ADID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.adid = iprot.readString();
              struct.setAdidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // IDFA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.idfa = iprot.readString();
              struct.setIdfaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // BRAND_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.brand_id = iprot.readString();
              struct.setBrand_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // BRAND_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.brand_name = iprot.readString();
              struct.setBrand_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // DEVICE_HEIGHT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.device_height = iprot.readI32();
              struct.setDevice_heightIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // DEVICE_WIDTH
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.device_width = iprot.readI32();
              struct.setDevice_widthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // MAC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mac = iprot.readString();
              struct.setMacIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // IMSI
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.imsi = iprot.readString();
              struct.setImsiIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // DIP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dip = iprot.readString();
              struct.setDipIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // DENSITY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.density = iprot.readString();
              struct.setDensityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // CITY_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.city_name = iprot.readString();
              struct.setCity_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // LAC
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.lac = iprot.readI32();
              struct.setLacIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // CID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.cid = iprot.readI32();
              struct.setCidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // OS_API_LEVEL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.os_api_level = iprot.readString();
              struct.setOs_api_levelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // SN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sn = iprot.readString();
              struct.setSnIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // TAG
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                struct.tag = new HashMap<String,List<String>>(2*_map0.size);
                String _key1;
                List<String> _val2;
                for (int _i3 = 0; _i3 < _map0.size; ++_i3)
                {
                  _key1 = iprot.readString();
                  {
                    org.apache.thrift.protocol.TList _list4 = iprot.readListBegin();
                    _val2 = new ArrayList<String>(_list4.size);
                    String _elem5;
                    for (int _i6 = 0; _i6 < _list4.size; ++_i6)
                    {
                      _elem5 = iprot.readString();
                      _val2.add(_elem5);
                    }
                    iprot.readListEnd();
                  }
                  struct.tag.put(_key1, _val2);
                }
                iprot.readMapEnd();
              }
              struct.setTagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // DEV_PRICE_LEVEL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.dev_price_level = iprot.readI32();
              struct.setDev_price_levelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // APP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.app = iprot.readString();
              struct.setAppIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.type = iprot.readString();
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.version = iprot.readString();
              struct.setVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 32: // RESULT_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.result_num = iprot.readI32();
              struct.setResult_numIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 33: // CHANNEL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.channel = iprot.readString();
              struct.setChannelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 34: // NET
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.net = iprot.readString();
              struct.setNetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 35: // HASH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.hash = iprot.readString();
              struct.setHashIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RtbUserInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.imei != null) {
        if (struct.isSetImei()) {
          oprot.writeFieldBegin(IMEI_FIELD_DESC);
          oprot.writeString(struct.imei);
          oprot.writeFieldEnd();
        }
      }
      if (struct.os != null) {
        if (struct.isSetOs()) {
          oprot.writeFieldBegin(OS_FIELD_DESC);
          oprot.writeString(struct.os);
          oprot.writeFieldEnd();
        }
      }
      if (struct.osversion != null) {
        if (struct.isSetOsversion()) {
          oprot.writeFieldBegin(OSVERSION_FIELD_DESC);
          oprot.writeString(struct.osversion);
          oprot.writeFieldEnd();
        }
      }
      if (struct.phonemodel != null) {
        if (struct.isSetPhonemodel()) {
          oprot.writeFieldBegin(PHONEMODEL_FIELD_DESC);
          oprot.writeString(struct.phonemodel);
          oprot.writeFieldEnd();
        }
      }
      if (struct.mobile != null) {
        if (struct.isSetMobile()) {
          oprot.writeFieldBegin(MOBILE_FIELD_DESC);
          oprot.writeString(struct.mobile);
          oprot.writeFieldEnd();
        }
      }
      if (struct.client_ip != null) {
        if (struct.isSetClient_ip()) {
          oprot.writeFieldBegin(CLIENT_IP_FIELD_DESC);
          oprot.writeString(struct.client_ip);
          oprot.writeFieldEnd();
        }
      }
      if (struct.city != null) {
        if (struct.isSetCity()) {
          oprot.writeFieldBegin(CITY_FIELD_DESC);
          oprot.writeString(struct.city);
          oprot.writeFieldEnd();
        }
      }
      if (struct.lon != null) {
        if (struct.isSetLon()) {
          oprot.writeFieldBegin(LON_FIELD_DESC);
          oprot.writeString(struct.lon);
          oprot.writeFieldEnd();
        }
      }
      if (struct.lat != null) {
        if (struct.isSetLat()) {
          oprot.writeFieldBegin(LAT_FIELD_DESC);
          oprot.writeString(struct.lat);
          oprot.writeFieldEnd();
        }
      }
      if (struct.ua != null) {
        if (struct.isSetUa()) {
          oprot.writeFieldBegin(UA_FIELD_DESC);
          oprot.writeString(struct.ua);
          oprot.writeFieldEnd();
        }
      }
      if (struct.aaid != null) {
        if (struct.isSetAaid()) {
          oprot.writeFieldBegin(AAID_FIELD_DESC);
          oprot.writeString(struct.aaid);
          oprot.writeFieldEnd();
        }
      }
      if (struct.adid != null) {
        if (struct.isSetAdid()) {
          oprot.writeFieldBegin(ADID_FIELD_DESC);
          oprot.writeString(struct.adid);
          oprot.writeFieldEnd();
        }
      }
      if (struct.idfa != null) {
        if (struct.isSetIdfa()) {
          oprot.writeFieldBegin(IDFA_FIELD_DESC);
          oprot.writeString(struct.idfa);
          oprot.writeFieldEnd();
        }
      }
      if (struct.brand_id != null) {
        if (struct.isSetBrand_id()) {
          oprot.writeFieldBegin(BRAND_ID_FIELD_DESC);
          oprot.writeString(struct.brand_id);
          oprot.writeFieldEnd();
        }
      }
      if (struct.brand_name != null) {
        if (struct.isSetBrand_name()) {
          oprot.writeFieldBegin(BRAND_NAME_FIELD_DESC);
          oprot.writeString(struct.brand_name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetDevice_height()) {
        oprot.writeFieldBegin(DEVICE_HEIGHT_FIELD_DESC);
        oprot.writeI32(struct.device_height);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDevice_width()) {
        oprot.writeFieldBegin(DEVICE_WIDTH_FIELD_DESC);
        oprot.writeI32(struct.device_width);
        oprot.writeFieldEnd();
      }
      if (struct.mac != null) {
        if (struct.isSetMac()) {
          oprot.writeFieldBegin(MAC_FIELD_DESC);
          oprot.writeString(struct.mac);
          oprot.writeFieldEnd();
        }
      }
      if (struct.imsi != null) {
        if (struct.isSetImsi()) {
          oprot.writeFieldBegin(IMSI_FIELD_DESC);
          oprot.writeString(struct.imsi);
          oprot.writeFieldEnd();
        }
      }
      if (struct.dip != null) {
        if (struct.isSetDip()) {
          oprot.writeFieldBegin(DIP_FIELD_DESC);
          oprot.writeString(struct.dip);
          oprot.writeFieldEnd();
        }
      }
      if (struct.density != null) {
        if (struct.isSetDensity()) {
          oprot.writeFieldBegin(DENSITY_FIELD_DESC);
          oprot.writeString(struct.density);
          oprot.writeFieldEnd();
        }
      }
      if (struct.city_name != null) {
        if (struct.isSetCity_name()) {
          oprot.writeFieldBegin(CITY_NAME_FIELD_DESC);
          oprot.writeString(struct.city_name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetLac()) {
        oprot.writeFieldBegin(LAC_FIELD_DESC);
        oprot.writeI32(struct.lac);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCid()) {
        oprot.writeFieldBegin(CID_FIELD_DESC);
        oprot.writeI32(struct.cid);
        oprot.writeFieldEnd();
      }
      if (struct.os_api_level != null) {
        if (struct.isSetOs_api_level()) {
          oprot.writeFieldBegin(OS_API_LEVEL_FIELD_DESC);
          oprot.writeString(struct.os_api_level);
          oprot.writeFieldEnd();
        }
      }
      if (struct.sn != null) {
        if (struct.isSetSn()) {
          oprot.writeFieldBegin(SN_FIELD_DESC);
          oprot.writeString(struct.sn);
          oprot.writeFieldEnd();
        }
      }
      if (struct.tag != null) {
        if (struct.isSetTag()) {
          oprot.writeFieldBegin(TAG_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, struct.tag.size()));
            for (Map.Entry<String, List<String>> _iter7 : struct.tag.entrySet())
            {
              oprot.writeString(_iter7.getKey());
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, _iter7.getValue().size()));
                for (String _iter8 : _iter7.getValue())
                {
                  oprot.writeString(_iter8);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetDev_price_level()) {
        oprot.writeFieldBegin(DEV_PRICE_LEVEL_FIELD_DESC);
        oprot.writeI32(struct.dev_price_level);
        oprot.writeFieldEnd();
      }
      if (struct.app != null) {
        if (struct.isSetApp()) {
          oprot.writeFieldBegin(APP_FIELD_DESC);
          oprot.writeString(struct.app);
          oprot.writeFieldEnd();
        }
      }
      if (struct.type != null) {
        if (struct.isSetType()) {
          oprot.writeFieldBegin(TYPE_FIELD_DESC);
          oprot.writeString(struct.type);
          oprot.writeFieldEnd();
        }
      }
      if (struct.version != null) {
        if (struct.isSetVersion()) {
          oprot.writeFieldBegin(VERSION_FIELD_DESC);
          oprot.writeString(struct.version);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetResult_num()) {
        oprot.writeFieldBegin(RESULT_NUM_FIELD_DESC);
        oprot.writeI32(struct.result_num);
        oprot.writeFieldEnd();
      }
      if (struct.channel != null) {
        if (struct.isSetChannel()) {
          oprot.writeFieldBegin(CHANNEL_FIELD_DESC);
          oprot.writeString(struct.channel);
          oprot.writeFieldEnd();
        }
      }
      if (struct.net != null) {
        if (struct.isSetNet()) {
          oprot.writeFieldBegin(NET_FIELD_DESC);
          oprot.writeString(struct.net);
          oprot.writeFieldEnd();
        }
      }
      if (struct.hash != null) {
        if (struct.isSetHash()) {
          oprot.writeFieldBegin(HASH_FIELD_DESC);
          oprot.writeString(struct.hash);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RtbUserInfoTupleSchemeFactory implements SchemeFactory {
    public RtbUserInfoTupleScheme getScheme() {
      return new RtbUserInfoTupleScheme();
    }
  }

  private static class RtbUserInfoTupleScheme extends TupleScheme<RtbUserInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RtbUserInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetImei()) {
        optionals.set(0);
      }
      if (struct.isSetOs()) {
        optionals.set(1);
      }
      if (struct.isSetOsversion()) {
        optionals.set(2);
      }
      if (struct.isSetPhonemodel()) {
        optionals.set(3);
      }
      if (struct.isSetMobile()) {
        optionals.set(4);
      }
      if (struct.isSetClient_ip()) {
        optionals.set(5);
      }
      if (struct.isSetCity()) {
        optionals.set(6);
      }
      if (struct.isSetLon()) {
        optionals.set(7);
      }
      if (struct.isSetLat()) {
        optionals.set(8);
      }
      if (struct.isSetUa()) {
        optionals.set(9);
      }
      if (struct.isSetAaid()) {
        optionals.set(10);
      }
      if (struct.isSetAdid()) {
        optionals.set(11);
      }
      if (struct.isSetIdfa()) {
        optionals.set(12);
      }
      if (struct.isSetBrand_id()) {
        optionals.set(13);
      }
      if (struct.isSetBrand_name()) {
        optionals.set(14);
      }
      if (struct.isSetDevice_height()) {
        optionals.set(15);
      }
      if (struct.isSetDevice_width()) {
        optionals.set(16);
      }
      if (struct.isSetMac()) {
        optionals.set(17);
      }
      if (struct.isSetImsi()) {
        optionals.set(18);
      }
      if (struct.isSetDip()) {
        optionals.set(19);
      }
      if (struct.isSetDensity()) {
        optionals.set(20);
      }
      if (struct.isSetCity_name()) {
        optionals.set(21);
      }
      if (struct.isSetLac()) {
        optionals.set(22);
      }
      if (struct.isSetCid()) {
        optionals.set(23);
      }
      if (struct.isSetOs_api_level()) {
        optionals.set(24);
      }
      if (struct.isSetSn()) {
        optionals.set(25);
      }
      if (struct.isSetTag()) {
        optionals.set(26);
      }
      if (struct.isSetDev_price_level()) {
        optionals.set(27);
      }
      if (struct.isSetApp()) {
        optionals.set(28);
      }
      if (struct.isSetType()) {
        optionals.set(29);
      }
      if (struct.isSetVersion()) {
        optionals.set(30);
      }
      if (struct.isSetResult_num()) {
        optionals.set(31);
      }
      if (struct.isSetChannel()) {
        optionals.set(32);
      }
      if (struct.isSetNet()) {
        optionals.set(33);
      }
      if (struct.isSetHash()) {
        optionals.set(34);
      }
      oprot.writeBitSet(optionals, 35);
      if (struct.isSetImei()) {
        oprot.writeString(struct.imei);
      }
      if (struct.isSetOs()) {
        oprot.writeString(struct.os);
      }
      if (struct.isSetOsversion()) {
        oprot.writeString(struct.osversion);
      }
      if (struct.isSetPhonemodel()) {
        oprot.writeString(struct.phonemodel);
      }
      if (struct.isSetMobile()) {
        oprot.writeString(struct.mobile);
      }
      if (struct.isSetClient_ip()) {
        oprot.writeString(struct.client_ip);
      }
      if (struct.isSetCity()) {
        oprot.writeString(struct.city);
      }
      if (struct.isSetLon()) {
        oprot.writeString(struct.lon);
      }
      if (struct.isSetLat()) {
        oprot.writeString(struct.lat);
      }
      if (struct.isSetUa()) {
        oprot.writeString(struct.ua);
      }
      if (struct.isSetAaid()) {
        oprot.writeString(struct.aaid);
      }
      if (struct.isSetAdid()) {
        oprot.writeString(struct.adid);
      }
      if (struct.isSetIdfa()) {
        oprot.writeString(struct.idfa);
      }
      if (struct.isSetBrand_id()) {
        oprot.writeString(struct.brand_id);
      }
      if (struct.isSetBrand_name()) {
        oprot.writeString(struct.brand_name);
      }
      if (struct.isSetDevice_height()) {
        oprot.writeI32(struct.device_height);
      }
      if (struct.isSetDevice_width()) {
        oprot.writeI32(struct.device_width);
      }
      if (struct.isSetMac()) {
        oprot.writeString(struct.mac);
      }
      if (struct.isSetImsi()) {
        oprot.writeString(struct.imsi);
      }
      if (struct.isSetDip()) {
        oprot.writeString(struct.dip);
      }
      if (struct.isSetDensity()) {
        oprot.writeString(struct.density);
      }
      if (struct.isSetCity_name()) {
        oprot.writeString(struct.city_name);
      }
      if (struct.isSetLac()) {
        oprot.writeI32(struct.lac);
      }
      if (struct.isSetCid()) {
        oprot.writeI32(struct.cid);
      }
      if (struct.isSetOs_api_level()) {
        oprot.writeString(struct.os_api_level);
      }
      if (struct.isSetSn()) {
        oprot.writeString(struct.sn);
      }
      if (struct.isSetTag()) {
        {
          oprot.writeI32(struct.tag.size());
          for (Map.Entry<String, List<String>> _iter9 : struct.tag.entrySet())
          {
            oprot.writeString(_iter9.getKey());
            {
              oprot.writeI32(_iter9.getValue().size());
              for (String _iter10 : _iter9.getValue())
              {
                oprot.writeString(_iter10);
              }
            }
          }
        }
      }
      if (struct.isSetDev_price_level()) {
        oprot.writeI32(struct.dev_price_level);
      }
      if (struct.isSetApp()) {
        oprot.writeString(struct.app);
      }
      if (struct.isSetType()) {
        oprot.writeString(struct.type);
      }
      if (struct.isSetVersion()) {
        oprot.writeString(struct.version);
      }
      if (struct.isSetResult_num()) {
        oprot.writeI32(struct.result_num);
      }
      if (struct.isSetChannel()) {
        oprot.writeString(struct.channel);
      }
      if (struct.isSetNet()) {
        oprot.writeString(struct.net);
      }
      if (struct.isSetHash()) {
        oprot.writeString(struct.hash);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RtbUserInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(35);
      if (incoming.get(0)) {
        struct.imei = iprot.readString();
        struct.setImeiIsSet(true);
      }
      if (incoming.get(1)) {
        struct.os = iprot.readString();
        struct.setOsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.osversion = iprot.readString();
        struct.setOsversionIsSet(true);
      }
      if (incoming.get(3)) {
        struct.phonemodel = iprot.readString();
        struct.setPhonemodelIsSet(true);
      }
      if (incoming.get(4)) {
        struct.mobile = iprot.readString();
        struct.setMobileIsSet(true);
      }
      if (incoming.get(5)) {
        struct.client_ip = iprot.readString();
        struct.setClient_ipIsSet(true);
      }
      if (incoming.get(6)) {
        struct.city = iprot.readString();
        struct.setCityIsSet(true);
      }
      if (incoming.get(7)) {
        struct.lon = iprot.readString();
        struct.setLonIsSet(true);
      }
      if (incoming.get(8)) {
        struct.lat = iprot.readString();
        struct.setLatIsSet(true);
      }
      if (incoming.get(9)) {
        struct.ua = iprot.readString();
        struct.setUaIsSet(true);
      }
      if (incoming.get(10)) {
        struct.aaid = iprot.readString();
        struct.setAaidIsSet(true);
      }
      if (incoming.get(11)) {
        struct.adid = iprot.readString();
        struct.setAdidIsSet(true);
      }
      if (incoming.get(12)) {
        struct.idfa = iprot.readString();
        struct.setIdfaIsSet(true);
      }
      if (incoming.get(13)) {
        struct.brand_id = iprot.readString();
        struct.setBrand_idIsSet(true);
      }
      if (incoming.get(14)) {
        struct.brand_name = iprot.readString();
        struct.setBrand_nameIsSet(true);
      }
      if (incoming.get(15)) {
        struct.device_height = iprot.readI32();
        struct.setDevice_heightIsSet(true);
      }
      if (incoming.get(16)) {
        struct.device_width = iprot.readI32();
        struct.setDevice_widthIsSet(true);
      }
      if (incoming.get(17)) {
        struct.mac = iprot.readString();
        struct.setMacIsSet(true);
      }
      if (incoming.get(18)) {
        struct.imsi = iprot.readString();
        struct.setImsiIsSet(true);
      }
      if (incoming.get(19)) {
        struct.dip = iprot.readString();
        struct.setDipIsSet(true);
      }
      if (incoming.get(20)) {
        struct.density = iprot.readString();
        struct.setDensityIsSet(true);
      }
      if (incoming.get(21)) {
        struct.city_name = iprot.readString();
        struct.setCity_nameIsSet(true);
      }
      if (incoming.get(22)) {
        struct.lac = iprot.readI32();
        struct.setLacIsSet(true);
      }
      if (incoming.get(23)) {
        struct.cid = iprot.readI32();
        struct.setCidIsSet(true);
      }
      if (incoming.get(24)) {
        struct.os_api_level = iprot.readString();
        struct.setOs_api_levelIsSet(true);
      }
      if (incoming.get(25)) {
        struct.sn = iprot.readString();
        struct.setSnIsSet(true);
      }
      if (incoming.get(26)) {
        {
          org.apache.thrift.protocol.TMap _map11 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, iprot.readI32());
          struct.tag = new HashMap<String,List<String>>(2*_map11.size);
          String _key12;
          List<String> _val13;
          for (int _i14 = 0; _i14 < _map11.size; ++_i14)
          {
            _key12 = iprot.readString();
            {
              org.apache.thrift.protocol.TList _list15 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
              _val13 = new ArrayList<String>(_list15.size);
              String _elem16;
              for (int _i17 = 0; _i17 < _list15.size; ++_i17)
              {
                _elem16 = iprot.readString();
                _val13.add(_elem16);
              }
            }
            struct.tag.put(_key12, _val13);
          }
        }
        struct.setTagIsSet(true);
      }
      if (incoming.get(27)) {
        struct.dev_price_level = iprot.readI32();
        struct.setDev_price_levelIsSet(true);
      }
      if (incoming.get(28)) {
        struct.app = iprot.readString();
        struct.setAppIsSet(true);
      }
      if (incoming.get(29)) {
        struct.type = iprot.readString();
        struct.setTypeIsSet(true);
      }
      if (incoming.get(30)) {
        struct.version = iprot.readString();
        struct.setVersionIsSet(true);
      }
      if (incoming.get(31)) {
        struct.result_num = iprot.readI32();
        struct.setResult_numIsSet(true);
      }
      if (incoming.get(32)) {
        struct.channel = iprot.readString();
        struct.setChannelIsSet(true);
      }
      if (incoming.get(33)) {
        struct.net = iprot.readString();
        struct.setNetIsSet(true);
      }
      if (incoming.get(34)) {
        struct.hash = iprot.readString();
        struct.setHashIsSet(true);
      }
    }
  }

}

