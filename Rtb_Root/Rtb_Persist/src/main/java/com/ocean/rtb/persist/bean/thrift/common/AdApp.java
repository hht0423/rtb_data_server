/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ocean.rtb.persist.bean.thrift.common;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2019-3-22")
public class AdApp implements org.apache.thrift.TBase<AdApp, AdApp._Fields>, java.io.Serializable, Cloneable, Comparable<AdApp> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AdApp");

  private static final org.apache.thrift.protocol.TField CP_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("cpName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField CP_AUTHOR_FIELD_DESC = new org.apache.thrift.protocol.TField("cpAuthor", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CP_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("cpVersion", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField CP_LANGUAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("cpLanguage", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField CP_PACKAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("cpPackage", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField CP_ICON_FIELD_DESC = new org.apache.thrift.protocol.TField("cpIcon", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField CP_MEMO_FIELD_DESC = new org.apache.thrift.protocol.TField("cpMemo", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField CP_IMGS_FIELD_DESC = new org.apache.thrift.protocol.TField("cpImgs", org.apache.thrift.protocol.TType.LIST, (short)8);
  private static final org.apache.thrift.protocol.TField CPCLASS_FIELD_DESC = new org.apache.thrift.protocol.TField("cpclass", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField DEEP_LINK_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("deepLinkUrl", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField CP_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("cpUrl", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField CP_APK_MD5_FIELD_DESC = new org.apache.thrift.protocol.TField("cpApkMd5", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField CP_APK_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("cpApkSize", org.apache.thrift.protocol.TType.I64, (short)13);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new AdAppStandardSchemeFactory());
    schemes.put(TupleScheme.class, new AdAppTupleSchemeFactory());
  }

  public String cpName; // optional
  public String cpAuthor; // optional
  public String cpVersion; // optional
  public String cpLanguage; // optional
  public String cpPackage; // optional
  public String cpIcon; // optional
  public String cpMemo; // optional
  public List<String> cpImgs; // optional
  public String cpclass; // optional
  public String deepLinkUrl; // optional
  public String cpUrl; // optional
  public String cpApkMd5; // optional
  public long cpApkSize; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CP_NAME((short)1, "cpName"),
    CP_AUTHOR((short)2, "cpAuthor"),
    CP_VERSION((short)3, "cpVersion"),
    CP_LANGUAGE((short)4, "cpLanguage"),
    CP_PACKAGE((short)5, "cpPackage"),
    CP_ICON((short)6, "cpIcon"),
    CP_MEMO((short)7, "cpMemo"),
    CP_IMGS((short)8, "cpImgs"),
    CPCLASS((short)9, "cpclass"),
    DEEP_LINK_URL((short)10, "deepLinkUrl"),
    CP_URL((short)11, "cpUrl"),
    CP_APK_MD5((short)12, "cpApkMd5"),
    CP_APK_SIZE((short)13, "cpApkSize");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CP_NAME
          return CP_NAME;
        case 2: // CP_AUTHOR
          return CP_AUTHOR;
        case 3: // CP_VERSION
          return CP_VERSION;
        case 4: // CP_LANGUAGE
          return CP_LANGUAGE;
        case 5: // CP_PACKAGE
          return CP_PACKAGE;
        case 6: // CP_ICON
          return CP_ICON;
        case 7: // CP_MEMO
          return CP_MEMO;
        case 8: // CP_IMGS
          return CP_IMGS;
        case 9: // CPCLASS
          return CPCLASS;
        case 10: // DEEP_LINK_URL
          return DEEP_LINK_URL;
        case 11: // CP_URL
          return CP_URL;
        case 12: // CP_APK_MD5
          return CP_APK_MD5;
        case 13: // CP_APK_SIZE
          return CP_APK_SIZE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CPAPKSIZE_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.CP_NAME,_Fields.CP_AUTHOR,_Fields.CP_VERSION,_Fields.CP_LANGUAGE,_Fields.CP_PACKAGE,_Fields.CP_ICON,_Fields.CP_MEMO,_Fields.CP_IMGS,_Fields.CPCLASS,_Fields.DEEP_LINK_URL,_Fields.CP_URL,_Fields.CP_APK_MD5,_Fields.CP_APK_SIZE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CP_NAME, new org.apache.thrift.meta_data.FieldMetaData("cpName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CP_AUTHOR, new org.apache.thrift.meta_data.FieldMetaData("cpAuthor", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CP_VERSION, new org.apache.thrift.meta_data.FieldMetaData("cpVersion", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CP_LANGUAGE, new org.apache.thrift.meta_data.FieldMetaData("cpLanguage", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CP_PACKAGE, new org.apache.thrift.meta_data.FieldMetaData("cpPackage", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CP_ICON, new org.apache.thrift.meta_data.FieldMetaData("cpIcon", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CP_MEMO, new org.apache.thrift.meta_data.FieldMetaData("cpMemo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CP_IMGS, new org.apache.thrift.meta_data.FieldMetaData("cpImgs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.CPCLASS, new org.apache.thrift.meta_data.FieldMetaData("cpclass", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DEEP_LINK_URL, new org.apache.thrift.meta_data.FieldMetaData("deepLinkUrl", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CP_URL, new org.apache.thrift.meta_data.FieldMetaData("cpUrl", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CP_APK_MD5, new org.apache.thrift.meta_data.FieldMetaData("cpApkMd5", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CP_APK_SIZE, new org.apache.thrift.meta_data.FieldMetaData("cpApkSize", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AdApp.class, metaDataMap);
  }

  public AdApp() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AdApp(AdApp other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetCpName()) {
      this.cpName = other.cpName;
    }
    if (other.isSetCpAuthor()) {
      this.cpAuthor = other.cpAuthor;
    }
    if (other.isSetCpVersion()) {
      this.cpVersion = other.cpVersion;
    }
    if (other.isSetCpLanguage()) {
      this.cpLanguage = other.cpLanguage;
    }
    if (other.isSetCpPackage()) {
      this.cpPackage = other.cpPackage;
    }
    if (other.isSetCpIcon()) {
      this.cpIcon = other.cpIcon;
    }
    if (other.isSetCpMemo()) {
      this.cpMemo = other.cpMemo;
    }
    if (other.isSetCpImgs()) {
      List<String> __this__cpImgs = new ArrayList<String>(other.cpImgs);
      this.cpImgs = __this__cpImgs;
    }
    if (other.isSetCpclass()) {
      this.cpclass = other.cpclass;
    }
    if (other.isSetDeepLinkUrl()) {
      this.deepLinkUrl = other.deepLinkUrl;
    }
    if (other.isSetCpUrl()) {
      this.cpUrl = other.cpUrl;
    }
    if (other.isSetCpApkMd5()) {
      this.cpApkMd5 = other.cpApkMd5;
    }
    this.cpApkSize = other.cpApkSize;
  }

  public AdApp deepCopy() {
    return new AdApp(this);
  }

  @Override
  public void clear() {
    this.cpName = null;
    this.cpAuthor = null;
    this.cpVersion = null;
    this.cpLanguage = null;
    this.cpPackage = null;
    this.cpIcon = null;
    this.cpMemo = null;
    this.cpImgs = null;
    this.cpclass = null;
    this.deepLinkUrl = null;
    this.cpUrl = null;
    this.cpApkMd5 = null;
    setCpApkSizeIsSet(false);
    this.cpApkSize = 0;
  }

  public String getCpName() {
    return this.cpName;
  }

  public AdApp setCpName(String cpName) {
    this.cpName = cpName;
    return this;
  }

  public void unsetCpName() {
    this.cpName = null;
  }

  /** Returns true if field cpName is set (has been assigned a value) and false otherwise */
  public boolean isSetCpName() {
    return this.cpName != null;
  }

  public void setCpNameIsSet(boolean value) {
    if (!value) {
      this.cpName = null;
    }
  }

  public String getCpAuthor() {
    return this.cpAuthor;
  }

  public AdApp setCpAuthor(String cpAuthor) {
    this.cpAuthor = cpAuthor;
    return this;
  }

  public void unsetCpAuthor() {
    this.cpAuthor = null;
  }

  /** Returns true if field cpAuthor is set (has been assigned a value) and false otherwise */
  public boolean isSetCpAuthor() {
    return this.cpAuthor != null;
  }

  public void setCpAuthorIsSet(boolean value) {
    if (!value) {
      this.cpAuthor = null;
    }
  }

  public String getCpVersion() {
    return this.cpVersion;
  }

  public AdApp setCpVersion(String cpVersion) {
    this.cpVersion = cpVersion;
    return this;
  }

  public void unsetCpVersion() {
    this.cpVersion = null;
  }

  /** Returns true if field cpVersion is set (has been assigned a value) and false otherwise */
  public boolean isSetCpVersion() {
    return this.cpVersion != null;
  }

  public void setCpVersionIsSet(boolean value) {
    if (!value) {
      this.cpVersion = null;
    }
  }

  public String getCpLanguage() {
    return this.cpLanguage;
  }

  public AdApp setCpLanguage(String cpLanguage) {
    this.cpLanguage = cpLanguage;
    return this;
  }

  public void unsetCpLanguage() {
    this.cpLanguage = null;
  }

  /** Returns true if field cpLanguage is set (has been assigned a value) and false otherwise */
  public boolean isSetCpLanguage() {
    return this.cpLanguage != null;
  }

  public void setCpLanguageIsSet(boolean value) {
    if (!value) {
      this.cpLanguage = null;
    }
  }

  public String getCpPackage() {
    return this.cpPackage;
  }

  public AdApp setCpPackage(String cpPackage) {
    this.cpPackage = cpPackage;
    return this;
  }

  public void unsetCpPackage() {
    this.cpPackage = null;
  }

  /** Returns true if field cpPackage is set (has been assigned a value) and false otherwise */
  public boolean isSetCpPackage() {
    return this.cpPackage != null;
  }

  public void setCpPackageIsSet(boolean value) {
    if (!value) {
      this.cpPackage = null;
    }
  }

  public String getCpIcon() {
    return this.cpIcon;
  }

  public AdApp setCpIcon(String cpIcon) {
    this.cpIcon = cpIcon;
    return this;
  }

  public void unsetCpIcon() {
    this.cpIcon = null;
  }

  /** Returns true if field cpIcon is set (has been assigned a value) and false otherwise */
  public boolean isSetCpIcon() {
    return this.cpIcon != null;
  }

  public void setCpIconIsSet(boolean value) {
    if (!value) {
      this.cpIcon = null;
    }
  }

  public String getCpMemo() {
    return this.cpMemo;
  }

  public AdApp setCpMemo(String cpMemo) {
    this.cpMemo = cpMemo;
    return this;
  }

  public void unsetCpMemo() {
    this.cpMemo = null;
  }

  /** Returns true if field cpMemo is set (has been assigned a value) and false otherwise */
  public boolean isSetCpMemo() {
    return this.cpMemo != null;
  }

  public void setCpMemoIsSet(boolean value) {
    if (!value) {
      this.cpMemo = null;
    }
  }

  public int getCpImgsSize() {
    return (this.cpImgs == null) ? 0 : this.cpImgs.size();
  }

  public java.util.Iterator<String> getCpImgsIterator() {
    return (this.cpImgs == null) ? null : this.cpImgs.iterator();
  }

  public void addToCpImgs(String elem) {
    if (this.cpImgs == null) {
      this.cpImgs = new ArrayList<String>();
    }
    this.cpImgs.add(elem);
  }

  public List<String> getCpImgs() {
    return this.cpImgs;
  }

  public AdApp setCpImgs(List<String> cpImgs) {
    this.cpImgs = cpImgs;
    return this;
  }

  public void unsetCpImgs() {
    this.cpImgs = null;
  }

  /** Returns true if field cpImgs is set (has been assigned a value) and false otherwise */
  public boolean isSetCpImgs() {
    return this.cpImgs != null;
  }

  public void setCpImgsIsSet(boolean value) {
    if (!value) {
      this.cpImgs = null;
    }
  }

  public String getCpclass() {
    return this.cpclass;
  }

  public AdApp setCpclass(String cpclass) {
    this.cpclass = cpclass;
    return this;
  }

  public void unsetCpclass() {
    this.cpclass = null;
  }

  /** Returns true if field cpclass is set (has been assigned a value) and false otherwise */
  public boolean isSetCpclass() {
    return this.cpclass != null;
  }

  public void setCpclassIsSet(boolean value) {
    if (!value) {
      this.cpclass = null;
    }
  }

  public String getDeepLinkUrl() {
    return this.deepLinkUrl;
  }

  public AdApp setDeepLinkUrl(String deepLinkUrl) {
    this.deepLinkUrl = deepLinkUrl;
    return this;
  }

  public void unsetDeepLinkUrl() {
    this.deepLinkUrl = null;
  }

  /** Returns true if field deepLinkUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetDeepLinkUrl() {
    return this.deepLinkUrl != null;
  }

  public void setDeepLinkUrlIsSet(boolean value) {
    if (!value) {
      this.deepLinkUrl = null;
    }
  }

  public String getCpUrl() {
    return this.cpUrl;
  }

  public AdApp setCpUrl(String cpUrl) {
    this.cpUrl = cpUrl;
    return this;
  }

  public void unsetCpUrl() {
    this.cpUrl = null;
  }

  /** Returns true if field cpUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetCpUrl() {
    return this.cpUrl != null;
  }

  public void setCpUrlIsSet(boolean value) {
    if (!value) {
      this.cpUrl = null;
    }
  }

  public String getCpApkMd5() {
    return this.cpApkMd5;
  }

  public AdApp setCpApkMd5(String cpApkMd5) {
    this.cpApkMd5 = cpApkMd5;
    return this;
  }

  public void unsetCpApkMd5() {
    this.cpApkMd5 = null;
  }

  /** Returns true if field cpApkMd5 is set (has been assigned a value) and false otherwise */
  public boolean isSetCpApkMd5() {
    return this.cpApkMd5 != null;
  }

  public void setCpApkMd5IsSet(boolean value) {
    if (!value) {
      this.cpApkMd5 = null;
    }
  }

  public long getCpApkSize() {
    return this.cpApkSize;
  }

  public AdApp setCpApkSize(long cpApkSize) {
    this.cpApkSize = cpApkSize;
    setCpApkSizeIsSet(true);
    return this;
  }

  public void unsetCpApkSize() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CPAPKSIZE_ISSET_ID);
  }

  /** Returns true if field cpApkSize is set (has been assigned a value) and false otherwise */
  public boolean isSetCpApkSize() {
    return EncodingUtils.testBit(__isset_bitfield, __CPAPKSIZE_ISSET_ID);
  }

  public void setCpApkSizeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CPAPKSIZE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CP_NAME:
      if (value == null) {
        unsetCpName();
      } else {
        setCpName((String)value);
      }
      break;

    case CP_AUTHOR:
      if (value == null) {
        unsetCpAuthor();
      } else {
        setCpAuthor((String)value);
      }
      break;

    case CP_VERSION:
      if (value == null) {
        unsetCpVersion();
      } else {
        setCpVersion((String)value);
      }
      break;

    case CP_LANGUAGE:
      if (value == null) {
        unsetCpLanguage();
      } else {
        setCpLanguage((String)value);
      }
      break;

    case CP_PACKAGE:
      if (value == null) {
        unsetCpPackage();
      } else {
        setCpPackage((String)value);
      }
      break;

    case CP_ICON:
      if (value == null) {
        unsetCpIcon();
      } else {
        setCpIcon((String)value);
      }
      break;

    case CP_MEMO:
      if (value == null) {
        unsetCpMemo();
      } else {
        setCpMemo((String)value);
      }
      break;

    case CP_IMGS:
      if (value == null) {
        unsetCpImgs();
      } else {
        setCpImgs((List<String>)value);
      }
      break;

    case CPCLASS:
      if (value == null) {
        unsetCpclass();
      } else {
        setCpclass((String)value);
      }
      break;

    case DEEP_LINK_URL:
      if (value == null) {
        unsetDeepLinkUrl();
      } else {
        setDeepLinkUrl((String)value);
      }
      break;

    case CP_URL:
      if (value == null) {
        unsetCpUrl();
      } else {
        setCpUrl((String)value);
      }
      break;

    case CP_APK_MD5:
      if (value == null) {
        unsetCpApkMd5();
      } else {
        setCpApkMd5((String)value);
      }
      break;

    case CP_APK_SIZE:
      if (value == null) {
        unsetCpApkSize();
      } else {
        setCpApkSize((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CP_NAME:
      return getCpName();

    case CP_AUTHOR:
      return getCpAuthor();

    case CP_VERSION:
      return getCpVersion();

    case CP_LANGUAGE:
      return getCpLanguage();

    case CP_PACKAGE:
      return getCpPackage();

    case CP_ICON:
      return getCpIcon();

    case CP_MEMO:
      return getCpMemo();

    case CP_IMGS:
      return getCpImgs();

    case CPCLASS:
      return getCpclass();

    case DEEP_LINK_URL:
      return getDeepLinkUrl();

    case CP_URL:
      return getCpUrl();

    case CP_APK_MD5:
      return getCpApkMd5();

    case CP_APK_SIZE:
      return Long.valueOf(getCpApkSize());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CP_NAME:
      return isSetCpName();
    case CP_AUTHOR:
      return isSetCpAuthor();
    case CP_VERSION:
      return isSetCpVersion();
    case CP_LANGUAGE:
      return isSetCpLanguage();
    case CP_PACKAGE:
      return isSetCpPackage();
    case CP_ICON:
      return isSetCpIcon();
    case CP_MEMO:
      return isSetCpMemo();
    case CP_IMGS:
      return isSetCpImgs();
    case CPCLASS:
      return isSetCpclass();
    case DEEP_LINK_URL:
      return isSetDeepLinkUrl();
    case CP_URL:
      return isSetCpUrl();
    case CP_APK_MD5:
      return isSetCpApkMd5();
    case CP_APK_SIZE:
      return isSetCpApkSize();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof AdApp)
      return this.equals((AdApp)that);
    return false;
  }

  public boolean equals(AdApp that) {
    if (that == null)
      return false;

    boolean this_present_cpName = true && this.isSetCpName();
    boolean that_present_cpName = true && that.isSetCpName();
    if (this_present_cpName || that_present_cpName) {
      if (!(this_present_cpName && that_present_cpName))
        return false;
      if (!this.cpName.equals(that.cpName))
        return false;
    }

    boolean this_present_cpAuthor = true && this.isSetCpAuthor();
    boolean that_present_cpAuthor = true && that.isSetCpAuthor();
    if (this_present_cpAuthor || that_present_cpAuthor) {
      if (!(this_present_cpAuthor && that_present_cpAuthor))
        return false;
      if (!this.cpAuthor.equals(that.cpAuthor))
        return false;
    }

    boolean this_present_cpVersion = true && this.isSetCpVersion();
    boolean that_present_cpVersion = true && that.isSetCpVersion();
    if (this_present_cpVersion || that_present_cpVersion) {
      if (!(this_present_cpVersion && that_present_cpVersion))
        return false;
      if (!this.cpVersion.equals(that.cpVersion))
        return false;
    }

    boolean this_present_cpLanguage = true && this.isSetCpLanguage();
    boolean that_present_cpLanguage = true && that.isSetCpLanguage();
    if (this_present_cpLanguage || that_present_cpLanguage) {
      if (!(this_present_cpLanguage && that_present_cpLanguage))
        return false;
      if (!this.cpLanguage.equals(that.cpLanguage))
        return false;
    }

    boolean this_present_cpPackage = true && this.isSetCpPackage();
    boolean that_present_cpPackage = true && that.isSetCpPackage();
    if (this_present_cpPackage || that_present_cpPackage) {
      if (!(this_present_cpPackage && that_present_cpPackage))
        return false;
      if (!this.cpPackage.equals(that.cpPackage))
        return false;
    }

    boolean this_present_cpIcon = true && this.isSetCpIcon();
    boolean that_present_cpIcon = true && that.isSetCpIcon();
    if (this_present_cpIcon || that_present_cpIcon) {
      if (!(this_present_cpIcon && that_present_cpIcon))
        return false;
      if (!this.cpIcon.equals(that.cpIcon))
        return false;
    }

    boolean this_present_cpMemo = true && this.isSetCpMemo();
    boolean that_present_cpMemo = true && that.isSetCpMemo();
    if (this_present_cpMemo || that_present_cpMemo) {
      if (!(this_present_cpMemo && that_present_cpMemo))
        return false;
      if (!this.cpMemo.equals(that.cpMemo))
        return false;
    }

    boolean this_present_cpImgs = true && this.isSetCpImgs();
    boolean that_present_cpImgs = true && that.isSetCpImgs();
    if (this_present_cpImgs || that_present_cpImgs) {
      if (!(this_present_cpImgs && that_present_cpImgs))
        return false;
      if (!this.cpImgs.equals(that.cpImgs))
        return false;
    }

    boolean this_present_cpclass = true && this.isSetCpclass();
    boolean that_present_cpclass = true && that.isSetCpclass();
    if (this_present_cpclass || that_present_cpclass) {
      if (!(this_present_cpclass && that_present_cpclass))
        return false;
      if (!this.cpclass.equals(that.cpclass))
        return false;
    }

    boolean this_present_deepLinkUrl = true && this.isSetDeepLinkUrl();
    boolean that_present_deepLinkUrl = true && that.isSetDeepLinkUrl();
    if (this_present_deepLinkUrl || that_present_deepLinkUrl) {
      if (!(this_present_deepLinkUrl && that_present_deepLinkUrl))
        return false;
      if (!this.deepLinkUrl.equals(that.deepLinkUrl))
        return false;
    }

    boolean this_present_cpUrl = true && this.isSetCpUrl();
    boolean that_present_cpUrl = true && that.isSetCpUrl();
    if (this_present_cpUrl || that_present_cpUrl) {
      if (!(this_present_cpUrl && that_present_cpUrl))
        return false;
      if (!this.cpUrl.equals(that.cpUrl))
        return false;
    }

    boolean this_present_cpApkMd5 = true && this.isSetCpApkMd5();
    boolean that_present_cpApkMd5 = true && that.isSetCpApkMd5();
    if (this_present_cpApkMd5 || that_present_cpApkMd5) {
      if (!(this_present_cpApkMd5 && that_present_cpApkMd5))
        return false;
      if (!this.cpApkMd5.equals(that.cpApkMd5))
        return false;
    }

    boolean this_present_cpApkSize = true && this.isSetCpApkSize();
    boolean that_present_cpApkSize = true && that.isSetCpApkSize();
    if (this_present_cpApkSize || that_present_cpApkSize) {
      if (!(this_present_cpApkSize && that_present_cpApkSize))
        return false;
      if (this.cpApkSize != that.cpApkSize)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_cpName = true && (isSetCpName());
    list.add(present_cpName);
    if (present_cpName)
      list.add(cpName);

    boolean present_cpAuthor = true && (isSetCpAuthor());
    list.add(present_cpAuthor);
    if (present_cpAuthor)
      list.add(cpAuthor);

    boolean present_cpVersion = true && (isSetCpVersion());
    list.add(present_cpVersion);
    if (present_cpVersion)
      list.add(cpVersion);

    boolean present_cpLanguage = true && (isSetCpLanguage());
    list.add(present_cpLanguage);
    if (present_cpLanguage)
      list.add(cpLanguage);

    boolean present_cpPackage = true && (isSetCpPackage());
    list.add(present_cpPackage);
    if (present_cpPackage)
      list.add(cpPackage);

    boolean present_cpIcon = true && (isSetCpIcon());
    list.add(present_cpIcon);
    if (present_cpIcon)
      list.add(cpIcon);

    boolean present_cpMemo = true && (isSetCpMemo());
    list.add(present_cpMemo);
    if (present_cpMemo)
      list.add(cpMemo);

    boolean present_cpImgs = true && (isSetCpImgs());
    list.add(present_cpImgs);
    if (present_cpImgs)
      list.add(cpImgs);

    boolean present_cpclass = true && (isSetCpclass());
    list.add(present_cpclass);
    if (present_cpclass)
      list.add(cpclass);

    boolean present_deepLinkUrl = true && (isSetDeepLinkUrl());
    list.add(present_deepLinkUrl);
    if (present_deepLinkUrl)
      list.add(deepLinkUrl);

    boolean present_cpUrl = true && (isSetCpUrl());
    list.add(present_cpUrl);
    if (present_cpUrl)
      list.add(cpUrl);

    boolean present_cpApkMd5 = true && (isSetCpApkMd5());
    list.add(present_cpApkMd5);
    if (present_cpApkMd5)
      list.add(cpApkMd5);

    boolean present_cpApkSize = true && (isSetCpApkSize());
    list.add(present_cpApkSize);
    if (present_cpApkSize)
      list.add(cpApkSize);

    return list.hashCode();
  }

  @Override
  public int compareTo(AdApp other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetCpName()).compareTo(other.isSetCpName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCpName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cpName, other.cpName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCpAuthor()).compareTo(other.isSetCpAuthor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCpAuthor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cpAuthor, other.cpAuthor);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCpVersion()).compareTo(other.isSetCpVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCpVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cpVersion, other.cpVersion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCpLanguage()).compareTo(other.isSetCpLanguage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCpLanguage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cpLanguage, other.cpLanguage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCpPackage()).compareTo(other.isSetCpPackage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCpPackage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cpPackage, other.cpPackage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCpIcon()).compareTo(other.isSetCpIcon());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCpIcon()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cpIcon, other.cpIcon);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCpMemo()).compareTo(other.isSetCpMemo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCpMemo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cpMemo, other.cpMemo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCpImgs()).compareTo(other.isSetCpImgs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCpImgs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cpImgs, other.cpImgs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCpclass()).compareTo(other.isSetCpclass());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCpclass()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cpclass, other.cpclass);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeepLinkUrl()).compareTo(other.isSetDeepLinkUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeepLinkUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deepLinkUrl, other.deepLinkUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCpUrl()).compareTo(other.isSetCpUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCpUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cpUrl, other.cpUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCpApkMd5()).compareTo(other.isSetCpApkMd5());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCpApkMd5()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cpApkMd5, other.cpApkMd5);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCpApkSize()).compareTo(other.isSetCpApkSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCpApkSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cpApkSize, other.cpApkSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("AdApp(");
    boolean first = true;

    if (isSetCpName()) {
      sb.append("cpName:");
      if (this.cpName == null) {
        sb.append("null");
      } else {
        sb.append(this.cpName);
      }
      first = false;
    }
    if (isSetCpAuthor()) {
      if (!first) sb.append(", ");
      sb.append("cpAuthor:");
      if (this.cpAuthor == null) {
        sb.append("null");
      } else {
        sb.append(this.cpAuthor);
      }
      first = false;
    }
    if (isSetCpVersion()) {
      if (!first) sb.append(", ");
      sb.append("cpVersion:");
      if (this.cpVersion == null) {
        sb.append("null");
      } else {
        sb.append(this.cpVersion);
      }
      first = false;
    }
    if (isSetCpLanguage()) {
      if (!first) sb.append(", ");
      sb.append("cpLanguage:");
      if (this.cpLanguage == null) {
        sb.append("null");
      } else {
        sb.append(this.cpLanguage);
      }
      first = false;
    }
    if (isSetCpPackage()) {
      if (!first) sb.append(", ");
      sb.append("cpPackage:");
      if (this.cpPackage == null) {
        sb.append("null");
      } else {
        sb.append(this.cpPackage);
      }
      first = false;
    }
    if (isSetCpIcon()) {
      if (!first) sb.append(", ");
      sb.append("cpIcon:");
      if (this.cpIcon == null) {
        sb.append("null");
      } else {
        sb.append(this.cpIcon);
      }
      first = false;
    }
    if (isSetCpMemo()) {
      if (!first) sb.append(", ");
      sb.append("cpMemo:");
      if (this.cpMemo == null) {
        sb.append("null");
      } else {
        sb.append(this.cpMemo);
      }
      first = false;
    }
    if (isSetCpImgs()) {
      if (!first) sb.append(", ");
      sb.append("cpImgs:");
      if (this.cpImgs == null) {
        sb.append("null");
      } else {
        sb.append(this.cpImgs);
      }
      first = false;
    }
    if (isSetCpclass()) {
      if (!first) sb.append(", ");
      sb.append("cpclass:");
      if (this.cpclass == null) {
        sb.append("null");
      } else {
        sb.append(this.cpclass);
      }
      first = false;
    }
    if (isSetDeepLinkUrl()) {
      if (!first) sb.append(", ");
      sb.append("deepLinkUrl:");
      if (this.deepLinkUrl == null) {
        sb.append("null");
      } else {
        sb.append(this.deepLinkUrl);
      }
      first = false;
    }
    if (isSetCpUrl()) {
      if (!first) sb.append(", ");
      sb.append("cpUrl:");
      if (this.cpUrl == null) {
        sb.append("null");
      } else {
        sb.append(this.cpUrl);
      }
      first = false;
    }
    if (isSetCpApkMd5()) {
      if (!first) sb.append(", ");
      sb.append("cpApkMd5:");
      if (this.cpApkMd5 == null) {
        sb.append("null");
      } else {
        sb.append(this.cpApkMd5);
      }
      first = false;
    }
    if (isSetCpApkSize()) {
      if (!first) sb.append(", ");
      sb.append("cpApkSize:");
      sb.append(this.cpApkSize);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AdAppStandardSchemeFactory implements SchemeFactory {
    public AdAppStandardScheme getScheme() {
      return new AdAppStandardScheme();
    }
  }

  private static class AdAppStandardScheme extends StandardScheme<AdApp> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, AdApp struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CP_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cpName = iprot.readString();
              struct.setCpNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CP_AUTHOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cpAuthor = iprot.readString();
              struct.setCpAuthorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CP_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cpVersion = iprot.readString();
              struct.setCpVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CP_LANGUAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cpLanguage = iprot.readString();
              struct.setCpLanguageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CP_PACKAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cpPackage = iprot.readString();
              struct.setCpPackageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CP_ICON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cpIcon = iprot.readString();
              struct.setCpIconIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CP_MEMO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cpMemo = iprot.readString();
              struct.setCpMemoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CP_IMGS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.cpImgs = new ArrayList<String>(_list0.size);
                String _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readString();
                  struct.cpImgs.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setCpImgsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // CPCLASS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cpclass = iprot.readString();
              struct.setCpclassIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // DEEP_LINK_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.deepLinkUrl = iprot.readString();
              struct.setDeepLinkUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // CP_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cpUrl = iprot.readString();
              struct.setCpUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // CP_APK_MD5
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cpApkMd5 = iprot.readString();
              struct.setCpApkMd5IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // CP_APK_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.cpApkSize = iprot.readI64();
              struct.setCpApkSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, AdApp struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.cpName != null) {
        if (struct.isSetCpName()) {
          oprot.writeFieldBegin(CP_NAME_FIELD_DESC);
          oprot.writeString(struct.cpName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.cpAuthor != null) {
        if (struct.isSetCpAuthor()) {
          oprot.writeFieldBegin(CP_AUTHOR_FIELD_DESC);
          oprot.writeString(struct.cpAuthor);
          oprot.writeFieldEnd();
        }
      }
      if (struct.cpVersion != null) {
        if (struct.isSetCpVersion()) {
          oprot.writeFieldBegin(CP_VERSION_FIELD_DESC);
          oprot.writeString(struct.cpVersion);
          oprot.writeFieldEnd();
        }
      }
      if (struct.cpLanguage != null) {
        if (struct.isSetCpLanguage()) {
          oprot.writeFieldBegin(CP_LANGUAGE_FIELD_DESC);
          oprot.writeString(struct.cpLanguage);
          oprot.writeFieldEnd();
        }
      }
      if (struct.cpPackage != null) {
        if (struct.isSetCpPackage()) {
          oprot.writeFieldBegin(CP_PACKAGE_FIELD_DESC);
          oprot.writeString(struct.cpPackage);
          oprot.writeFieldEnd();
        }
      }
      if (struct.cpIcon != null) {
        if (struct.isSetCpIcon()) {
          oprot.writeFieldBegin(CP_ICON_FIELD_DESC);
          oprot.writeString(struct.cpIcon);
          oprot.writeFieldEnd();
        }
      }
      if (struct.cpMemo != null) {
        if (struct.isSetCpMemo()) {
          oprot.writeFieldBegin(CP_MEMO_FIELD_DESC);
          oprot.writeString(struct.cpMemo);
          oprot.writeFieldEnd();
        }
      }
      if (struct.cpImgs != null) {
        if (struct.isSetCpImgs()) {
          oprot.writeFieldBegin(CP_IMGS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.cpImgs.size()));
            for (String _iter3 : struct.cpImgs)
            {
              oprot.writeString(_iter3);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.cpclass != null) {
        if (struct.isSetCpclass()) {
          oprot.writeFieldBegin(CPCLASS_FIELD_DESC);
          oprot.writeString(struct.cpclass);
          oprot.writeFieldEnd();
        }
      }
      if (struct.deepLinkUrl != null) {
        if (struct.isSetDeepLinkUrl()) {
          oprot.writeFieldBegin(DEEP_LINK_URL_FIELD_DESC);
          oprot.writeString(struct.deepLinkUrl);
          oprot.writeFieldEnd();
        }
      }
      if (struct.cpUrl != null) {
        if (struct.isSetCpUrl()) {
          oprot.writeFieldBegin(CP_URL_FIELD_DESC);
          oprot.writeString(struct.cpUrl);
          oprot.writeFieldEnd();
        }
      }
      if (struct.cpApkMd5 != null) {
        if (struct.isSetCpApkMd5()) {
          oprot.writeFieldBegin(CP_APK_MD5_FIELD_DESC);
          oprot.writeString(struct.cpApkMd5);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetCpApkSize()) {
        oprot.writeFieldBegin(CP_APK_SIZE_FIELD_DESC);
        oprot.writeI64(struct.cpApkSize);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AdAppTupleSchemeFactory implements SchemeFactory {
    public AdAppTupleScheme getScheme() {
      return new AdAppTupleScheme();
    }
  }

  private static class AdAppTupleScheme extends TupleScheme<AdApp> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, AdApp struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetCpName()) {
        optionals.set(0);
      }
      if (struct.isSetCpAuthor()) {
        optionals.set(1);
      }
      if (struct.isSetCpVersion()) {
        optionals.set(2);
      }
      if (struct.isSetCpLanguage()) {
        optionals.set(3);
      }
      if (struct.isSetCpPackage()) {
        optionals.set(4);
      }
      if (struct.isSetCpIcon()) {
        optionals.set(5);
      }
      if (struct.isSetCpMemo()) {
        optionals.set(6);
      }
      if (struct.isSetCpImgs()) {
        optionals.set(7);
      }
      if (struct.isSetCpclass()) {
        optionals.set(8);
      }
      if (struct.isSetDeepLinkUrl()) {
        optionals.set(9);
      }
      if (struct.isSetCpUrl()) {
        optionals.set(10);
      }
      if (struct.isSetCpApkMd5()) {
        optionals.set(11);
      }
      if (struct.isSetCpApkSize()) {
        optionals.set(12);
      }
      oprot.writeBitSet(optionals, 13);
      if (struct.isSetCpName()) {
        oprot.writeString(struct.cpName);
      }
      if (struct.isSetCpAuthor()) {
        oprot.writeString(struct.cpAuthor);
      }
      if (struct.isSetCpVersion()) {
        oprot.writeString(struct.cpVersion);
      }
      if (struct.isSetCpLanguage()) {
        oprot.writeString(struct.cpLanguage);
      }
      if (struct.isSetCpPackage()) {
        oprot.writeString(struct.cpPackage);
      }
      if (struct.isSetCpIcon()) {
        oprot.writeString(struct.cpIcon);
      }
      if (struct.isSetCpMemo()) {
        oprot.writeString(struct.cpMemo);
      }
      if (struct.isSetCpImgs()) {
        {
          oprot.writeI32(struct.cpImgs.size());
          for (String _iter4 : struct.cpImgs)
          {
            oprot.writeString(_iter4);
          }
        }
      }
      if (struct.isSetCpclass()) {
        oprot.writeString(struct.cpclass);
      }
      if (struct.isSetDeepLinkUrl()) {
        oprot.writeString(struct.deepLinkUrl);
      }
      if (struct.isSetCpUrl()) {
        oprot.writeString(struct.cpUrl);
      }
      if (struct.isSetCpApkMd5()) {
        oprot.writeString(struct.cpApkMd5);
      }
      if (struct.isSetCpApkSize()) {
        oprot.writeI64(struct.cpApkSize);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, AdApp struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(13);
      if (incoming.get(0)) {
        struct.cpName = iprot.readString();
        struct.setCpNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.cpAuthor = iprot.readString();
        struct.setCpAuthorIsSet(true);
      }
      if (incoming.get(2)) {
        struct.cpVersion = iprot.readString();
        struct.setCpVersionIsSet(true);
      }
      if (incoming.get(3)) {
        struct.cpLanguage = iprot.readString();
        struct.setCpLanguageIsSet(true);
      }
      if (incoming.get(4)) {
        struct.cpPackage = iprot.readString();
        struct.setCpPackageIsSet(true);
      }
      if (incoming.get(5)) {
        struct.cpIcon = iprot.readString();
        struct.setCpIconIsSet(true);
      }
      if (incoming.get(6)) {
        struct.cpMemo = iprot.readString();
        struct.setCpMemoIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.cpImgs = new ArrayList<String>(_list5.size);
          String _elem6;
          for (int _i7 = 0; _i7 < _list5.size; ++_i7)
          {
            _elem6 = iprot.readString();
            struct.cpImgs.add(_elem6);
          }
        }
        struct.setCpImgsIsSet(true);
      }
      if (incoming.get(8)) {
        struct.cpclass = iprot.readString();
        struct.setCpclassIsSet(true);
      }
      if (incoming.get(9)) {
        struct.deepLinkUrl = iprot.readString();
        struct.setDeepLinkUrlIsSet(true);
      }
      if (incoming.get(10)) {
        struct.cpUrl = iprot.readString();
        struct.setCpUrlIsSet(true);
      }
      if (incoming.get(11)) {
        struct.cpApkMd5 = iprot.readString();
        struct.setCpApkMd5IsSet(true);
      }
      if (incoming.get(12)) {
        struct.cpApkSize = iprot.readI64();
        struct.setCpApkSizeIsSet(true);
      }
    }
  }

}

